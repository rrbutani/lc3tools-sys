#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[repr(C)]
    #[derive(
        Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd,
    )]
    pub struct __BindgenBitfieldUnit<Storage, Align> {
        storage: Storage,
        align: [Align; 0],
    }
    impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align> {
        #[inline]
        pub const fn new(storage: Storage) -> Self {
            Self { storage, align: [] }
        }
    }
    impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
    where
        Storage: AsRef<[u8]> + AsMut<[u8]>,
    {
        #[inline]
        pub fn get_bit(&self, index: usize) -> bool {
            debug_assert!(index / 8 < self.storage.as_ref().len());
            let byte_index = index / 8;
            let byte = self.storage.as_ref()[byte_index];
            let bit_index = if cfg!(target_endian = "big") {
                7 - (index % 8)
            } else {
                index % 8
            };
            let mask = 1 << bit_index;
            byte & mask == mask
        }
        #[inline]
        pub fn set_bit(&mut self, index: usize, val: bool) {
            debug_assert!(index / 8 < self.storage.as_ref().len());
            let byte_index = index / 8;
            let byte = &mut self.storage.as_mut()[byte_index];
            let bit_index = if cfg!(target_endian = "big") {
                7 - (index % 8)
            } else {
                index % 8
            };
            let mask = 1 << bit_index;
            if val {
                *byte |= mask;
            } else {
                *byte &= !mask;
            }
        }
        #[inline]
        pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
            debug_assert!(
                (bit_offset + (bit_width as usize)) / 8
                    <= self.storage.as_ref().len()
            );
            let mut val = 0;
            for i in 0..(bit_width as usize) {
                if self.get_bit(i + bit_offset) {
                    let index = if cfg!(target_endian = "big") {
                        bit_width as usize - 1 - i
                    } else {
                        i
                    };
                    val |= 1 << index;
                }
            }
            val
        }
        #[inline]
        pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
            debug_assert!(
                (bit_offset + (bit_width as usize)) / 8
                    <= self.storage.as_ref().len()
            );
            for i in 0..(bit_width as usize) {
                let mask = 1 << i;
                let val_bit_is_set = val & mask == mask;
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                self.set_bit(index + bit_offset, val_bit_is_set);
            }
        }
    }
    #[repr(C)]
    pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
    impl<T> __BindgenUnionField<T> {
        #[inline]
        pub const fn new() -> Self {
            __BindgenUnionField(::std::marker::PhantomData)
        }
        #[inline]
        pub unsafe fn as_ref(&self) -> &T {
            ::std::mem::transmute(self)
        }
        #[inline]
        pub unsafe fn as_mut(&mut self) -> &mut T {
            ::std::mem::transmute(self)
        }
    }
    impl<T> ::std::default::Default for __BindgenUnionField<T> {
        #[inline]
        fn default() -> Self {
            Self::new()
        }
    }
    impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
        #[inline]
        fn clone(&self) -> Self {
            Self::new()
        }
    }
    impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
    impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
        fn fmt(
            &self,
            fmt: &mut ::std::fmt::Formatter<'_>,
        ) -> ::std::fmt::Result {
            fmt.write_str("__BindgenUnionField")
        }
    }
    impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
        fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
    }
    impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
        fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
            true
        }
    }
    impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
    #[allow(unused_imports)]
    use self::super::root;
    pub const _GLIBCXX_MAP: u32 = 1;
    pub const _STL_TREE_H: u32 = 1;
    pub const _STL_ALGOBASE_H: u32 = 1;
    pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
    pub const _GLIBCXX_RELEASE: u32 = 8;
    pub const __GLIBCXX__: u32 = 20200304;
    pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
    pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
    pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
    pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
    pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
    pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
    pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
    pub const _GLIBCXX_OS_DEFINES: u32 = 1;
    pub const __NO_CTYPE: u32 = 1;
    pub const _FEATURES_H: u32 = 1;
    pub const _ISOC95_SOURCE: u32 = 1;
    pub const _ISOC99_SOURCE: u32 = 1;
    pub const _ISOC11_SOURCE: u32 = 1;
    pub const _POSIX_SOURCE: u32 = 1;
    pub const _POSIX_C_SOURCE: u32 = 200809;
    pub const _XOPEN_SOURCE: u32 = 700;
    pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
    pub const _LARGEFILE64_SOURCE: u32 = 1;
    pub const _DEFAULT_SOURCE: u32 = 1;
    pub const _ATFILE_SOURCE: u32 = 1;
    pub const __USE_ISOC11: u32 = 1;
    pub const __USE_ISOC99: u32 = 1;
    pub const __USE_ISOC95: u32 = 1;
    pub const __USE_ISOCXX11: u32 = 1;
    pub const __USE_POSIX: u32 = 1;
    pub const __USE_POSIX2: u32 = 1;
    pub const __USE_POSIX199309: u32 = 1;
    pub const __USE_POSIX199506: u32 = 1;
    pub const __USE_XOPEN2K: u32 = 1;
    pub const __USE_XOPEN2K8: u32 = 1;
    pub const __USE_XOPEN: u32 = 1;
    pub const __USE_XOPEN_EXTENDED: u32 = 1;
    pub const __USE_UNIX98: u32 = 1;
    pub const _LARGEFILE_SOURCE: u32 = 1;
    pub const __USE_XOPEN2K8XSI: u32 = 1;
    pub const __USE_XOPEN2KXSI: u32 = 1;
    pub const __USE_LARGEFILE: u32 = 1;
    pub const __USE_LARGEFILE64: u32 = 1;
    pub const __USE_MISC: u32 = 1;
    pub const __USE_ATFILE: u32 = 1;
    pub const __USE_GNU: u32 = 1;
    pub const __USE_FORTIFY_LEVEL: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
    pub const _STDC_PREDEF_H: u32 = 1;
    pub const __STDC_IEC_559__: u32 = 1;
    pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
    pub const __STDC_ISO_10646__: u32 = 201706;
    pub const __STDC_NO_THREADS__: u32 = 1;
    pub const __GNU_LIBRARY__: u32 = 6;
    pub const __GLIBC__: u32 = 2;
    pub const __GLIBC_MINOR__: u32 = 27;
    pub const _SYS_CDEFS_H: u32 = 1;
    pub const __glibc_c99_flexarr_available: u32 = 1;
    pub const __WORDSIZE: u32 = 64;
    pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
    pub const __SYSCALL_WORDSIZE: u32 = 64;
    pub const __HAVE_GENERIC_SELECTION: u32 = 0;
    pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
    pub const _GLIBCXX_FAST_MATH: u32 = 0;
    pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
    pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
    pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
    pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
    pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
    pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
    pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
    pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
    pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
    pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
    pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
    pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
    pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
    pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
    pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
    pub const _GLIBCXX_HAVE_COSF: u32 = 1;
    pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
    pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
    pub const _GLIBCXX_HAVE_COSL: u32 = 1;
    pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_EBADMSG: u32 = 1;
    pub const _GLIBCXX_HAVE_ECANCELED: u32 = 1;
    pub const _GLIBCXX_HAVE_ECHILD: u32 = 1;
    pub const _GLIBCXX_HAVE_EIDRM: u32 = 1;
    pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ENODATA: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOLINK: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOSPC: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOSR: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOSTR: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOTRECOVERABLE: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOTSUP: u32 = 1;
    pub const _GLIBCXX_HAVE_EOVERFLOW: u32 = 1;
    pub const _GLIBCXX_HAVE_EOWNERDEAD: u32 = 1;
    pub const _GLIBCXX_HAVE_EPERM: u32 = 1;
    pub const _GLIBCXX_HAVE_EPROTO: u32 = 1;
    pub const _GLIBCXX_HAVE_ETIME: u32 = 1;
    pub const _GLIBCXX_HAVE_ETIMEDOUT: u32 = 1;
    pub const _GLIBCXX_HAVE_ETXTBSY: u32 = 1;
    pub const _GLIBCXX_HAVE_EWOULDBLOCK: u32 = 1;
    pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
    pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
    pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
    pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
    pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
    pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
    pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
    pub const _GLIBCXX_HAVE_GETS: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
    pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
    pub const _GLIBCXX_HAVE_INT64_T: u32 = 1;
    pub const _GLIBCXX_HAVE_INT64_T_LONG: u32 = 1;
    pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
    pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
    pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
    pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
    pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
    pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
    pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
    pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_RANDOM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_TYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
    pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
    pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
    pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
    pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
    pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
    pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
    pub const _GLIBCXX_HAVE_MODF: u32 = 1;
    pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
    pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
    pub const _GLIBCXX_HAVE_POLL: u32 = 1;
    pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
    pub const _GLIBCXX_HAVE_POWF: u32 = 1;
    pub const _GLIBCXX_HAVE_POWL: u32 = 1;
    pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
    pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
    pub const _GLIBCXX_HAVE_SINF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
    pub const _GLIBCXX_HAVE_SINL: u32 = 1;
    pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
    pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
    pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
    pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
    pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
    pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
    pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
    pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
    pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SDT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
    pub const _GLIBCXX_HAVE_TANF: u32 = 1;
    pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
    pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
    pub const _GLIBCXX_HAVE_TANL: u32 = 1;
    pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
    pub const _GLIBCXX_HAVE_TLS: u32 = 1;
    pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
    pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
    pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
    pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
    pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
    pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
    pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
    pub const LT_OBJDIR: &'static [u8; 7usize] = b".libs/\0";
    pub const _GLIBCXX_PACKAGE_BUGREPORT: &'static [u8; 1usize] = b"\0";
    pub const _GLIBCXX_PACKAGE_NAME: &'static [u8; 15usize] =
        b"package-unused\0";
    pub const _GLIBCXX_PACKAGE_STRING: &'static [u8; 30usize] =
        b"package-unused version-unused\0";
    pub const _GLIBCXX_PACKAGE_TARNAME: &'static [u8; 10usize] = b"libstdc++\0";
    pub const _GLIBCXX_PACKAGE_URL: &'static [u8; 1usize] = b"\0";
    pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &'static [u8; 15usize] =
        b"version-unused\0";
    pub const STDC_HEADERS: u32 = 1;
    pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
    pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
    pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
    pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
    pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
    pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
    pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
    pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
    pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
    pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
    pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
    pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
    pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
    pub const _GLIBCXX_HOSTED: u32 = 1;
    pub const _GLIBCXX_RES_LIMITS: u32 = 1;
    pub const _GLIBCXX_STDIO_EOF: i32 = -1;
    pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
    pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
    pub const _GLIBCXX_SYMVER: u32 = 1;
    pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
    pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
    pub const _GLIBCXX_USE_C99: u32 = 1;
    pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
    pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
    pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
    pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
    pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
    pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
    pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
    pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
    pub const _GLIBCXX_USE_INT128: u32 = 1;
    pub const _GLIBCXX_USE_LFS: u32 = 1;
    pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
    pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
    pub const _GLIBCXX_USE_NLS: u32 = 1;
    pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
    pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
    pub const _GLIBCXX_USE_REALPATH: u32 = 1;
    pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
    pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
    pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
    pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
    pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
    pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
    pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
    pub const _GLIBCXX_VERBOSE: u32 = 1;
    pub const _GLIBCXX_X86_RDRAND: u32 = 1;
    pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
    pub const _FUNCTEXCEPT_H: u32 = 1;
    pub const _EXCEPTION_DEFINES_H: u32 = 1;
    pub const _CPP_TYPE_TRAITS_H: u32 = 1;
    pub const _EXT_TYPE_TRAITS: u32 = 1;
    pub const _EXT_NUMERIC_TRAITS: u32 = 1;
    pub const _STL_PAIR_H: u32 = 1;
    pub const _MOVE_H: u32 = 1;
    pub const _CONCEPT_CHECK_H: u32 = 1;
    pub const _GLIBCXX_TYPE_TRAITS: u32 = 1;
    pub const __cpp_lib_integral_constant_callable: u32 = 201304;
    pub const __cpp_lib_is_null_pointer: u32 = 201309;
    pub const __cpp_lib_is_final: u32 = 201402;
    pub const __cpp_lib_transformation_trait_aliases: u32 = 201304;
    pub const __cpp_lib_result_of_sfinae: u32 = 201210;
    pub const _STL_ITERATOR_BASE_TYPES_H: u32 = 1;
    pub const _STL_ITERATOR_BASE_FUNCS_H: u32 = 1;
    pub const _GLIBCXX_DEBUG_ASSERTIONS_H: u32 = 1;
    pub const _STL_ITERATOR_H: u32 = 1;
    pub const _PTR_TRAITS_H: u32 = 1;
    pub const __cpp_lib_make_reverse_iterator: u32 = 201402;
    pub const _GLIBCXX_DEBUG_MACRO_SWITCH_H: u32 = 1;
    pub const _GLIBCXX_PREDEFINED_OPS_H: u32 = 1;
    pub const __cpp_lib_robust_nonmodifying_seq_ops: u32 = 201304;
    pub const _ALLOCATOR_H: u32 = 1;
    pub const _GLIBCXX_CXX_ALLOCATOR_H: u32 = 1;
    pub const _NEW_ALLOCATOR_H: u32 = 1;
    pub const __EXCEPTION_H: u32 = 1;
    pub const _CXXABI_INIT_EXCEPTION_H: u32 = 1;
    pub const _GLIBCXX_HAVE_CDTOR_CALLABI: u32 = 0;
    pub const _HASH_BYTES_H: u32 = 1;
    pub const __GXX_MERGED_TYPEINFO_NAMES: u32 = 0;
    pub const __GXX_TYPEINFO_EQUALITY_INLINE: u32 = 1;
    pub const _GLIBCXX_NESTED_EXCEPTION_H: u32 = 1;
    pub const _MEMORYFWD_H: u32 = 1;
    pub const __cpp_lib_incomplete_container_elements: u32 = 201505;
    pub const __cpp_lib_allocator_is_always_equal: u32 = 201411;
    pub const _STL_FUNCTION_H: u32 = 1;
    pub const __cpp_lib_transparent_operators: u32 = 201510;
    pub const _BACKWARD_BINDERS_H: u32 = 1;
    pub const _EXT_ALLOC_TRAITS_H: u32 = 1;
    pub const _ALLOC_TRAITS_H: u32 = 1;
    pub const __cpp_lib_allocator_traits_is_always_equal: u32 = 201411;
    pub const _ALIGNED_BUFFER_H: u32 = 1;
    pub const __cpp_lib_generic_associative_lookup: u32 = 201304;
    pub const _STL_MAP_H: u32 = 1;
    pub const _GLIBCXX_TUPLE: u32 = 1;
    pub const _GLIBCXX_UTILITY: u32 = 1;
    pub const _STL_RELOPS_H: u32 = 1;
    pub const __cpp_lib_tuple_element_t: u32 = 201402;
    pub const __cpp_lib_tuples_by_type: u32 = 201304;
    pub const __cpp_lib_exchange_function: u32 = 201304;
    pub const _GLIBCXX_USE_MAKE_INTEGER_SEQ: u32 = 1;
    pub const __cpp_lib_integer_sequence: u32 = 201304;
    pub const _GLIBCXX_ARRAY: u32 = 1;
    pub const _GLIBCXX_STDEXCEPT: u32 = 1;
    pub const _GLIBCXX_STRING: u32 = 1;
    pub const _STRINGFWD_H: u32 = 1;
    pub const _CHAR_TRAITS_H: u32 = 1;
    pub const _GLIBCXX_POSTYPES_H: u32 = 1;
    pub const _WCHAR_H: u32 = 1;
    pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
    pub const __HAVE_FLOAT128: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
    pub const __HAVE_FLOAT64X: u32 = 1;
    pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
    pub const __HAVE_FLOAT16: u32 = 0;
    pub const __HAVE_FLOAT32: u32 = 1;
    pub const __HAVE_FLOAT64: u32 = 1;
    pub const __HAVE_FLOAT32X: u32 = 1;
    pub const __HAVE_FLOAT128X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
    pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
    pub const __GNUC_VA_LIST: u32 = 1;
    pub const _BITS_WCHAR_H: u32 = 1;
    pub const __wint_t_defined: u32 = 1;
    pub const _WINT_T: u32 = 1;
    pub const __mbstate_t_defined: u32 = 1;
    pub const ____mbstate_t_defined: u32 = 1;
    pub const ____FILE_defined: u32 = 1;
    pub const __FILE_defined: u32 = 1;
    pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
    pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
    pub const WEOF: u32 = 4294967295;
    pub const _GLIBCXX_CWCHAR: u32 = 1;
    pub const _GLIBCXX_CSTDINT: u32 = 1;
    pub const _STDINT_H: u32 = 1;
    pub const _BITS_TYPES_H: u32 = 1;
    pub const _BITS_TYPESIZES_H: u32 = 1;
    pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
    pub const __INO_T_MATCHES_INO64_T: u32 = 1;
    pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
    pub const __FD_SETSIZE: u32 = 1024;
    pub const _BITS_STDINT_INTN_H: u32 = 1;
    pub const _BITS_STDINT_UINTN_H: u32 = 1;
    pub const INT8_MIN: i32 = -128;
    pub const INT16_MIN: i32 = -32768;
    pub const INT32_MIN: i32 = -2147483648;
    pub const INT8_MAX: u32 = 127;
    pub const INT16_MAX: u32 = 32767;
    pub const INT32_MAX: u32 = 2147483647;
    pub const UINT8_MAX: u32 = 255;
    pub const UINT16_MAX: u32 = 65535;
    pub const UINT32_MAX: u32 = 4294967295;
    pub const INT_LEAST8_MIN: i32 = -128;
    pub const INT_LEAST16_MIN: i32 = -32768;
    pub const INT_LEAST32_MIN: i32 = -2147483648;
    pub const INT_LEAST8_MAX: u32 = 127;
    pub const INT_LEAST16_MAX: u32 = 32767;
    pub const INT_LEAST32_MAX: u32 = 2147483647;
    pub const UINT_LEAST8_MAX: u32 = 255;
    pub const UINT_LEAST16_MAX: u32 = 65535;
    pub const UINT_LEAST32_MAX: u32 = 4294967295;
    pub const INT_FAST8_MIN: i32 = -128;
    pub const INT_FAST16_MIN: i64 = -9223372036854775808;
    pub const INT_FAST32_MIN: i64 = -9223372036854775808;
    pub const INT_FAST8_MAX: u32 = 127;
    pub const INT_FAST16_MAX: u64 = 9223372036854775807;
    pub const INT_FAST32_MAX: u64 = 9223372036854775807;
    pub const UINT_FAST8_MAX: u32 = 255;
    pub const UINT_FAST16_MAX: i32 = -1;
    pub const UINT_FAST32_MAX: i32 = -1;
    pub const INTPTR_MIN: i64 = -9223372036854775808;
    pub const INTPTR_MAX: u64 = 9223372036854775807;
    pub const UINTPTR_MAX: i32 = -1;
    pub const PTRDIFF_MIN: i64 = -9223372036854775808;
    pub const PTRDIFF_MAX: u64 = 9223372036854775807;
    pub const SIG_ATOMIC_MIN: i32 = -2147483648;
    pub const SIG_ATOMIC_MAX: u32 = 2147483647;
    pub const SIZE_MAX: i32 = -1;
    pub const WINT_MIN: u32 = 0;
    pub const WINT_MAX: u32 = 4294967295;
    pub const INT8_WIDTH: u32 = 8;
    pub const UINT8_WIDTH: u32 = 8;
    pub const INT16_WIDTH: u32 = 16;
    pub const UINT16_WIDTH: u32 = 16;
    pub const INT32_WIDTH: u32 = 32;
    pub const UINT32_WIDTH: u32 = 32;
    pub const INT64_WIDTH: u32 = 64;
    pub const UINT64_WIDTH: u32 = 64;
    pub const INT_LEAST8_WIDTH: u32 = 8;
    pub const UINT_LEAST8_WIDTH: u32 = 8;
    pub const INT_LEAST16_WIDTH: u32 = 16;
    pub const UINT_LEAST16_WIDTH: u32 = 16;
    pub const INT_LEAST32_WIDTH: u32 = 32;
    pub const UINT_LEAST32_WIDTH: u32 = 32;
    pub const INT_LEAST64_WIDTH: u32 = 64;
    pub const UINT_LEAST64_WIDTH: u32 = 64;
    pub const INT_FAST8_WIDTH: u32 = 8;
    pub const UINT_FAST8_WIDTH: u32 = 8;
    pub const INT_FAST16_WIDTH: u32 = 64;
    pub const UINT_FAST16_WIDTH: u32 = 64;
    pub const INT_FAST32_WIDTH: u32 = 64;
    pub const UINT_FAST32_WIDTH: u32 = 64;
    pub const INT_FAST64_WIDTH: u32 = 64;
    pub const UINT_FAST64_WIDTH: u32 = 64;
    pub const INTPTR_WIDTH: u32 = 64;
    pub const UINTPTR_WIDTH: u32 = 64;
    pub const INTMAX_WIDTH: u32 = 64;
    pub const UINTMAX_WIDTH: u32 = 64;
    pub const PTRDIFF_WIDTH: u32 = 64;
    pub const SIG_ATOMIC_WIDTH: u32 = 32;
    pub const SIZE_WIDTH: u32 = 64;
    pub const WCHAR_WIDTH: u32 = 32;
    pub const WINT_WIDTH: u32 = 32;
    pub const _LOCALE_FWD_H: u32 = 1;
    pub const _GLIBCXX_CXX_LOCALE_H: u32 = 1;
    pub const _LOCALE_H: u32 = 1;
    pub const _BITS_LOCALE_H: u32 = 1;
    pub const __LC_CTYPE: u32 = 0;
    pub const __LC_NUMERIC: u32 = 1;
    pub const __LC_TIME: u32 = 2;
    pub const __LC_COLLATE: u32 = 3;
    pub const __LC_MONETARY: u32 = 4;
    pub const __LC_MESSAGES: u32 = 5;
    pub const __LC_ALL: u32 = 6;
    pub const __LC_PAPER: u32 = 7;
    pub const __LC_NAME: u32 = 8;
    pub const __LC_ADDRESS: u32 = 9;
    pub const __LC_TELEPHONE: u32 = 10;
    pub const __LC_MEASUREMENT: u32 = 11;
    pub const __LC_IDENTIFICATION: u32 = 12;
    pub const LC_CTYPE: u32 = 0;
    pub const LC_NUMERIC: u32 = 1;
    pub const LC_TIME: u32 = 2;
    pub const LC_COLLATE: u32 = 3;
    pub const LC_MONETARY: u32 = 4;
    pub const LC_MESSAGES: u32 = 5;
    pub const LC_ALL: u32 = 6;
    pub const LC_PAPER: u32 = 7;
    pub const LC_NAME: u32 = 8;
    pub const LC_ADDRESS: u32 = 9;
    pub const LC_TELEPHONE: u32 = 10;
    pub const LC_MEASUREMENT: u32 = 11;
    pub const LC_IDENTIFICATION: u32 = 12;
    pub const LC_CTYPE_MASK: u32 = 1;
    pub const LC_NUMERIC_MASK: u32 = 2;
    pub const LC_TIME_MASK: u32 = 4;
    pub const LC_COLLATE_MASK: u32 = 8;
    pub const LC_MONETARY_MASK: u32 = 16;
    pub const LC_MESSAGES_MASK: u32 = 32;
    pub const LC_PAPER_MASK: u32 = 128;
    pub const LC_NAME_MASK: u32 = 256;
    pub const LC_ADDRESS_MASK: u32 = 512;
    pub const LC_TELEPHONE_MASK: u32 = 1024;
    pub const LC_MEASUREMENT_MASK: u32 = 2048;
    pub const LC_IDENTIFICATION_MASK: u32 = 4096;
    pub const LC_ALL_MASK: u32 = 8127;
    pub const _GLIBCXX_CLOCALE: u32 = 1;
    pub const _GLIBCXX_C_LOCALE_GNU: u32 = 1;
    pub const _GLIBCXX_NUM_CATEGORIES: u32 = 6;
    pub const _GLIBCXX_IOSFWD: u32 = 1;
    pub const _CTYPE_H: u32 = 1;
    pub const _ENDIAN_H: u32 = 1;
    pub const __LITTLE_ENDIAN: u32 = 1234;
    pub const __BIG_ENDIAN: u32 = 4321;
    pub const __PDP_ENDIAN: u32 = 3412;
    pub const __BYTE_ORDER: u32 = 1234;
    pub const __FLOAT_WORD_ORDER: u32 = 1234;
    pub const LITTLE_ENDIAN: u32 = 1234;
    pub const BIG_ENDIAN: u32 = 4321;
    pub const PDP_ENDIAN: u32 = 3412;
    pub const BYTE_ORDER: u32 = 1234;
    pub const _BITS_BYTESWAP_H: u32 = 1;
    pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
    pub const _GLIBCXX_CCTYPE: u32 = 1;
    pub const _OSTREAM_INSERT_H: u32 = 1;
    pub const _CXXABI_FORCED_H: u32 = 1;
    pub const _GLIBCXX_RANGE_ACCESS_H: u32 = 1;
    pub const _BASIC_STRING_H: u32 = 1;
    pub const _GLIBCXX_ATOMICITY_H: u32 = 1;
    pub const _GLIBCXX_GTHREAD_USE_WEAK: u32 = 1;
    pub const __GTHREADS: u32 = 1;
    pub const __GTHREADS_CXX0X: u32 = 1;
    pub const _PTHREAD_H: u32 = 1;
    pub const _SCHED_H: u32 = 1;
    pub const __time_t_defined: u32 = 1;
    pub const __timespec_defined: u32 = 1;
    pub const _BITS_SCHED_H: u32 = 1;
    pub const SCHED_OTHER: u32 = 0;
    pub const SCHED_FIFO: u32 = 1;
    pub const SCHED_RR: u32 = 2;
    pub const SCHED_BATCH: u32 = 3;
    pub const SCHED_ISO: u32 = 4;
    pub const SCHED_IDLE: u32 = 5;
    pub const SCHED_DEADLINE: u32 = 6;
    pub const SCHED_RESET_ON_FORK: u32 = 1073741824;
    pub const CSIGNAL: u32 = 255;
    pub const CLONE_VM: u32 = 256;
    pub const CLONE_FS: u32 = 512;
    pub const CLONE_FILES: u32 = 1024;
    pub const CLONE_SIGHAND: u32 = 2048;
    pub const CLONE_PTRACE: u32 = 8192;
    pub const CLONE_VFORK: u32 = 16384;
    pub const CLONE_PARENT: u32 = 32768;
    pub const CLONE_THREAD: u32 = 65536;
    pub const CLONE_NEWNS: u32 = 131072;
    pub const CLONE_SYSVSEM: u32 = 262144;
    pub const CLONE_SETTLS: u32 = 524288;
    pub const CLONE_PARENT_SETTID: u32 = 1048576;
    pub const CLONE_CHILD_CLEARTID: u32 = 2097152;
    pub const CLONE_DETACHED: u32 = 4194304;
    pub const CLONE_UNTRACED: u32 = 8388608;
    pub const CLONE_CHILD_SETTID: u32 = 16777216;
    pub const CLONE_NEWCGROUP: u32 = 33554432;
    pub const CLONE_NEWUTS: u32 = 67108864;
    pub const CLONE_NEWIPC: u32 = 134217728;
    pub const CLONE_NEWUSER: u32 = 268435456;
    pub const CLONE_NEWPID: u32 = 536870912;
    pub const CLONE_NEWNET: u32 = 1073741824;
    pub const CLONE_IO: u32 = 2147483648;
    pub const _BITS_CPU_SET_H: u32 = 1;
    pub const __CPU_SETSIZE: u32 = 1024;
    pub const CPU_SETSIZE: u32 = 1024;
    pub const _TIME_H: u32 = 1;
    pub const _BITS_TIME_H: u32 = 1;
    pub const CLOCK_REALTIME: u32 = 0;
    pub const CLOCK_MONOTONIC: u32 = 1;
    pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
    pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
    pub const CLOCK_MONOTONIC_RAW: u32 = 4;
    pub const CLOCK_REALTIME_COARSE: u32 = 5;
    pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
    pub const CLOCK_BOOTTIME: u32 = 7;
    pub const CLOCK_REALTIME_ALARM: u32 = 8;
    pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
    pub const CLOCK_TAI: u32 = 11;
    pub const TIMER_ABSTIME: u32 = 1;
    pub const _BITS_TIMEX_H: u32 = 1;
    pub const __timeval_defined: u32 = 1;
    pub const ADJ_OFFSET: u32 = 1;
    pub const ADJ_FREQUENCY: u32 = 2;
    pub const ADJ_MAXERROR: u32 = 4;
    pub const ADJ_ESTERROR: u32 = 8;
    pub const ADJ_STATUS: u32 = 16;
    pub const ADJ_TIMECONST: u32 = 32;
    pub const ADJ_TAI: u32 = 128;
    pub const ADJ_SETOFFSET: u32 = 256;
    pub const ADJ_MICRO: u32 = 4096;
    pub const ADJ_NANO: u32 = 8192;
    pub const ADJ_TICK: u32 = 16384;
    pub const ADJ_OFFSET_SINGLESHOT: u32 = 32769;
    pub const ADJ_OFFSET_SS_READ: u32 = 40961;
    pub const MOD_OFFSET: u32 = 1;
    pub const MOD_FREQUENCY: u32 = 2;
    pub const MOD_MAXERROR: u32 = 4;
    pub const MOD_ESTERROR: u32 = 8;
    pub const MOD_STATUS: u32 = 16;
    pub const MOD_TIMECONST: u32 = 32;
    pub const MOD_CLKB: u32 = 16384;
    pub const MOD_CLKA: u32 = 32769;
    pub const MOD_TAI: u32 = 128;
    pub const MOD_MICRO: u32 = 4096;
    pub const MOD_NANO: u32 = 8192;
    pub const STA_PLL: u32 = 1;
    pub const STA_PPSFREQ: u32 = 2;
    pub const STA_PPSTIME: u32 = 4;
    pub const STA_FLL: u32 = 8;
    pub const STA_INS: u32 = 16;
    pub const STA_DEL: u32 = 32;
    pub const STA_UNSYNC: u32 = 64;
    pub const STA_FREQHOLD: u32 = 128;
    pub const STA_PPSSIGNAL: u32 = 256;
    pub const STA_PPSJITTER: u32 = 512;
    pub const STA_PPSWANDER: u32 = 1024;
    pub const STA_PPSERROR: u32 = 2048;
    pub const STA_CLOCKERR: u32 = 4096;
    pub const STA_NANO: u32 = 8192;
    pub const STA_MODE: u32 = 16384;
    pub const STA_CLK: u32 = 32768;
    pub const STA_RONLY: u32 = 65280;
    pub const __clock_t_defined: u32 = 1;
    pub const __struct_tm_defined: u32 = 1;
    pub const __clockid_t_defined: u32 = 1;
    pub const __timer_t_defined: u32 = 1;
    pub const __itimerspec_defined: u32 = 1;
    pub const TIME_UTC: u32 = 1;
    pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
    pub const _THREAD_SHARED_TYPES_H: u32 = 1;
    pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
    pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
    pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
    pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
    pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
    pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
    pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
    pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
    pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
    pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
    pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
    pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
    pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
    pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
    pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
    pub const __have_pthread_attr_t: u32 = 1;
    pub const _BITS_SETJMP_H: u32 = 1;
    pub const PTHREAD_ONCE_INIT: u32 = 0;
    pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
    pub const __GTHREAD_HAS_COND: u32 = 1;
    pub const __GTHREAD_ONCE_INIT: u32 = 0;
    pub const _GLIBCXX_ATOMIC_WORD_H: u32 = 1;
    pub const _STRING_CONVERSIONS_H: u32 = 1;
    pub const _GLIBCXX_CSTDLIB: u32 = 1;
    pub const _STDLIB_H: u32 = 1;
    pub const WNOHANG: u32 = 1;
    pub const WUNTRACED: u32 = 2;
    pub const WSTOPPED: u32 = 2;
    pub const WEXITED: u32 = 4;
    pub const WCONTINUED: u32 = 8;
    pub const WNOWAIT: u32 = 16777216;
    pub const __WNOTHREAD: u32 = 536870912;
    pub const __WALL: u32 = 1073741824;
    pub const __WCLONE: u32 = 2147483648;
    pub const __ENUM_IDTYPE_T: u32 = 1;
    pub const __W_CONTINUED: u32 = 65535;
    pub const __WCOREFLAG: u32 = 128;
    pub const __ldiv_t_defined: u32 = 1;
    pub const __lldiv_t_defined: u32 = 1;
    pub const RAND_MAX: u32 = 2147483647;
    pub const EXIT_FAILURE: u32 = 1;
    pub const EXIT_SUCCESS: u32 = 0;
    pub const _SYS_TYPES_H: u32 = 1;
    pub const __BIT_TYPES_DEFINED__: u32 = 1;
    pub const _SYS_SELECT_H: u32 = 1;
    pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
    pub const __sigset_t_defined: u32 = 1;
    pub const FD_SETSIZE: u32 = 1024;
    pub const _SYS_SYSMACROS_H: u32 = 1;
    pub const _BITS_SYSMACROS_H: u32 = 1;
    pub const _ALLOCA_H: u32 = 1;
    pub const _STDIO_H: u32 = 1;
    pub const _BITS_LIBIO_H: u32 = 1;
    pub const _BITS_G_CONFIG_H: u32 = 1;
    pub const _G_HAVE_MMAP: u32 = 1;
    pub const _G_HAVE_MREMAP: u32 = 1;
    pub const _G_IO_IO_FILE_VERSION: u32 = 131073;
    pub const _G_BUFSIZ: u32 = 8192;
    pub const _IO_BUFSIZ: u32 = 8192;
    pub const _IO_UNIFIED_JUMPTABLES: u32 = 1;
    pub const EOF: i32 = -1;
    pub const _IOS_INPUT: u32 = 1;
    pub const _IOS_OUTPUT: u32 = 2;
    pub const _IOS_ATEND: u32 = 4;
    pub const _IOS_APPEND: u32 = 8;
    pub const _IOS_TRUNC: u32 = 16;
    pub const _IOS_NOCREATE: u32 = 32;
    pub const _IOS_NOREPLACE: u32 = 64;
    pub const _IOS_BIN: u32 = 128;
    pub const _IO_MAGIC: u32 = 4222418944;
    pub const _OLD_STDIO_MAGIC: u32 = 4206624768;
    pub const _IO_MAGIC_MASK: u32 = 4294901760;
    pub const _IO_USER_BUF: u32 = 1;
    pub const _IO_UNBUFFERED: u32 = 2;
    pub const _IO_NO_READS: u32 = 4;
    pub const _IO_NO_WRITES: u32 = 8;
    pub const _IO_EOF_SEEN: u32 = 16;
    pub const _IO_ERR_SEEN: u32 = 32;
    pub const _IO_DELETE_DONT_CLOSE: u32 = 64;
    pub const _IO_LINKED: u32 = 128;
    pub const _IO_IN_BACKUP: u32 = 256;
    pub const _IO_LINE_BUF: u32 = 512;
    pub const _IO_TIED_PUT_GET: u32 = 1024;
    pub const _IO_CURRENTLY_PUTTING: u32 = 2048;
    pub const _IO_IS_APPENDING: u32 = 4096;
    pub const _IO_IS_FILEBUF: u32 = 8192;
    pub const _IO_BAD_SEEN: u32 = 16384;
    pub const _IO_USER_LOCK: u32 = 32768;
    pub const _IO_FLAGS2_MMAP: u32 = 1;
    pub const _IO_FLAGS2_NOTCANCEL: u32 = 2;
    pub const _IO_FLAGS2_USER_WBUF: u32 = 8;
    pub const _IO_SKIPWS: u32 = 1;
    pub const _IO_LEFT: u32 = 2;
    pub const _IO_RIGHT: u32 = 4;
    pub const _IO_INTERNAL: u32 = 8;
    pub const _IO_DEC: u32 = 16;
    pub const _IO_OCT: u32 = 32;
    pub const _IO_HEX: u32 = 64;
    pub const _IO_SHOWBASE: u32 = 128;
    pub const _IO_SHOWPOINT: u32 = 256;
    pub const _IO_UPPERCASE: u32 = 512;
    pub const _IO_SHOWPOS: u32 = 1024;
    pub const _IO_SCIENTIFIC: u32 = 2048;
    pub const _IO_FIXED: u32 = 4096;
    pub const _IO_UNITBUF: u32 = 8192;
    pub const _IO_STDIO: u32 = 16384;
    pub const _IO_DONT_CLOSE: u32 = 32768;
    pub const _IO_BOOLALPHA: u32 = 65536;
    pub const _IOFBF: u32 = 0;
    pub const _IOLBF: u32 = 1;
    pub const _IONBF: u32 = 2;
    pub const BUFSIZ: u32 = 8192;
    pub const SEEK_SET: u32 = 0;
    pub const SEEK_CUR: u32 = 1;
    pub const SEEK_END: u32 = 2;
    pub const SEEK_DATA: u32 = 3;
    pub const SEEK_HOLE: u32 = 4;
    pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
    pub const _BITS_STDIO_LIM_H: u32 = 1;
    pub const L_tmpnam: u32 = 20;
    pub const TMP_MAX: u32 = 238328;
    pub const FILENAME_MAX: u32 = 4096;
    pub const L_ctermid: u32 = 9;
    pub const L_cuserid: u32 = 9;
    pub const FOPEN_MAX: u32 = 16;
    pub const _GLIBCXX_CSTDIO: u32 = 1;
    pub const _ERRNO_H: u32 = 1;
    pub const _BITS_ERRNO_H: u32 = 1;
    pub const EPERM: u32 = 1;
    pub const ENOENT: u32 = 2;
    pub const ESRCH: u32 = 3;
    pub const EINTR: u32 = 4;
    pub const EIO: u32 = 5;
    pub const ENXIO: u32 = 6;
    pub const E2BIG: u32 = 7;
    pub const ENOEXEC: u32 = 8;
    pub const EBADF: u32 = 9;
    pub const ECHILD: u32 = 10;
    pub const EAGAIN: u32 = 11;
    pub const ENOMEM: u32 = 12;
    pub const EACCES: u32 = 13;
    pub const EFAULT: u32 = 14;
    pub const ENOTBLK: u32 = 15;
    pub const EBUSY: u32 = 16;
    pub const EEXIST: u32 = 17;
    pub const EXDEV: u32 = 18;
    pub const ENODEV: u32 = 19;
    pub const ENOTDIR: u32 = 20;
    pub const EISDIR: u32 = 21;
    pub const EINVAL: u32 = 22;
    pub const ENFILE: u32 = 23;
    pub const EMFILE: u32 = 24;
    pub const ENOTTY: u32 = 25;
    pub const ETXTBSY: u32 = 26;
    pub const EFBIG: u32 = 27;
    pub const ENOSPC: u32 = 28;
    pub const ESPIPE: u32 = 29;
    pub const EROFS: u32 = 30;
    pub const EMLINK: u32 = 31;
    pub const EPIPE: u32 = 32;
    pub const EDOM: u32 = 33;
    pub const ERANGE: u32 = 34;
    pub const EDEADLK: u32 = 35;
    pub const ENAMETOOLONG: u32 = 36;
    pub const ENOLCK: u32 = 37;
    pub const ENOSYS: u32 = 38;
    pub const ENOTEMPTY: u32 = 39;
    pub const ELOOP: u32 = 40;
    pub const EWOULDBLOCK: u32 = 11;
    pub const ENOMSG: u32 = 42;
    pub const EIDRM: u32 = 43;
    pub const ECHRNG: u32 = 44;
    pub const EL2NSYNC: u32 = 45;
    pub const EL3HLT: u32 = 46;
    pub const EL3RST: u32 = 47;
    pub const ELNRNG: u32 = 48;
    pub const EUNATCH: u32 = 49;
    pub const ENOCSI: u32 = 50;
    pub const EL2HLT: u32 = 51;
    pub const EBADE: u32 = 52;
    pub const EBADR: u32 = 53;
    pub const EXFULL: u32 = 54;
    pub const ENOANO: u32 = 55;
    pub const EBADRQC: u32 = 56;
    pub const EBADSLT: u32 = 57;
    pub const EDEADLOCK: u32 = 35;
    pub const EBFONT: u32 = 59;
    pub const ENOSTR: u32 = 60;
    pub const ENODATA: u32 = 61;
    pub const ETIME: u32 = 62;
    pub const ENOSR: u32 = 63;
    pub const ENONET: u32 = 64;
    pub const ENOPKG: u32 = 65;
    pub const EREMOTE: u32 = 66;
    pub const ENOLINK: u32 = 67;
    pub const EADV: u32 = 68;
    pub const ESRMNT: u32 = 69;
    pub const ECOMM: u32 = 70;
    pub const EPROTO: u32 = 71;
    pub const EMULTIHOP: u32 = 72;
    pub const EDOTDOT: u32 = 73;
    pub const EBADMSG: u32 = 74;
    pub const EOVERFLOW: u32 = 75;
    pub const ENOTUNIQ: u32 = 76;
    pub const EBADFD: u32 = 77;
    pub const EREMCHG: u32 = 78;
    pub const ELIBACC: u32 = 79;
    pub const ELIBBAD: u32 = 80;
    pub const ELIBSCN: u32 = 81;
    pub const ELIBMAX: u32 = 82;
    pub const ELIBEXEC: u32 = 83;
    pub const EILSEQ: u32 = 84;
    pub const ERESTART: u32 = 85;
    pub const ESTRPIPE: u32 = 86;
    pub const EUSERS: u32 = 87;
    pub const ENOTSOCK: u32 = 88;
    pub const EDESTADDRREQ: u32 = 89;
    pub const EMSGSIZE: u32 = 90;
    pub const EPROTOTYPE: u32 = 91;
    pub const ENOPROTOOPT: u32 = 92;
    pub const EPROTONOSUPPORT: u32 = 93;
    pub const ESOCKTNOSUPPORT: u32 = 94;
    pub const EOPNOTSUPP: u32 = 95;
    pub const EPFNOSUPPORT: u32 = 96;
    pub const EAFNOSUPPORT: u32 = 97;
    pub const EADDRINUSE: u32 = 98;
    pub const EADDRNOTAVAIL: u32 = 99;
    pub const ENETDOWN: u32 = 100;
    pub const ENETUNREACH: u32 = 101;
    pub const ENETRESET: u32 = 102;
    pub const ECONNABORTED: u32 = 103;
    pub const ECONNRESET: u32 = 104;
    pub const ENOBUFS: u32 = 105;
    pub const EISCONN: u32 = 106;
    pub const ENOTCONN: u32 = 107;
    pub const ESHUTDOWN: u32 = 108;
    pub const ETOOMANYREFS: u32 = 109;
    pub const ETIMEDOUT: u32 = 110;
    pub const ECONNREFUSED: u32 = 111;
    pub const EHOSTDOWN: u32 = 112;
    pub const EHOSTUNREACH: u32 = 113;
    pub const EALREADY: u32 = 114;
    pub const EINPROGRESS: u32 = 115;
    pub const ESTALE: u32 = 116;
    pub const EUCLEAN: u32 = 117;
    pub const ENOTNAM: u32 = 118;
    pub const ENAVAIL: u32 = 119;
    pub const EISNAM: u32 = 120;
    pub const EREMOTEIO: u32 = 121;
    pub const EDQUOT: u32 = 122;
    pub const ENOMEDIUM: u32 = 123;
    pub const EMEDIUMTYPE: u32 = 124;
    pub const ECANCELED: u32 = 125;
    pub const ENOKEY: u32 = 126;
    pub const EKEYEXPIRED: u32 = 127;
    pub const EKEYREVOKED: u32 = 128;
    pub const EKEYREJECTED: u32 = 129;
    pub const EOWNERDEAD: u32 = 130;
    pub const ENOTRECOVERABLE: u32 = 131;
    pub const ERFKILL: u32 = 132;
    pub const EHWPOISON: u32 = 133;
    pub const ENOTSUP: u32 = 95;
    pub const __error_t_defined: u32 = 1;
    pub const _GLIBCXX_CERRNO: u32 = 1;
    pub const _FUNCTIONAL_HASH_H: u32 = 1;
    pub const __cpp_lib_string_udls: u32 = 201304;
    pub const _BASIC_STRING_TCC: u32 = 1;
    pub const _USES_ALLOCATOR_H: u32 = 1;
    pub const _GLIBCXX_INVOKE_H: u32 = 1;
    pub const _STL_MULTIMAP_H: u32 = 1;
    pub const _GLIBCXX_MEMORY: u32 = 1;
    pub const _STL_CONSTRUCT_H: u32 = 1;
    pub const _STL_UNINITIALIZED_H: u32 = 1;
    pub const _STL_TEMPBUF_H: u32 = 1;
    pub const _STL_RAW_STORAGE_ITERATOR_H: u32 = 1;
    pub const _CONCURRENCE_H: u32 = 1;
    pub const _UNIQUE_PTR_H: u32 = 1;
    pub const __cpp_lib_make_unique: u32 = 201304;
    pub const _SHARED_PTR_H: u32 = 1;
    pub const _SHARED_PTR_BASE_H: u32 = 1;
    pub const _ALLOCATED_PTR_H: u32 = 1;
    pub const _GLIBCXX_REFWRAP_H: u32 = 1;
    pub const __cpp_lib_shared_ptr_arrays: u32 = 201603;
    pub const _SHARED_PTR_ATOMIC_H: u32 = 1;
    pub const _GLIBCXX_ATOMIC_BASE_H: u32 = 1;
    pub const _GLIBCXX_ATOMIC_LOCK_FREE_H: u32 = 1;
    pub const _BACKWARD_AUTO_PTR_H: u32 = 1;
    pub const _GLIBCXX_VECTOR: u32 = 1;
    pub const _STL_VECTOR_H: u32 = 1;
    pub const _STL_BVECTOR_H: u32 = 1;
    pub const _VECTOR_TCC: u32 = 1;
    pub const _GLIBCXX_IOSTREAM: u32 = 1;
    pub const _GLIBCXX_OSTREAM: u32 = 1;
    pub const _GLIBCXX_IOS: u32 = 1;
    pub const _IOS_BASE_H: u32 = 1;
    pub const _LOCALE_CLASSES_H: u32 = 1;
    pub const _LOCALE_CLASSES_TCC: u32 = 1;
    pub const _GLIBCXX_SYSTEM_ERROR: u32 = 1;
    pub const _GLIBCXX_ERROR_CONSTANTS: u32 = 1;
    pub const _GLIBXX_STREAMBUF: u32 = 1;
    pub const _STREAMBUF_TCC: u32 = 1;
    pub const _BASIC_IOS_H: u32 = 1;
    pub const _LOCALE_FACETS_H: u32 = 1;
    pub const _WCTYPE_H: u32 = 1;
    pub const _BITS_WCTYPE_WCHAR_H: u32 = 1;
    pub const _GLIBCXX_CWCTYPE: u32 = 1;
    pub const _STREAMBUF_ITERATOR_H: u32 = 1;
    pub const _GLIBCXX_NUM_FACETS: u32 = 28;
    pub const _GLIBCXX_NUM_CXX11_FACETS: u32 = 16;
    pub const _GLIBCXX_NUM_UNICODE_FACETS: u32 = 2;
    pub const _LOCALE_FACETS_TCC: u32 = 1;
    pub const _BASIC_IOS_TCC: u32 = 1;
    pub const _OSTREAM_TCC: u32 = 1;
    pub const _GLIBCXX_ISTREAM: u32 = 1;
    pub const _ISTREAM_TCC: u32 = 1;
    pub const _GLIBCXX_SSTREAM: u32 = 1;
    pub const _SSTREAM_TCC: u32 = 1;
    pub const _GLIBCXX_FUNCTIONAL: u32 = 1;
    pub const _GLIBCXX_STD_FUNCTION_H: u32 = 1;
    pub const _GLIBCXX_STACK: u32 = 1;
    pub const _GLIBCXX_DEQUE: u32 = 1;
    pub const _STL_DEQUE_H: u32 = 1;
    pub const _GLIBCXX_DEQUE_BUF_SIZE: u32 = 512;
    pub const _DEQUE_TCC: u32 = 1;
    pub const _STL_STACK_H: u32 = 1;
    pub const RESET_PC: u32 = 512;
    pub const MMIO_START: u32 = 65024;
    pub const SYSTEM_END: u32 = 12287;
    pub const INTEX_TABLE_START: u32 = 256;
    pub const KBSR: u32 = 65024;
    pub const KBDR: u32 = 65026;
    pub const DSR: u32 = 65028;
    pub const DDR: u32 = 65030;
    pub const BSP: u32 = 65530;
    pub const PSR: u32 = 65532;
    pub const MCR: u32 = 65534;
    pub const _GLIBCXX_FSTREAM: u32 = 1;
    pub const _CODECVT_H: u32 = 1;
    pub const _GLIBCXX_BASIC_FILE_STDIO_H: u32 = 1;
    pub const _GLIBCXX_CXX_IO_H: u32 = 1;
    pub const _FSTREAM_TCC: u32 = 1;
    pub const DEFAULT_PRINT_LEVEL: u32 = 4;
    pub const _GLIBCXX_ATOMIC: u32 = 1;
    pub const GLOBAL_RES_PATH: &'static [u8; 10usize] = b"@ResPath@\0";
    pub const GLOBAL_TEST_PATH: &'static [u8; 11usize] = b"@TestPath@\0";
    pub mod lc3 {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub mod utils {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            pub struct IInputter__bindgen_vtable(::std::os::raw::c_void);
            #[repr(C)]
            #[derive(Debug)]
            pub struct IInputter {
                pub vtable_: *const IInputter__bindgen_vtable,
            }
            #[test]
            fn bindgen_test_layout_IInputter() {
                assert_eq!(
                    ::std::mem::size_of::<IInputter>(),
                    8usize,
                    concat!("Size of: ", stringify!(IInputter))
                );
                assert_eq!(
                    ::std::mem::align_of::<IInputter>(),
                    8usize,
                    concat!("Alignment of ", stringify!(IInputter))
                );
            }
            impl Default for IInputter {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug)]
            pub struct NullInputter {
                pub _base: root::lc3::utils::IInputter,
            }
            #[test]
            fn bindgen_test_layout_NullInputter() {
                assert_eq!(
                    ::std::mem::size_of::<NullInputter>(),
                    8usize,
                    concat!("Size of: ", stringify!(NullInputter))
                );
                assert_eq!(
                    ::std::mem::align_of::<NullInputter>(),
                    8usize,
                    concat!("Alignment of ", stringify!(NullInputter))
                );
            }
            impl Default for NullInputter {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            pub const PrintColor_RED: root::lc3::utils::PrintColor = 0;
            pub const PrintColor_YELLOW: root::lc3::utils::PrintColor = 1;
            pub const PrintColor_GREEN: root::lc3::utils::PrintColor = 2;
            pub const PrintColor_MAGENTA: root::lc3::utils::PrintColor = 3;
            pub const PrintColor_BLUE: root::lc3::utils::PrintColor = 4;
            pub const PrintColor_GRAY: root::lc3::utils::PrintColor = 5;
            pub const PrintColor_BOLD: root::lc3::utils::PrintColor = 6;
            pub const PrintColor_RESET: root::lc3::utils::PrintColor = 7;
            pub type PrintColor = i32;
            pub const PrintType_P_NONE: root::lc3::utils::PrintType = 0;
            pub const PrintType_P_SIM_OUTPUT: root::lc3::utils::PrintType = 1;
            pub const PrintType_P_FATAL_ERROR: root::lc3::utils::PrintType = 2;
            pub const PrintType_P_ERROR: root::lc3::utils::PrintType = 3;
            pub const PrintType_P_WARNING: root::lc3::utils::PrintType = 4;
            pub const PrintType_P_NOTE: root::lc3::utils::PrintType = 5;
            pub const PrintType_P_INFO: root::lc3::utils::PrintType = 6;
            pub const PrintType_P_DEBUG: root::lc3::utils::PrintType = 7;
            pub const PrintType_P_EXTRA: root::lc3::utils::PrintType = 8;
            pub const PrintType_P_SPAM: root::lc3::utils::PrintType = 9;
            pub type PrintType = i32;
            #[repr(C)]
            pub struct IPrinter__bindgen_vtable(::std::os::raw::c_void);
            #[repr(C)]
            #[derive(Debug)]
            pub struct IPrinter {
                pub vtable_: *const IPrinter__bindgen_vtable,
            }
            #[test]
            fn bindgen_test_layout_IPrinter() {
                assert_eq!(
                    ::std::mem::size_of::<IPrinter>(),
                    8usize,
                    concat!("Size of: ", stringify!(IPrinter))
                );
                assert_eq!(
                    ::std::mem::align_of::<IPrinter>(),
                    8usize,
                    concat!("Alignment of ", stringify!(IPrinter))
                );
            }
            impl Default for IPrinter {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc35utils14getMagicHeaderB5cxx11Ev"]
                pub fn getMagicHeader() -> root::std::string;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc35utils16getVersionStringB5cxx11Ev"]
                pub fn getVersionString() -> root::std::string;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc35utils9udecToBinB5cxx11Ejj"]
                pub fn udecToBin(
                    value: u32,
                    num_bits: u32,
                ) -> root::std::string;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc35utils8sextTo32Ejj"]
                pub fn sextTo32(value: u32, num_bits: u32) -> u32;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc35utils6getBitEjj"]
                pub fn getBit(value: u32, pos: u32) -> u32;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc35utils7getBitsEjjj"]
                pub fn getBits(value: u32, end: u32, start: u32) -> u32;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc35utils12computePSRCCEjj"]
                pub fn computePSRCC(value: u32, psr: u32) -> u32;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc35utils22computeBasePlusSOffsetEjjj"]
                pub fn computeBasePlusSOffset(
                    base: u32,
                    signed_off: u32,
                    width: u32,
                ) -> u32;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc35utils7toLowerERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
                pub fn toLower(
                    str: *const root::std::string,
                ) -> root::std::string;
            }
            #[repr(C)]
            pub struct exception {
                pub _base: root::std::runtime_error,
            }
            #[test]
            fn bindgen_test_layout_exception() {
                assert_eq!(
                    ::std::mem::size_of::<exception>(),
                    16usize,
                    concat!("Size of: ", stringify!(exception))
                );
                assert_eq!(
                    ::std::mem::align_of::<exception>(),
                    8usize,
                    concat!("Alignment of ", stringify!(exception))
                );
            }
            impl Default for exception {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            pub struct fatal_exception {
                pub _base: root::std::runtime_error,
            }
            #[test]
            fn bindgen_test_layout_fatal_exception() {
                assert_eq!(
                    ::std::mem::size_of::<fatal_exception>(),
                    16usize,
                    concat!("Size of: ", stringify!(fatal_exception))
                );
                assert_eq!(
                    ::std::mem::align_of::<fatal_exception>(),
                    8usize,
                    concat!("Alignment of ", stringify!(fatal_exception))
                );
            }
            impl Default for fatal_exception {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct Logger {
                pub printer: *mut root::lc3::utils::IPrinter,
                pub print_level: u32,
            }
            #[test]
            fn bindgen_test_layout_Logger() {
                assert_eq!(
                    ::std::mem::size_of::<Logger>(),
                    16usize,
                    concat!("Size of: ", stringify!(Logger))
                );
                assert_eq!(
                    ::std::mem::align_of::<Logger>(),
                    8usize,
                    concat!("Alignment of ", stringify!(Logger))
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<Logger>())).printer as *const _
                            as usize
                    },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(Logger),
                        "::",
                        stringify!(printer)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<Logger>())).print_level
                            as *const _ as usize
                    },
                    8usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(Logger),
                        "::",
                        stringify!(print_level)
                    )
                );
            }
            impl Default for Logger {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            pub struct AssemblerLogger {
                pub _base: root::lc3::utils::Logger,
                pub filename: root::std::string,
            }
            #[test]
            fn bindgen_test_layout_AssemblerLogger() {
                assert_eq!(
                    ::std::mem::size_of::<AssemblerLogger>(),
                    48usize,
                    concat!("Size of: ", stringify!(AssemblerLogger))
                );
                assert_eq!(
                    ::std::mem::align_of::<AssemblerLogger>(),
                    8usize,
                    concat!("Alignment of ", stringify!(AssemblerLogger))
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<AssemblerLogger>())).filename
                            as *const _ as usize
                    },
                    16usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(AssemblerLogger),
                        "::",
                        stringify!(filename)
                    )
                );
            }
            impl Default for AssemblerLogger {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
        }
        pub mod core {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            pub type PIOperand = root::std::shared_ptr;
            pub type PIInstruction = root::std::shared_ptr;
            pub type PIEvent = root::std::shared_ptr;
            pub type SymbolTable = root::std::map;
            pub mod asmbl {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                #[repr(C)]
                pub struct Token {
                    pub type_: root::lc3::core::asmbl::Token_Type,
                    pub str: root::std::string,
                    pub num: i32,
                    pub row: u32,
                    pub col: u32,
                    pub len: u32,
                    pub line: root::std::string,
                }
                pub const Token_Type_NUM: root::lc3::core::asmbl::Token_Type =
                    0;
                pub const Token_Type_STRING:
                    root::lc3::core::asmbl::Token_Type = 1;
                pub const Token_Type_EOL: root::lc3::core::asmbl::Token_Type =
                    2;
                pub const Token_Type_INVALID:
                    root::lc3::core::asmbl::Token_Type = 3;
                pub type Token_Type = i32;
                #[test]
                fn bindgen_test_layout_Token() {
                    assert_eq!(
                        ::std::mem::size_of::<Token>(),
                        88usize,
                        concat!("Size of: ", stringify!(Token))
                    );
                    assert_eq!(
                        ::std::mem::align_of::<Token>(),
                        8usize,
                        concat!("Alignment of ", stringify!(Token))
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<Token>())).type_ as *const _
                                as usize
                        },
                        0usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(Token),
                            "::",
                            stringify!(type_)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<Token>())).str as *const _
                                as usize
                        },
                        8usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(Token),
                            "::",
                            stringify!(str)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<Token>())).num as *const _
                                as usize
                        },
                        40usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(Token),
                            "::",
                            stringify!(num)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<Token>())).row as *const _
                                as usize
                        },
                        44usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(Token),
                            "::",
                            stringify!(row)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<Token>())).col as *const _
                                as usize
                        },
                        48usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(Token),
                            "::",
                            stringify!(col)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<Token>())).len as *const _
                                as usize
                        },
                        52usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(Token),
                            "::",
                            stringify!(len)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<Token>())).line as *const _
                                as usize
                        },
                        56usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(Token),
                            "::",
                            stringify!(line)
                        )
                    );
                }
                impl Default for Token {
                    fn default() -> Self {
                        unsafe { ::std::mem::zeroed() }
                    }
                }
                #[repr(C)]
                pub struct StatementPiece {
                    pub type_: root::lc3::core::asmbl::StatementPiece_Type,
                    pub str: root::std::string,
                    pub num: u32,
                    pub col: u32,
                    pub len: u32,
                }
                pub const StatementPiece_Type_INST:
                    root::lc3::core::asmbl::StatementPiece_Type = 0;
                pub const StatementPiece_Type_PSEUDO:
                    root::lc3::core::asmbl::StatementPiece_Type = 1;
                pub const StatementPiece_Type_LABEL:
                    root::lc3::core::asmbl::StatementPiece_Type = 2;
                pub const StatementPiece_Type_REG:
                    root::lc3::core::asmbl::StatementPiece_Type = 3;
                pub const StatementPiece_Type_STRING:
                    root::lc3::core::asmbl::StatementPiece_Type = 4;
                pub const StatementPiece_Type_NUM:
                    root::lc3::core::asmbl::StatementPiece_Type = 5;
                pub const StatementPiece_Type_INVALID:
                    root::lc3::core::asmbl::StatementPiece_Type = 6;
                pub type StatementPiece_Type = i32;
                #[test]
                fn bindgen_test_layout_StatementPiece() {
                    assert_eq!(
                        ::std::mem::size_of::<StatementPiece>(),
                        56usize,
                        concat!("Size of: ", stringify!(StatementPiece))
                    );
                    assert_eq!(
                        ::std::mem::align_of::<StatementPiece>(),
                        8usize,
                        concat!("Alignment of ", stringify!(StatementPiece))
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<StatementPiece>())).type_
                                as *const _ as usize
                        },
                        0usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(StatementPiece),
                            "::",
                            stringify!(type_)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<StatementPiece>())).str
                                as *const _ as usize
                        },
                        8usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(StatementPiece),
                            "::",
                            stringify!(str)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<StatementPiece>())).num
                                as *const _ as usize
                        },
                        40usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(StatementPiece),
                            "::",
                            stringify!(num)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<StatementPiece>())).col
                                as *const _ as usize
                        },
                        44usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(StatementPiece),
                            "::",
                            stringify!(col)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<StatementPiece>())).len
                                as *const _ as usize
                        },
                        48usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(StatementPiece),
                            "::",
                            stringify!(len)
                        )
                    );
                }
                impl Default for StatementPiece {
                    fn default() -> Self {
                        unsafe { ::std::mem::zeroed() }
                    }
                }
                #[repr(C)]
                pub struct Statement {
                    pub label: root::lc3::optional<
                        root::lc3::core::asmbl::StatementPiece,
                    >,
                    pub base: root::lc3::optional<
                        root::lc3::core::asmbl::StatementPiece,
                    >,
                    pub operands: root::std::vector,
                    pub pc: u32,
                    pub line: root::std::string,
                    pub row: u32,
                    pub valid: bool,
                }
                #[test]
                fn bindgen_test_layout_Statement() {
                    assert_eq!(
                        ::std::mem::size_of::<Statement>(),
                        200usize,
                        concat!("Size of: ", stringify!(Statement))
                    );
                    assert_eq!(
                        ::std::mem::align_of::<Statement>(),
                        8usize,
                        concat!("Alignment of ", stringify!(Statement))
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<Statement>())).label
                                as *const _ as usize
                        },
                        0usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(Statement),
                            "::",
                            stringify!(label)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<Statement>())).base
                                as *const _ as usize
                        },
                        64usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(Statement),
                            "::",
                            stringify!(base)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<Statement>())).operands
                                as *const _ as usize
                        },
                        128usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(Statement),
                            "::",
                            stringify!(operands)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<Statement>())).pc as *const _
                                as usize
                        },
                        152usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(Statement),
                            "::",
                            stringify!(pc)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<Statement>())).line
                                as *const _ as usize
                        },
                        160usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(Statement),
                            "::",
                            stringify!(line)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<Statement>())).row
                                as *const _ as usize
                        },
                        192usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(Statement),
                            "::",
                            stringify!(row)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<Statement>())).valid
                                as *const _ as usize
                        },
                        196usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(Statement),
                            "::",
                            stringify!(valid)
                        )
                    );
                }
                impl Default for Statement {
                    fn default() -> Self {
                        unsafe { ::std::mem::zeroed() }
                    }
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3lc34core5asmbl6getNumERKNS1_9StatementERKNS1_14StatementPieceEjbRNS_5utils15AssemblerLoggerEb"]
                    pub fn getNum(
                        statement: *const root::lc3::core::asmbl::Statement,
                        piece: *const root::lc3::core::asmbl::StatementPiece,
                        width: u32,
                        sext: bool,
                        logger: *mut root::lc3::utils::AssemblerLogger,
                        log_enable: bool,
                    ) -> root::lc3::optional<u32>;
                }
                #[repr(C)]
                pub struct InstructionEncoder {
                    pub _base: root::lc3::core::InstructionHandler,
                    pub logger: *mut root::lc3::utils::AssemblerLogger,
                    pub enable_liberal_asm: bool,
                    pub instructions_by_name: root::std::map,
                }
                #[test]
                fn bindgen_test_layout_InstructionEncoder() {
                    assert_eq!(
                        ::std::mem::size_of::<InstructionEncoder>(),
                        144usize,
                        concat!("Size of: ", stringify!(InstructionEncoder))
                    );
                    assert_eq!(
                        ::std::mem::align_of::<InstructionEncoder>(),
                        8usize,
                        concat!(
                            "Alignment of ",
                            stringify!(InstructionEncoder)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<InstructionEncoder>()))
                                .logger as *const _
                                as usize
                        },
                        80usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(InstructionEncoder),
                            "::",
                            stringify!(logger)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<InstructionEncoder>()))
                                .enable_liberal_asm
                                as *const _ as usize
                        },
                        88usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(InstructionEncoder),
                            "::",
                            stringify!(enable_liberal_asm)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<InstructionEncoder>()))
                                .instructions_by_name
                                as *const _ as usize
                        },
                        96usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(InstructionEncoder),
                            "::",
                            stringify!(instructions_by_name)
                        )
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZNK3lc34core5asmbl18InstructionEncoder14isStringPseudoERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
                    pub fn InstructionEncoder_isStringPseudo(
                        this: *const root::lc3::core::asmbl::InstructionEncoder,
                        search: *const root::std::string,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZNK3lc34core5asmbl18InstructionEncoder16isStringValidRegERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
                    pub fn InstructionEncoder_isStringValidReg(
                        this: *const root::lc3::core::asmbl::InstructionEncoder,
                        search: *const root::std::string,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZNK3lc34core5asmbl18InstructionEncoder8isPseudoERKNS1_9StatementE"]
                    pub fn InstructionEncoder_isPseudo(
                        this: *const root::lc3::core::asmbl::InstructionEncoder,
                        statement: *const root::lc3::core::asmbl::Statement,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZNK3lc34core5asmbl18InstructionEncoder6isInstERKNS1_9StatementE"]
                    pub fn InstructionEncoder_isInst(
                        this: *const root::lc3::core::asmbl::InstructionEncoder,
                        statement: *const root::lc3::core::asmbl::Statement,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZNK3lc34core5asmbl18InstructionEncoder17isValidPseudoOrigERKNS1_9StatementEb"]
                    pub fn InstructionEncoder_isValidPseudoOrig(
                        this: *const root::lc3::core::asmbl::InstructionEncoder,
                        statement: *const root::lc3::core::asmbl::Statement,
                        log_enable: bool,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZNK3lc34core5asmbl18InstructionEncoder17isValidPseudoFillERKNS1_9StatementEb"]
                    pub fn InstructionEncoder_isValidPseudoFill(
                        this: *const root::lc3::core::asmbl::InstructionEncoder,
                        statement: *const root::lc3::core::asmbl::Statement,
                        log_enable: bool,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZNK3lc34core5asmbl18InstructionEncoder17isValidPseudoFillERKNS1_9StatementERKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessISC_ESaISt4pairIKSC_jEEEb"]
                    pub fn InstructionEncoder_isValidPseudoFill1(
                        this: *const root::lc3::core::asmbl::InstructionEncoder,
                        statement: *const root::lc3::core::asmbl::Statement,
                        symbols: *const root::lc3::core::SymbolTable,
                        log_enable: bool,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZNK3lc34core5asmbl18InstructionEncoder18isValidPseudoBlockERKNS1_9StatementEb"]
                    pub fn InstructionEncoder_isValidPseudoBlock(
                        this: *const root::lc3::core::asmbl::InstructionEncoder,
                        statement: *const root::lc3::core::asmbl::Statement,
                        log_enable: bool,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZNK3lc34core5asmbl18InstructionEncoder19isValidPseudoStringERKNS1_9StatementEb"]
                    pub fn InstructionEncoder_isValidPseudoString(
                        this: *const root::lc3::core::asmbl::InstructionEncoder,
                        statement: *const root::lc3::core::asmbl::Statement,
                        log_enable: bool,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZNK3lc34core5asmbl18InstructionEncoder16isValidPseudoEndERKNS1_9StatementEb"]
                    pub fn InstructionEncoder_isValidPseudoEnd(
                        this: *const root::lc3::core::asmbl::InstructionEncoder,
                        statement: *const root::lc3::core::asmbl::Statement,
                        log_enable: bool,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZNK3lc34core5asmbl18InstructionEncoder35getDistanceToNearestInstructionNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
                    pub fn InstructionEncoder_getDistanceToNearestInstructionName(
                        this: *const root::lc3::core::asmbl::InstructionEncoder,
                        search: *const root::std::string,
                    ) -> u32;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZNK3lc34core5asmbl18InstructionEncoder14validatePseudoERKNS1_9StatementERKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessISC_ESaISt4pairIKSC_jEEE"]
                    pub fn InstructionEncoder_validatePseudo(
                        this: *const root::lc3::core::asmbl::InstructionEncoder,
                        statement: *const root::lc3::core::asmbl::Statement,
                        symbols: *const root::lc3::core::SymbolTable,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZNK3lc34core5asmbl18InstructionEncoder19validateInstructionERKNS1_9StatementE"]
                    pub fn InstructionEncoder_validateInstruction(
                        this: *const root::lc3::core::asmbl::InstructionEncoder,
                        statement: *const root::lc3::core::asmbl::Statement,
                    ) -> root::lc3::optional<root::lc3::core::PIInstruction>;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZNK3lc34core5asmbl18InstructionEncoder13getPseudoOrigERKNS1_9StatementE"]
                    pub fn InstructionEncoder_getPseudoOrig(
                        this: *const root::lc3::core::asmbl::InstructionEncoder,
                        statement: *const root::lc3::core::asmbl::Statement,
                    ) -> u32;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZNK3lc34core5asmbl18InstructionEncoder13getPseudoFillERKNS1_9StatementERKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessISC_ESaISt4pairIKSC_jEEE"]
                    pub fn InstructionEncoder_getPseudoFill(
                        this: *const root::lc3::core::asmbl::InstructionEncoder,
                        statement: *const root::lc3::core::asmbl::Statement,
                        symbols: *const root::lc3::core::SymbolTable,
                    ) -> u32;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZNK3lc34core5asmbl18InstructionEncoder18getPseudoBlockSizeERKNS1_9StatementE"]
                    pub fn InstructionEncoder_getPseudoBlockSize(
                        this: *const root::lc3::core::asmbl::InstructionEncoder,
                        statement: *const root::lc3::core::asmbl::Statement,
                    ) -> u32;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZNK3lc34core5asmbl18InstructionEncoder19getPseudoStringSizeERKNS1_9StatementE"]
                    pub fn InstructionEncoder_getPseudoStringSize(
                        this: *const root::lc3::core::asmbl::InstructionEncoder,
                        statement: *const root::lc3::core::asmbl::Statement,
                    ) -> u32;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZNK3lc34core5asmbl18InstructionEncoder15getPseudoStringB5cxx11ERKNS1_9StatementE"]
                    pub fn InstructionEncoder_getPseudoString(
                        this: *const root::lc3::core::asmbl::InstructionEncoder,
                        statement: *const root::lc3::core::asmbl::Statement,
                    ) -> root::std::string;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZNK3lc34core5asmbl18InstructionEncoder17encodeInstructionERKNS1_9StatementERKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessISC_ESaISt4pairIKSC_jEEESt10shared_ptrINS0_12IInstructionEE"]
                    pub fn InstructionEncoder_encodeInstruction(
                        this: *const root::lc3::core::asmbl::InstructionEncoder,
                        statement: *const root::lc3::core::asmbl::Statement,
                        symbols: *const root::lc3::core::SymbolTable,
                        pattern: root::lc3::core::PIInstruction,
                    ) -> root::lc3::optional<u32>;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3lc34core5asmbl18InstructionEncoderC1ERNS_5utils15AssemblerLoggerEb"]
                    pub fn InstructionEncoder_InstructionEncoder(
                        this: *mut root::lc3::core::asmbl::InstructionEncoder,
                        logger: *mut root::lc3::utils::AssemblerLogger,
                        enable_liberal_assembly: bool,
                    );
                }
                impl Default for InstructionEncoder {
                    fn default() -> Self {
                        unsafe { ::std::mem::zeroed() }
                    }
                }
                impl InstructionEncoder {
                    #[inline]
                    pub unsafe fn isStringPseudo(
                        &self,
                        search: *const root::std::string,
                    ) -> bool {
                        InstructionEncoder_isStringPseudo(self, search)
                    }
                    #[inline]
                    pub unsafe fn isStringValidReg(
                        &self,
                        search: *const root::std::string,
                    ) -> bool {
                        InstructionEncoder_isStringValidReg(self, search)
                    }
                    #[inline]
                    pub unsafe fn isPseudo(
                        &self,
                        statement: *const root::lc3::core::asmbl::Statement,
                    ) -> bool {
                        InstructionEncoder_isPseudo(self, statement)
                    }
                    #[inline]
                    pub unsafe fn isInst(
                        &self,
                        statement: *const root::lc3::core::asmbl::Statement,
                    ) -> bool {
                        InstructionEncoder_isInst(self, statement)
                    }
                    #[inline]
                    pub unsafe fn isValidPseudoOrig(
                        &self,
                        statement: *const root::lc3::core::asmbl::Statement,
                        log_enable: bool,
                    ) -> bool {
                        InstructionEncoder_isValidPseudoOrig(
                            self, statement, log_enable,
                        )
                    }
                    #[inline]
                    pub unsafe fn isValidPseudoFill(
                        &self,
                        statement: *const root::lc3::core::asmbl::Statement,
                        log_enable: bool,
                    ) -> bool {
                        InstructionEncoder_isValidPseudoFill(
                            self, statement, log_enable,
                        )
                    }
                    #[inline]
                    pub unsafe fn isValidPseudoFill1(
                        &self,
                        statement: *const root::lc3::core::asmbl::Statement,
                        symbols: *const root::lc3::core::SymbolTable,
                        log_enable: bool,
                    ) -> bool {
                        InstructionEncoder_isValidPseudoFill1(
                            self, statement, symbols, log_enable,
                        )
                    }
                    #[inline]
                    pub unsafe fn isValidPseudoBlock(
                        &self,
                        statement: *const root::lc3::core::asmbl::Statement,
                        log_enable: bool,
                    ) -> bool {
                        InstructionEncoder_isValidPseudoBlock(
                            self, statement, log_enable,
                        )
                    }
                    #[inline]
                    pub unsafe fn isValidPseudoString(
                        &self,
                        statement: *const root::lc3::core::asmbl::Statement,
                        log_enable: bool,
                    ) -> bool {
                        InstructionEncoder_isValidPseudoString(
                            self, statement, log_enable,
                        )
                    }
                    #[inline]
                    pub unsafe fn isValidPseudoEnd(
                        &self,
                        statement: *const root::lc3::core::asmbl::Statement,
                        log_enable: bool,
                    ) -> bool {
                        InstructionEncoder_isValidPseudoEnd(
                            self, statement, log_enable,
                        )
                    }
                    #[inline]
                    pub unsafe fn getDistanceToNearestInstructionName(
                        &self,
                        search: *const root::std::string,
                    ) -> u32 {
                        InstructionEncoder_getDistanceToNearestInstructionName(
                            self, search,
                        )
                    }
                    #[inline]
                    pub unsafe fn validatePseudo(
                        &self,
                        statement: *const root::lc3::core::asmbl::Statement,
                        symbols: *const root::lc3::core::SymbolTable,
                    ) -> bool {
                        InstructionEncoder_validatePseudo(
                            self, statement, symbols,
                        )
                    }
                    #[inline]
                    pub unsafe fn validateInstruction(
                        &self,
                        statement: *const root::lc3::core::asmbl::Statement,
                    ) -> root::lc3::optional<root::lc3::core::PIInstruction>
                    {
                        InstructionEncoder_validateInstruction(self, statement)
                    }
                    #[inline]
                    pub unsafe fn getPseudoOrig(
                        &self,
                        statement: *const root::lc3::core::asmbl::Statement,
                    ) -> u32 {
                        InstructionEncoder_getPseudoOrig(self, statement)
                    }
                    #[inline]
                    pub unsafe fn getPseudoFill(
                        &self,
                        statement: *const root::lc3::core::asmbl::Statement,
                        symbols: *const root::lc3::core::SymbolTable,
                    ) -> u32 {
                        InstructionEncoder_getPseudoFill(
                            self, statement, symbols,
                        )
                    }
                    #[inline]
                    pub unsafe fn getPseudoBlockSize(
                        &self,
                        statement: *const root::lc3::core::asmbl::Statement,
                    ) -> u32 {
                        InstructionEncoder_getPseudoBlockSize(self, statement)
                    }
                    #[inline]
                    pub unsafe fn getPseudoStringSize(
                        &self,
                        statement: *const root::lc3::core::asmbl::Statement,
                    ) -> u32 {
                        InstructionEncoder_getPseudoStringSize(self, statement)
                    }
                    #[inline]
                    pub unsafe fn getPseudoString(
                        &self,
                        statement: *const root::lc3::core::asmbl::Statement,
                    ) -> root::std::string {
                        InstructionEncoder_getPseudoString(self, statement)
                    }
                    #[inline]
                    pub unsafe fn encodeInstruction(
                        &self,
                        statement: *const root::lc3::core::asmbl::Statement,
                        symbols: *const root::lc3::core::SymbolTable,
                        pattern: root::lc3::core::PIInstruction,
                    ) -> root::lc3::optional<u32> {
                        InstructionEncoder_encodeInstruction(
                            self, statement, symbols, pattern,
                        )
                    }
                    #[inline]
                    pub unsafe fn new(
                        logger: *mut root::lc3::utils::AssemblerLogger,
                        enable_liberal_assembly: bool,
                    ) -> Self {
                        let mut __bindgen_tmp =
                            ::std::mem::MaybeUninit::uninit();
                        InstructionEncoder_InstructionEncoder(
                            __bindgen_tmp.as_mut_ptr(),
                            logger,
                            enable_liberal_assembly,
                        );
                        __bindgen_tmp.assume_init()
                    }
                }
                #[repr(C)]
                pub struct Tokenizer {
                    pub buffer: *mut root::std::istream,
                    pub get_new_line: bool,
                    pub return_new_line: bool,
                    pub line: root::std::string,
                    pub row: u32,
                    pub col: u32,
                    pub done: bool,
                    pub enable_liberal_asm: bool,
                }
                #[test]
                fn bindgen_test_layout_Tokenizer() {
                    assert_eq!(
                        ::std::mem::size_of::<Tokenizer>(),
                        64usize,
                        concat!("Size of: ", stringify!(Tokenizer))
                    );
                    assert_eq!(
                        ::std::mem::align_of::<Tokenizer>(),
                        8usize,
                        concat!("Alignment of ", stringify!(Tokenizer))
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<Tokenizer>())).buffer
                                as *const _ as usize
                        },
                        0usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(Tokenizer),
                            "::",
                            stringify!(buffer)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<Tokenizer>())).get_new_line
                                as *const _ as usize
                        },
                        8usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(Tokenizer),
                            "::",
                            stringify!(get_new_line)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<Tokenizer>()))
                                .return_new_line
                                as *const _ as usize
                        },
                        9usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(Tokenizer),
                            "::",
                            stringify!(return_new_line)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<Tokenizer>())).line
                                as *const _ as usize
                        },
                        16usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(Tokenizer),
                            "::",
                            stringify!(line)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<Tokenizer>())).row
                                as *const _ as usize
                        },
                        48usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(Tokenizer),
                            "::",
                            stringify!(row)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<Tokenizer>())).col
                                as *const _ as usize
                        },
                        52usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(Tokenizer),
                            "::",
                            stringify!(col)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<Tokenizer>())).done
                                as *const _ as usize
                        },
                        56usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(Tokenizer),
                            "::",
                            stringify!(done)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<Tokenizer>()))
                                .enable_liberal_asm
                                as *const _ as usize
                        },
                        57usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(Tokenizer),
                            "::",
                            stringify!(enable_liberal_asm)
                        )
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZNK3lc34core5asmbl9Tokenizer6isDoneEv"]
                    pub fn Tokenizer_isDone(
                        this: *const root::lc3::core::asmbl::Tokenizer,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3lc34core5asmbl9TokenizerC1ERSib"]
                    pub fn Tokenizer_Tokenizer(
                        this: *mut root::lc3::core::asmbl::Tokenizer,
                        buffer: *mut root::std::istream,
                        enable_liberal_asm: bool,
                    );
                }
                impl Default for Tokenizer {
                    fn default() -> Self {
                        unsafe { ::std::mem::zeroed() }
                    }
                }
                impl Tokenizer {
                    #[inline]
                    pub unsafe fn isDone(&self) -> bool {
                        Tokenizer_isDone(self)
                    }
                    #[inline]
                    pub unsafe fn new(
                        buffer: *mut root::std::istream,
                        enable_liberal_asm: bool,
                    ) -> Self {
                        let mut __bindgen_tmp =
                            ::std::mem::MaybeUninit::uninit();
                        Tokenizer_Tokenizer(
                            __bindgen_tmp.as_mut_ptr(),
                            buffer,
                            enable_liberal_asm,
                        );
                        __bindgen_tmp.assume_init()
                    }
                }
            }
            #[repr(C)]
            pub struct MemEntry {
                pub value: u16,
                pub orig: bool,
                pub line: root::std::string,
            }
            #[test]
            fn bindgen_test_layout_MemEntry() {
                assert_eq!(
                    ::std::mem::size_of::<MemEntry>(),
                    40usize,
                    concat!("Size of: ", stringify!(MemEntry))
                );
                assert_eq!(
                    ::std::mem::align_of::<MemEntry>(),
                    8usize,
                    concat!("Alignment of ", stringify!(MemEntry))
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<MemEntry>())).value as *const _
                            as usize
                    },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MemEntry),
                        "::",
                        stringify!(value)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<MemEntry>())).orig as *const _
                            as usize
                    },
                    2usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MemEntry),
                        "::",
                        stringify!(orig)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<MemEntry>())).line as *const _
                            as usize
                    },
                    8usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MemEntry),
                        "::",
                        stringify!(line)
                    )
                );
            }
            impl Default for MemEntry {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            pub type callback_func_t = [u64; 4usize];
            #[repr(C)]
            pub struct MachineState {
                pub mem: root::std::vector,
                pub regs: [u32; 8usize],
                pub pc: u32,
                pub sys_call_types: root::std::stack<root::std::deque>,
                pub logger: *mut root::lc3::utils::Logger,
                pub pre_instruction_callback_v: bool,
                pub post_instruction_callback_v: bool,
                pub interrupt_enter_callback_v: bool,
                pub interrupt_exit_callback_v: bool,
                pub exception_enter_callback_v: bool,
                pub exception_exit_callback_v: bool,
                pub sub_enter_callback_v: bool,
                pub sub_exit_callback_v: bool,
                pub wait_for_input_callback_v: bool,
                pub pre_instruction_callback: root::lc3::core::callback_func_t,
                pub post_instruction_callback: root::lc3::core::callback_func_t,
                pub interrupt_enter_callback: root::lc3::core::callback_func_t,
                pub interrupt_exit_callback: root::lc3::core::callback_func_t,
                pub exception_enter_callback: root::lc3::core::callback_func_t,
                pub exception_exit_callback: root::lc3::core::callback_func_t,
                pub sub_enter_callback: root::lc3::core::callback_func_t,
                pub sub_exit_callback: root::lc3::core::callback_func_t,
                pub wait_for_input_callback: root::lc3::core::callback_func_t,
                pub simulator: *mut root::lc3::sim,
                pub ignore_privilege: bool,
            }
            pub const MachineState_SysCallType_TRAP:
                root::lc3::core::MachineState_SysCallType = 0;
            pub const MachineState_SysCallType_INT:
                root::lc3::core::MachineState_SysCallType = 1;
            pub const MachineState_SysCallType_EX:
                root::lc3::core::MachineState_SysCallType = 2;
            pub type MachineState_SysCallType = i32;
            pub const MachineState_SPType_SSP:
                root::lc3::core::MachineState_SPType = 0;
            pub const MachineState_SPType_USP:
                root::lc3::core::MachineState_SPType = 1;
            pub type MachineState_SPType = i32;
            #[test]
            fn bindgen_test_layout_MachineState() {
                assert_eq!(
                    ::std::mem::size_of::<MachineState>(),
                    472usize,
                    concat!("Size of: ", stringify!(MachineState))
                );
                assert_eq!(
                    ::std::mem::align_of::<MachineState>(),
                    8usize,
                    concat!("Alignment of ", stringify!(MachineState))
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<MachineState>())).mem as *const _
                            as usize
                    },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MachineState),
                        "::",
                        stringify!(mem)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<MachineState>())).regs
                            as *const _ as usize
                    },
                    24usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MachineState),
                        "::",
                        stringify!(regs)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<MachineState>())).pc as *const _
                            as usize
                    },
                    56usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MachineState),
                        "::",
                        stringify!(pc)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<MachineState>())).sys_call_types
                            as *const _ as usize
                    },
                    64usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MachineState),
                        "::",
                        stringify!(sys_call_types)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<MachineState>())).logger
                            as *const _ as usize
                    },
                    144usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MachineState),
                        "::",
                        stringify!(logger)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<MachineState>()))
                            .pre_instruction_callback_v
                            as *const _ as usize
                    },
                    152usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MachineState),
                        "::",
                        stringify!(pre_instruction_callback_v)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<MachineState>()))
                            .post_instruction_callback_v
                            as *const _ as usize
                    },
                    153usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MachineState),
                        "::",
                        stringify!(post_instruction_callback_v)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<MachineState>()))
                            .interrupt_enter_callback_v
                            as *const _ as usize
                    },
                    154usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MachineState),
                        "::",
                        stringify!(interrupt_enter_callback_v)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<MachineState>()))
                            .interrupt_exit_callback_v
                            as *const _ as usize
                    },
                    155usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MachineState),
                        "::",
                        stringify!(interrupt_exit_callback_v)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<MachineState>()))
                            .exception_enter_callback_v
                            as *const _ as usize
                    },
                    156usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MachineState),
                        "::",
                        stringify!(exception_enter_callback_v)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<MachineState>()))
                            .exception_exit_callback_v
                            as *const _ as usize
                    },
                    157usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MachineState),
                        "::",
                        stringify!(exception_exit_callback_v)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<MachineState>()))
                            .sub_enter_callback_v
                            as *const _ as usize
                    },
                    158usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MachineState),
                        "::",
                        stringify!(sub_enter_callback_v)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<MachineState>()))
                            .sub_exit_callback_v
                            as *const _ as usize
                    },
                    159usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MachineState),
                        "::",
                        stringify!(sub_exit_callback_v)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<MachineState>()))
                            .wait_for_input_callback_v
                            as *const _ as usize
                    },
                    160usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MachineState),
                        "::",
                        stringify!(wait_for_input_callback_v)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<MachineState>()))
                            .pre_instruction_callback
                            as *const _ as usize
                    },
                    168usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MachineState),
                        "::",
                        stringify!(pre_instruction_callback)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<MachineState>()))
                            .post_instruction_callback
                            as *const _ as usize
                    },
                    200usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MachineState),
                        "::",
                        stringify!(post_instruction_callback)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<MachineState>()))
                            .interrupt_enter_callback
                            as *const _ as usize
                    },
                    232usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MachineState),
                        "::",
                        stringify!(interrupt_enter_callback)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<MachineState>()))
                            .interrupt_exit_callback
                            as *const _ as usize
                    },
                    264usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MachineState),
                        "::",
                        stringify!(interrupt_exit_callback)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<MachineState>()))
                            .exception_enter_callback
                            as *const _ as usize
                    },
                    296usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MachineState),
                        "::",
                        stringify!(exception_enter_callback)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<MachineState>()))
                            .exception_exit_callback
                            as *const _ as usize
                    },
                    328usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MachineState),
                        "::",
                        stringify!(exception_exit_callback)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<MachineState>()))
                            .sub_enter_callback
                            as *const _ as usize
                    },
                    360usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MachineState),
                        "::",
                        stringify!(sub_enter_callback)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<MachineState>()))
                            .sub_exit_callback
                            as *const _ as usize
                    },
                    392usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MachineState),
                        "::",
                        stringify!(sub_exit_callback)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<MachineState>()))
                            .wait_for_input_callback
                            as *const _ as usize
                    },
                    424usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MachineState),
                        "::",
                        stringify!(wait_for_input_callback)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<MachineState>())).simulator
                            as *const _ as usize
                    },
                    456usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MachineState),
                        "::",
                        stringify!(simulator)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<MachineState>()))
                            .ignore_privilege
                            as *const _ as usize
                    },
                    464usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MachineState),
                        "::",
                        stringify!(ignore_privilege)
                    )
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZNK3lc34core12MachineState12readMemEventEjRbRSt10shared_ptrINS0_6IEventEE"]
                pub fn MachineState_readMemEvent(
                    this: *const root::lc3::core::MachineState,
                    addr: u32,
                    change_mem: *mut bool,
                    change: *mut root::std::shared_ptr,
                ) -> u32;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core12MachineState11readMemSafeEj"]
                pub fn MachineState_readMemSafe(
                    this: *mut root::lc3::core::MachineState,
                    addr: u32,
                ) -> u32;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNK3lc34core12MachineState10readMemRawEj"]
                pub fn MachineState_readMemRaw(
                    this: *const root::lc3::core::MachineState,
                    addr: u32,
                ) -> u32;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core12MachineState13writeMemEventEjtRbRSt10shared_ptrINS0_6IEventEE"]
                pub fn MachineState_writeMemEvent(
                    this: *mut root::lc3::core::MachineState,
                    addr: u32,
                    value: u16,
                    change_mem: *mut bool,
                    change: *mut root::std::shared_ptr,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core12MachineState12writeMemSafeEjt"]
                pub fn MachineState_writeMemSafe(
                    this: *mut root::lc3::core::MachineState,
                    addr: u32,
                    value: u16,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core12MachineState11writeMemRawEjt"]
                pub fn MachineState_writeMemRaw(
                    this: *mut root::lc3::core::MachineState,
                    addr: u32,
                    value: u16,
                );
            }
            impl Default for MachineState {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            impl MachineState {
                #[inline]
                pub unsafe fn readMemEvent(
                    &self,
                    addr: u32,
                    change_mem: *mut bool,
                    change: *mut root::std::shared_ptr,
                ) -> u32 {
                    MachineState_readMemEvent(self, addr, change_mem, change)
                }
                #[inline]
                pub unsafe fn readMemSafe(&mut self, addr: u32) -> u32 {
                    MachineState_readMemSafe(self, addr)
                }
                #[inline]
                pub unsafe fn readMemRaw(&self, addr: u32) -> u32 {
                    MachineState_readMemRaw(self, addr)
                }
                #[inline]
                pub unsafe fn writeMemEvent(
                    &mut self,
                    addr: u32,
                    value: u16,
                    change_mem: *mut bool,
                    change: *mut root::std::shared_ptr,
                ) {
                    MachineState_writeMemEvent(
                        self, addr, value, change_mem, change,
                    )
                }
                #[inline]
                pub unsafe fn writeMemSafe(&mut self, addr: u32, value: u16) {
                    MachineState_writeMemSafe(self, addr, value)
                }
                #[inline]
                pub unsafe fn writeMemRaw(&mut self, addr: u32, value: u16) {
                    MachineState_writeMemRaw(self, addr, value)
                }
            }
            pub const EventType_EVENT_REG: root::lc3::core::EventType = 0;
            pub const EventType_EVENT_PSR: root::lc3::core::EventType = 1;
            pub const EventType_EVENT_PC: root::lc3::core::EventType = 2;
            pub const EventType_EVENT_MEM: root::lc3::core::EventType = 3;
            pub const EventType_EVENT_SWAP_SP: root::lc3::core::EventType = 4;
            pub const EventType_EVENT_CALLBACK: root::lc3::core::EventType = 5;
            pub const EventType_PUSH_SYS_CALL_TYPE: root::lc3::core::EventType =
                6;
            pub const EventType_POP_SYS_CALL_TYPE: root::lc3::core::EventType =
                7;
            pub type EventType = i32;
            #[repr(C)]
            pub struct IEvent__bindgen_vtable(::std::os::raw::c_void);
            #[repr(C)]
            #[derive(Debug)]
            pub struct IEvent {
                pub vtable_: *const IEvent__bindgen_vtable,
                pub type_: root::lc3::core::EventType,
            }
            #[test]
            fn bindgen_test_layout_IEvent() {
                assert_eq!(
                    ::std::mem::size_of::<IEvent>(),
                    16usize,
                    concat!("Size of: ", stringify!(IEvent))
                );
                assert_eq!(
                    ::std::mem::align_of::<IEvent>(),
                    8usize,
                    concat!("Alignment of ", stringify!(IEvent))
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<IEvent>())).type_ as *const _
                            as usize
                    },
                    8usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(IEvent),
                        "::",
                        stringify!(type_)
                    )
                );
            }
            impl Default for IEvent {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug)]
            pub struct RegEvent {
                pub _base: root::lc3::core::IEvent,
                pub reg: u32,
                pub value: u32,
            }
            #[test]
            fn bindgen_test_layout_RegEvent() {
                assert_eq!(
                    ::std::mem::size_of::<RegEvent>(),
                    24usize,
                    concat!("Size of: ", stringify!(RegEvent))
                );
                assert_eq!(
                    ::std::mem::align_of::<RegEvent>(),
                    8usize,
                    concat!("Alignment of ", stringify!(RegEvent))
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<RegEvent>())).reg as *const _
                            as usize
                    },
                    12usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(RegEvent),
                        "::",
                        stringify!(reg)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<RegEvent>())).value as *const _
                            as usize
                    },
                    16usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(RegEvent),
                        "::",
                        stringify!(value)
                    )
                );
            }
            impl Default for RegEvent {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug)]
            pub struct PSREvent {
                pub _base: root::lc3::core::IEvent,
                pub value: u32,
            }
            #[test]
            fn bindgen_test_layout_PSREvent() {
                assert_eq!(
                    ::std::mem::size_of::<PSREvent>(),
                    16usize,
                    concat!("Size of: ", stringify!(PSREvent))
                );
                assert_eq!(
                    ::std::mem::align_of::<PSREvent>(),
                    8usize,
                    concat!("Alignment of ", stringify!(PSREvent))
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<PSREvent>())).value as *const _
                            as usize
                    },
                    12usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(PSREvent),
                        "::",
                        stringify!(value)
                    )
                );
            }
            impl Default for PSREvent {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug)]
            pub struct PCEvent {
                pub _base: root::lc3::core::IEvent,
                pub value: u32,
            }
            #[test]
            fn bindgen_test_layout_PCEvent() {
                assert_eq!(
                    ::std::mem::size_of::<PCEvent>(),
                    16usize,
                    concat!("Size of: ", stringify!(PCEvent))
                );
                assert_eq!(
                    ::std::mem::align_of::<PCEvent>(),
                    8usize,
                    concat!("Alignment of ", stringify!(PCEvent))
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<PCEvent>())).value as *const _
                            as usize
                    },
                    12usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(PCEvent),
                        "::",
                        stringify!(value)
                    )
                );
            }
            impl Default for PCEvent {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug)]
            pub struct MemWriteEvent {
                pub _base: root::lc3::core::IEvent,
                pub addr: u32,
                pub value: u32,
            }
            #[test]
            fn bindgen_test_layout_MemWriteEvent() {
                assert_eq!(
                    ::std::mem::size_of::<MemWriteEvent>(),
                    24usize,
                    concat!("Size of: ", stringify!(MemWriteEvent))
                );
                assert_eq!(
                    ::std::mem::align_of::<MemWriteEvent>(),
                    8usize,
                    concat!("Alignment of ", stringify!(MemWriteEvent))
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<MemWriteEvent>())).addr
                            as *const _ as usize
                    },
                    12usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MemWriteEvent),
                        "::",
                        stringify!(addr)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<MemWriteEvent>())).value
                            as *const _ as usize
                    },
                    16usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MemWriteEvent),
                        "::",
                        stringify!(value)
                    )
                );
            }
            impl Default for MemWriteEvent {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            extern "C" {
                #[link_name = "\u{1}_ZNK3lc34core13MemWriteEvent11updateStateERNS0_12MachineStateE"]
                pub fn MemWriteEvent_updateState(
                    this: *mut ::std::os::raw::c_void,
                    state: *mut root::lc3::core::MachineState,
                );
            }
            #[repr(C)]
            #[derive(Debug)]
            pub struct SwapSPEvent {
                pub _base: root::lc3::core::IEvent,
            }
            #[test]
            fn bindgen_test_layout_SwapSPEvent() {
                assert_eq!(
                    ::std::mem::size_of::<SwapSPEvent>(),
                    16usize,
                    concat!("Size of: ", stringify!(SwapSPEvent))
                );
                assert_eq!(
                    ::std::mem::align_of::<SwapSPEvent>(),
                    8usize,
                    concat!("Alignment of ", stringify!(SwapSPEvent))
                );
            }
            impl Default for SwapSPEvent {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            extern "C" {
                #[link_name = "\u{1}_ZNK3lc34core11SwapSPEvent11updateStateERNS0_12MachineStateE"]
                pub fn SwapSPEvent_updateState(
                    this: *mut ::std::os::raw::c_void,
                    state: *mut root::lc3::core::MachineState,
                );
            }
            #[repr(C)]
            #[derive(Debug)]
            pub struct CallbackEvent {
                pub _base: root::lc3::core::IEvent,
                pub callback_v: bool,
                pub callback: root::lc3::core::callback_func_t,
            }
            #[test]
            fn bindgen_test_layout_CallbackEvent() {
                assert_eq!(
                    ::std::mem::size_of::<CallbackEvent>(),
                    48usize,
                    concat!("Size of: ", stringify!(CallbackEvent))
                );
                assert_eq!(
                    ::std::mem::align_of::<CallbackEvent>(),
                    8usize,
                    concat!("Alignment of ", stringify!(CallbackEvent))
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<CallbackEvent>())).callback_v
                            as *const _ as usize
                    },
                    12usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(CallbackEvent),
                        "::",
                        stringify!(callback_v)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<CallbackEvent>())).callback
                            as *const _ as usize
                    },
                    16usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(CallbackEvent),
                        "::",
                        stringify!(callback)
                    )
                );
            }
            impl Default for CallbackEvent {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug)]
            pub struct PushSysCallTypeEvent {
                pub _base: root::lc3::core::IEvent,
                pub call_type: root::lc3::core::MachineState_SysCallType,
            }
            #[test]
            fn bindgen_test_layout_PushSysCallTypeEvent() {
                assert_eq!(
                    ::std::mem::size_of::<PushSysCallTypeEvent>(),
                    16usize,
                    concat!("Size of: ", stringify!(PushSysCallTypeEvent))
                );
                assert_eq!(
                    ::std::mem::align_of::<PushSysCallTypeEvent>(),
                    8usize,
                    concat!("Alignment of ", stringify!(PushSysCallTypeEvent))
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<PushSysCallTypeEvent>()))
                            .call_type as *const _
                            as usize
                    },
                    12usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(PushSysCallTypeEvent),
                        "::",
                        stringify!(call_type)
                    )
                );
            }
            impl Default for PushSysCallTypeEvent {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug)]
            pub struct PopSysCallTypeEvent {
                pub _base: root::lc3::core::IEvent,
            }
            #[test]
            fn bindgen_test_layout_PopSysCallTypeEvent() {
                assert_eq!(
                    ::std::mem::size_of::<PopSysCallTypeEvent>(),
                    16usize,
                    concat!("Size of: ", stringify!(PopSysCallTypeEvent))
                );
                assert_eq!(
                    ::std::mem::align_of::<PopSysCallTypeEvent>(),
                    8usize,
                    concat!("Alignment of ", stringify!(PopSysCallTypeEvent))
                );
            }
            impl Default for PopSysCallTypeEvent {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            pub const OperType_FIXED: root::lc3::core::OperType = 0;
            pub const OperType_NUM: root::lc3::core::OperType = 1;
            pub const OperType_LABEL: root::lc3::core::OperType = 2;
            pub const OperType_REG: root::lc3::core::OperType = 3;
            pub const OperType_INVALID: root::lc3::core::OperType = 4;
            pub type OperType = i32;
            #[repr(C)]
            pub struct IOperand__bindgen_vtable(::std::os::raw::c_void);
            #[repr(C)]
            pub struct IOperand {
                pub vtable_: *const IOperand__bindgen_vtable,
                pub type_: root::lc3::core::OperType,
                pub type_str: root::std::string,
                pub width: u32,
                pub value: u32,
            }
            #[test]
            fn bindgen_test_layout_IOperand() {
                assert_eq!(
                    ::std::mem::size_of::<IOperand>(),
                    56usize,
                    concat!("Size of: ", stringify!(IOperand))
                );
                assert_eq!(
                    ::std::mem::align_of::<IOperand>(),
                    8usize,
                    concat!("Alignment of ", stringify!(IOperand))
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<IOperand>())).type_ as *const _
                            as usize
                    },
                    8usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(IOperand),
                        "::",
                        stringify!(type_)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<IOperand>())).type_str
                            as *const _ as usize
                    },
                    16usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(IOperand),
                        "::",
                        stringify!(type_str)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<IOperand>())).width as *const _
                            as usize
                    },
                    48usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(IOperand),
                        "::",
                        stringify!(width)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<IOperand>())).value as *const _
                            as usize
                    },
                    52usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(IOperand),
                        "::",
                        stringify!(value)
                    )
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZNK3lc34core8IOperand11isEqualTypeENS0_8OperTypeE"]
                pub fn IOperand_isEqualType(
                    this: *const root::lc3::core::IOperand,
                    other: root::lc3::core::OperType,
                ) -> bool;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core8IOperandC2ENS0_8OperTypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj"]
                pub fn IOperand_IOperand(
                    this: *mut root::lc3::core::IOperand,
                    type_: root::lc3::core::OperType,
                    type_str: *const root::std::string,
                    width: u32,
                );
            }
            impl Default for IOperand {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            impl IOperand {
                #[inline]
                pub unsafe fn isEqualType(
                    &self,
                    other: root::lc3::core::OperType,
                ) -> bool {
                    IOperand_isEqualType(self, other)
                }
                #[inline]
                pub unsafe fn new(
                    type_: root::lc3::core::OperType,
                    type_str: *const root::std::string,
                    width: u32,
                ) -> Self {
                    let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                    IOperand_IOperand(
                        __bindgen_tmp.as_mut_ptr(),
                        type_,
                        type_str,
                        width,
                    );
                    __bindgen_tmp.assume_init()
                }
            }
            #[repr(C)]
            pub struct IInstruction__bindgen_vtable(::std::os::raw::c_void);
            #[repr(C)]
            pub struct IInstruction {
                pub vtable_: *const IInstruction__bindgen_vtable,
                pub name: root::std::string,
                pub operands: root::std::vector,
            }
            #[test]
            fn bindgen_test_layout_IInstruction() {
                assert_eq!(
                    ::std::mem::size_of::<IInstruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(IInstruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<IInstruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(IInstruction))
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<IInstruction>())).name
                            as *const _ as usize
                    },
                    8usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(IInstruction),
                        "::",
                        stringify!(name)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<IInstruction>())).operands
                            as *const _ as usize
                    },
                    40usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(IInstruction),
                        "::",
                        stringify!(operands)
                    )
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZNK3lc34core12IInstruction14getNumOperandsEv"]
                pub fn IInstruction_getNumOperands(
                    this: *const root::lc3::core::IInstruction,
                ) -> u32;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core12IInstruction14assignOperandsEj"]
                pub fn IInstruction_assignOperands(
                    this: *mut root::lc3::core::IInstruction,
                    encoded_inst: u32,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZNK3lc34core12IInstruction14toFormatStringB5cxx11Ev"]
                pub fn IInstruction_toFormatString(
                    this: *const root::lc3::core::IInstruction,
                ) -> root::std::string;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNK3lc34core12IInstruction13toValueStringB5cxx11Ev"]
                pub fn IInstruction_toValueString(
                    this: *const root::lc3::core::IInstruction,
                ) -> root::std::string;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core12IInstruction23buildSysCallEnterHelperERKNS0_12MachineStateEjNS2_11SysCallTypeESt8functionIFjjEE"]
                pub fn IInstruction_buildSysCallEnterHelper(
                    state: *const root::lc3::core::MachineState,
                    vector_id: u32,
                    call_type: root::lc3::core::MachineState_SysCallType,
                    computeNewPSRValue: [u64; 4usize],
                ) -> root::std::vector;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core12IInstruction22buildSysCallExitHelperERKNS0_12MachineStateENS2_11SysCallTypeE"]
                pub fn IInstruction_buildSysCallExitHelper(
                    state: *const root::lc3::core::MachineState,
                    call_type: root::lc3::core::MachineState_SysCallType,
                ) -> root::std::vector;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core12IInstructionC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorISt10shared_ptrINS0_8IOperandEESaISD_EE"]
                pub fn IInstruction_IInstruction(
                    this: *mut root::lc3::core::IInstruction,
                    name: *const root::std::string,
                    operands: *const root::std::vector,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core12IInstructionC2ERKS1_"]
                pub fn IInstruction_IInstruction1(
                    this: *mut root::lc3::core::IInstruction,
                    that: *const root::lc3::core::IInstruction,
                );
            }
            impl Default for IInstruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            impl IInstruction {
                #[inline]
                pub unsafe fn getNumOperands(&self) -> u32 {
                    IInstruction_getNumOperands(self)
                }
                #[inline]
                pub unsafe fn assignOperands(&mut self, encoded_inst: u32) {
                    IInstruction_assignOperands(self, encoded_inst)
                }
                #[inline]
                pub unsafe fn toFormatString(&self) -> root::std::string {
                    IInstruction_toFormatString(self)
                }
                #[inline]
                pub unsafe fn toValueString(&self) -> root::std::string {
                    IInstruction_toValueString(self)
                }
                #[inline]
                pub unsafe fn buildSysCallEnterHelper(
                    state: *const root::lc3::core::MachineState,
                    vector_id: u32,
                    call_type: root::lc3::core::MachineState_SysCallType,
                    computeNewPSRValue: [u64; 4usize],
                ) -> root::std::vector {
                    IInstruction_buildSysCallEnterHelper(
                        state,
                        vector_id,
                        call_type,
                        computeNewPSRValue,
                    )
                }
                #[inline]
                pub unsafe fn buildSysCallExitHelper(
                    state: *const root::lc3::core::MachineState,
                    call_type: root::lc3::core::MachineState_SysCallType,
                ) -> root::std::vector {
                    IInstruction_buildSysCallExitHelper(state, call_type)
                }
                #[inline]
                pub unsafe fn new(
                    name: *const root::std::string,
                    operands: *const root::std::vector,
                ) -> Self {
                    let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                    IInstruction_IInstruction(
                        __bindgen_tmp.as_mut_ptr(),
                        name,
                        operands,
                    );
                    __bindgen_tmp.assume_init()
                }
                #[inline]
                pub unsafe fn new1(
                    that: *const root::lc3::core::IInstruction,
                ) -> Self {
                    let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                    IInstruction_IInstruction1(
                        __bindgen_tmp.as_mut_ptr(),
                        that,
                    );
                    __bindgen_tmp.assume_init()
                }
            }
            #[repr(C)]
            pub struct InstructionHandler__bindgen_vtable(
                ::std::os::raw::c_void,
            );
            #[repr(C)]
            pub struct InstructionHandler {
                pub vtable_: *const InstructionHandler__bindgen_vtable,
                pub instructions: root::std::vector,
                pub regs: root::lc3::core::SymbolTable,
            }
            #[test]
            fn bindgen_test_layout_InstructionHandler() {
                assert_eq!(
                    ::std::mem::size_of::<InstructionHandler>(),
                    80usize,
                    concat!("Size of: ", stringify!(InstructionHandler))
                );
                assert_eq!(
                    ::std::mem::align_of::<InstructionHandler>(),
                    8usize,
                    concat!("Alignment of ", stringify!(InstructionHandler))
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<InstructionHandler>()))
                            .instructions as *const _
                            as usize
                    },
                    8usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(InstructionHandler),
                        "::",
                        stringify!(instructions)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<InstructionHandler>())).regs
                            as *const _ as usize
                    },
                    32usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(InstructionHandler),
                        "::",
                        stringify!(regs)
                    )
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core18InstructionHandlerC1Ev"]
                pub fn InstructionHandler_InstructionHandler(
                    this: *mut root::lc3::core::InstructionHandler,
                );
            }
            impl Default for InstructionHandler {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            impl InstructionHandler {
                #[inline]
                pub unsafe fn new() -> Self {
                    let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                    InstructionHandler_InstructionHandler(
                        __bindgen_tmp.as_mut_ptr(),
                    );
                    __bindgen_tmp.assume_init()
                }
            }
            #[repr(C)]
            pub struct FixedOperand {
                pub _base: root::lc3::core::IOperand,
            }
            #[test]
            fn bindgen_test_layout_FixedOperand() {
                assert_eq!(
                    ::std::mem::size_of::<FixedOperand>(),
                    56usize,
                    concat!("Size of: ", stringify!(FixedOperand))
                );
                assert_eq!(
                    ::std::mem::align_of::<FixedOperand>(),
                    8usize,
                    concat!("Alignment of ", stringify!(FixedOperand))
                );
            }
            impl Default for FixedOperand {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core12FixedOperand6encodeERKNS0_5asmbl9StatementERKNS2_14StatementPieceERKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessISF_ESaISt4pairIKSF_jEEESO_RNS_5utils15AssemblerLoggerE"]
                pub fn FixedOperand_encode(
                    this: *mut ::std::os::raw::c_void,
                    statement: *const root::lc3::core::asmbl::Statement,
                    piece: *const root::lc3::core::asmbl::StatementPiece,
                    regs: *const root::lc3::core::SymbolTable,
                    symbols: *const root::lc3::core::SymbolTable,
                    logger: *mut root::lc3::utils::AssemblerLogger,
                ) -> root::lc3::optional<u32>;
            }
            #[repr(C)]
            pub struct RegOperand {
                pub _base: root::lc3::core::IOperand,
            }
            #[test]
            fn bindgen_test_layout_RegOperand() {
                assert_eq!(
                    ::std::mem::size_of::<RegOperand>(),
                    56usize,
                    concat!("Size of: ", stringify!(RegOperand))
                );
                assert_eq!(
                    ::std::mem::align_of::<RegOperand>(),
                    8usize,
                    concat!("Alignment of ", stringify!(RegOperand))
                );
            }
            impl Default for RegOperand {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core10RegOperand6encodeERKNS0_5asmbl9StatementERKNS2_14StatementPieceERKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessISF_ESaISt4pairIKSF_jEEESO_RNS_5utils15AssemblerLoggerE"]
                pub fn RegOperand_encode(
                    this: *mut ::std::os::raw::c_void,
                    statement: *const root::lc3::core::asmbl::Statement,
                    piece: *const root::lc3::core::asmbl::StatementPiece,
                    regs: *const root::lc3::core::SymbolTable,
                    symbols: *const root::lc3::core::SymbolTable,
                    logger: *mut root::lc3::utils::AssemblerLogger,
                ) -> root::lc3::optional<u32>;
            }
            #[repr(C)]
            pub struct NumOperand {
                pub _base: root::lc3::core::IOperand,
                pub sext: bool,
            }
            #[test]
            fn bindgen_test_layout_NumOperand() {
                assert_eq!(
                    ::std::mem::size_of::<NumOperand>(),
                    64usize,
                    concat!("Size of: ", stringify!(NumOperand))
                );
                assert_eq!(
                    ::std::mem::align_of::<NumOperand>(),
                    8usize,
                    concat!("Alignment of ", stringify!(NumOperand))
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<NumOperand>())).sext as *const _
                            as usize
                    },
                    56usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(NumOperand),
                        "::",
                        stringify!(sext)
                    )
                );
            }
            impl Default for NumOperand {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core10NumOperand6encodeERKNS0_5asmbl9StatementERKNS2_14StatementPieceERKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessISF_ESaISt4pairIKSF_jEEESO_RNS_5utils15AssemblerLoggerE"]
                pub fn NumOperand_encode(
                    this: *mut ::std::os::raw::c_void,
                    statement: *const root::lc3::core::asmbl::Statement,
                    piece: *const root::lc3::core::asmbl::StatementPiece,
                    regs: *const root::lc3::core::SymbolTable,
                    symbols: *const root::lc3::core::SymbolTable,
                    logger: *mut root::lc3::utils::AssemblerLogger,
                ) -> root::lc3::optional<u32>;
            }
            #[repr(C)]
            pub struct LabelOperand {
                pub _base: root::lc3::core::IOperand,
            }
            #[test]
            fn bindgen_test_layout_LabelOperand() {
                assert_eq!(
                    ::std::mem::size_of::<LabelOperand>(),
                    56usize,
                    concat!("Size of: ", stringify!(LabelOperand))
                );
                assert_eq!(
                    ::std::mem::align_of::<LabelOperand>(),
                    8usize,
                    concat!("Alignment of ", stringify!(LabelOperand))
                );
            }
            impl Default for LabelOperand {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core12LabelOperand6encodeERKNS0_5asmbl9StatementERKNS2_14StatementPieceERKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessISF_ESaISt4pairIKSF_jEEESO_RNS_5utils15AssemblerLoggerE"]
                pub fn LabelOperand_encode(
                    this: *mut ::std::os::raw::c_void,
                    statement: *const root::lc3::core::asmbl::Statement,
                    piece: *const root::lc3::core::asmbl::StatementPiece,
                    regs: *const root::lc3::core::SymbolTable,
                    symbols: *const root::lc3::core::SymbolTable,
                    logger: *mut root::lc3::utils::AssemblerLogger,
                ) -> root::lc3::optional<u32>;
            }
            #[repr(C)]
            pub struct ADDRegInstruction {
                pub _base: root::lc3::core::IInstruction,
            }
            #[test]
            fn bindgen_test_layout_ADDRegInstruction() {
                assert_eq!(
                    ::std::mem::size_of::<ADDRegInstruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(ADDRegInstruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<ADDRegInstruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(ADDRegInstruction))
                );
            }
            impl Default for ADDRegInstruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core17ADDRegInstruction7executeERKNS0_12MachineStateE"]
                pub fn ADDRegInstruction_execute(
                    this: *mut ::std::os::raw::c_void,
                    state: *const root::lc3::core::MachineState,
                ) -> root::std::vector;
            }
            #[repr(C)]
            pub struct ADDImmInstruction {
                pub _base: root::lc3::core::IInstruction,
            }
            #[test]
            fn bindgen_test_layout_ADDImmInstruction() {
                assert_eq!(
                    ::std::mem::size_of::<ADDImmInstruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(ADDImmInstruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<ADDImmInstruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(ADDImmInstruction))
                );
            }
            impl Default for ADDImmInstruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core17ADDImmInstruction7executeERKNS0_12MachineStateE"]
                pub fn ADDImmInstruction_execute(
                    this: *mut ::std::os::raw::c_void,
                    state: *const root::lc3::core::MachineState,
                ) -> root::std::vector;
            }
            #[repr(C)]
            pub struct ANDRegInstruction {
                pub _base: root::lc3::core::IInstruction,
            }
            #[test]
            fn bindgen_test_layout_ANDRegInstruction() {
                assert_eq!(
                    ::std::mem::size_of::<ANDRegInstruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(ANDRegInstruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<ANDRegInstruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(ANDRegInstruction))
                );
            }
            impl Default for ANDRegInstruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core17ANDRegInstruction7executeERKNS0_12MachineStateE"]
                pub fn ANDRegInstruction_execute(
                    this: *mut ::std::os::raw::c_void,
                    state: *const root::lc3::core::MachineState,
                ) -> root::std::vector;
            }
            #[repr(C)]
            pub struct ANDImmInstruction {
                pub _base: root::lc3::core::IInstruction,
            }
            #[test]
            fn bindgen_test_layout_ANDImmInstruction() {
                assert_eq!(
                    ::std::mem::size_of::<ANDImmInstruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(ANDImmInstruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<ANDImmInstruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(ANDImmInstruction))
                );
            }
            impl Default for ANDImmInstruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core17ANDImmInstruction7executeERKNS0_12MachineStateE"]
                pub fn ANDImmInstruction_execute(
                    this: *mut ::std::os::raw::c_void,
                    state: *const root::lc3::core::MachineState,
                ) -> root::std::vector;
            }
            #[repr(C)]
            pub struct BRInstruction {
                pub _base: root::lc3::core::IInstruction,
            }
            #[test]
            fn bindgen_test_layout_BRInstruction() {
                assert_eq!(
                    ::std::mem::size_of::<BRInstruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(BRInstruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<BRInstruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(BRInstruction))
                );
            }
            impl Default for BRInstruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core13BRInstruction7executeERKNS0_12MachineStateE"]
                pub fn BRInstruction_execute(
                    this: *mut ::std::os::raw::c_void,
                    state: *const root::lc3::core::MachineState,
                ) -> root::std::vector;
            }
            #[repr(C)]
            pub struct BRnInstruction {
                pub _base: root::lc3::core::BRInstruction,
            }
            #[test]
            fn bindgen_test_layout_BRnInstruction() {
                assert_eq!(
                    ::std::mem::size_of::<BRnInstruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(BRnInstruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<BRnInstruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(BRnInstruction))
                );
            }
            impl Default for BRnInstruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            pub struct BRzInstruction {
                pub _base: root::lc3::core::BRInstruction,
            }
            #[test]
            fn bindgen_test_layout_BRzInstruction() {
                assert_eq!(
                    ::std::mem::size_of::<BRzInstruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(BRzInstruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<BRzInstruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(BRzInstruction))
                );
            }
            impl Default for BRzInstruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            pub struct BRpInstruction {
                pub _base: root::lc3::core::BRInstruction,
            }
            #[test]
            fn bindgen_test_layout_BRpInstruction() {
                assert_eq!(
                    ::std::mem::size_of::<BRpInstruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(BRpInstruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<BRpInstruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(BRpInstruction))
                );
            }
            impl Default for BRpInstruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            pub struct BRnzInstruction {
                pub _base: root::lc3::core::BRInstruction,
            }
            #[test]
            fn bindgen_test_layout_BRnzInstruction() {
                assert_eq!(
                    ::std::mem::size_of::<BRnzInstruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(BRnzInstruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<BRnzInstruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(BRnzInstruction))
                );
            }
            impl Default for BRnzInstruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            pub struct BRzpInstruction {
                pub _base: root::lc3::core::BRInstruction,
            }
            #[test]
            fn bindgen_test_layout_BRzpInstruction() {
                assert_eq!(
                    ::std::mem::size_of::<BRzpInstruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(BRzpInstruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<BRzpInstruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(BRzpInstruction))
                );
            }
            impl Default for BRzpInstruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            pub struct BRnpInstruction {
                pub _base: root::lc3::core::BRInstruction,
            }
            #[test]
            fn bindgen_test_layout_BRnpInstruction() {
                assert_eq!(
                    ::std::mem::size_of::<BRnpInstruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(BRnpInstruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<BRnpInstruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(BRnpInstruction))
                );
            }
            impl Default for BRnpInstruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            pub struct BRnzpInstruction {
                pub _base: root::lc3::core::BRInstruction,
            }
            #[test]
            fn bindgen_test_layout_BRnzpInstruction() {
                assert_eq!(
                    ::std::mem::size_of::<BRnzpInstruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(BRnzpInstruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<BRnzpInstruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(BRnzpInstruction))
                );
            }
            impl Default for BRnzpInstruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            pub struct NOP0Instruction {
                pub _base: root::lc3::core::BRInstruction,
            }
            #[test]
            fn bindgen_test_layout_NOP0Instruction() {
                assert_eq!(
                    ::std::mem::size_of::<NOP0Instruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(NOP0Instruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<NOP0Instruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(NOP0Instruction))
                );
            }
            impl Default for NOP0Instruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            pub struct NOP1Instruction {
                pub _base: root::lc3::core::BRInstruction,
            }
            #[test]
            fn bindgen_test_layout_NOP1Instruction() {
                assert_eq!(
                    ::std::mem::size_of::<NOP1Instruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(NOP1Instruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<NOP1Instruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(NOP1Instruction))
                );
            }
            impl Default for NOP1Instruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            pub struct JMPInstruction {
                pub _base: root::lc3::core::IInstruction,
            }
            #[test]
            fn bindgen_test_layout_JMPInstruction() {
                assert_eq!(
                    ::std::mem::size_of::<JMPInstruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(JMPInstruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<JMPInstruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(JMPInstruction))
                );
            }
            impl Default for JMPInstruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core14JMPInstruction7executeERKNS0_12MachineStateE"]
                pub fn JMPInstruction_execute(
                    this: *mut ::std::os::raw::c_void,
                    state: *const root::lc3::core::MachineState,
                ) -> root::std::vector;
            }
            #[repr(C)]
            pub struct JSRInstruction {
                pub _base: root::lc3::core::IInstruction,
            }
            #[test]
            fn bindgen_test_layout_JSRInstruction() {
                assert_eq!(
                    ::std::mem::size_of::<JSRInstruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(JSRInstruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<JSRInstruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(JSRInstruction))
                );
            }
            impl Default for JSRInstruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core14JSRInstruction7executeERKNS0_12MachineStateE"]
                pub fn JSRInstruction_execute(
                    this: *mut ::std::os::raw::c_void,
                    state: *const root::lc3::core::MachineState,
                ) -> root::std::vector;
            }
            #[repr(C)]
            pub struct JSRRInstruction {
                pub _base: root::lc3::core::IInstruction,
            }
            #[test]
            fn bindgen_test_layout_JSRRInstruction() {
                assert_eq!(
                    ::std::mem::size_of::<JSRRInstruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(JSRRInstruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<JSRRInstruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(JSRRInstruction))
                );
            }
            impl Default for JSRRInstruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core15JSRRInstruction7executeERKNS0_12MachineStateE"]
                pub fn JSRRInstruction_execute(
                    this: *mut ::std::os::raw::c_void,
                    state: *const root::lc3::core::MachineState,
                ) -> root::std::vector;
            }
            #[repr(C)]
            pub struct LDInstruction {
                pub _base: root::lc3::core::IInstruction,
            }
            #[test]
            fn bindgen_test_layout_LDInstruction() {
                assert_eq!(
                    ::std::mem::size_of::<LDInstruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(LDInstruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<LDInstruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(LDInstruction))
                );
            }
            impl Default for LDInstruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core13LDInstruction7executeERKNS0_12MachineStateE"]
                pub fn LDInstruction_execute(
                    this: *mut ::std::os::raw::c_void,
                    state: *const root::lc3::core::MachineState,
                ) -> root::std::vector;
            }
            #[repr(C)]
            pub struct LDIInstruction {
                pub _base: root::lc3::core::IInstruction,
            }
            #[test]
            fn bindgen_test_layout_LDIInstruction() {
                assert_eq!(
                    ::std::mem::size_of::<LDIInstruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(LDIInstruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<LDIInstruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(LDIInstruction))
                );
            }
            impl Default for LDIInstruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core14LDIInstruction7executeERKNS0_12MachineStateE"]
                pub fn LDIInstruction_execute(
                    this: *mut ::std::os::raw::c_void,
                    state: *const root::lc3::core::MachineState,
                ) -> root::std::vector;
            }
            #[repr(C)]
            pub struct LDRInstruction {
                pub _base: root::lc3::core::IInstruction,
            }
            #[test]
            fn bindgen_test_layout_LDRInstruction() {
                assert_eq!(
                    ::std::mem::size_of::<LDRInstruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(LDRInstruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<LDRInstruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(LDRInstruction))
                );
            }
            impl Default for LDRInstruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core14LDRInstruction7executeERKNS0_12MachineStateE"]
                pub fn LDRInstruction_execute(
                    this: *mut ::std::os::raw::c_void,
                    state: *const root::lc3::core::MachineState,
                ) -> root::std::vector;
            }
            #[repr(C)]
            pub struct LEAInstruction {
                pub _base: root::lc3::core::IInstruction,
            }
            #[test]
            fn bindgen_test_layout_LEAInstruction() {
                assert_eq!(
                    ::std::mem::size_of::<LEAInstruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(LEAInstruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<LEAInstruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(LEAInstruction))
                );
            }
            impl Default for LEAInstruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core14LEAInstruction7executeERKNS0_12MachineStateE"]
                pub fn LEAInstruction_execute(
                    this: *mut ::std::os::raw::c_void,
                    state: *const root::lc3::core::MachineState,
                ) -> root::std::vector;
            }
            #[repr(C)]
            pub struct NOTInstruction {
                pub _base: root::lc3::core::IInstruction,
            }
            #[test]
            fn bindgen_test_layout_NOTInstruction() {
                assert_eq!(
                    ::std::mem::size_of::<NOTInstruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(NOTInstruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<NOTInstruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(NOTInstruction))
                );
            }
            impl Default for NOTInstruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core14NOTInstruction7executeERKNS0_12MachineStateE"]
                pub fn NOTInstruction_execute(
                    this: *mut ::std::os::raw::c_void,
                    state: *const root::lc3::core::MachineState,
                ) -> root::std::vector;
            }
            #[repr(C)]
            pub struct RETInstruction {
                pub _base: root::lc3::core::JMPInstruction,
            }
            #[test]
            fn bindgen_test_layout_RETInstruction() {
                assert_eq!(
                    ::std::mem::size_of::<RETInstruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(RETInstruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<RETInstruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(RETInstruction))
                );
            }
            impl Default for RETInstruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            pub struct RTIInstruction {
                pub _base: root::lc3::core::IInstruction,
            }
            #[test]
            fn bindgen_test_layout_RTIInstruction() {
                assert_eq!(
                    ::std::mem::size_of::<RTIInstruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(RTIInstruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<RTIInstruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(RTIInstruction))
                );
            }
            impl Default for RTIInstruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core14RTIInstruction7executeERKNS0_12MachineStateE"]
                pub fn RTIInstruction_execute(
                    this: *mut ::std::os::raw::c_void,
                    state: *const root::lc3::core::MachineState,
                ) -> root::std::vector;
            }
            #[repr(C)]
            pub struct STInstruction {
                pub _base: root::lc3::core::IInstruction,
            }
            #[test]
            fn bindgen_test_layout_STInstruction() {
                assert_eq!(
                    ::std::mem::size_of::<STInstruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(STInstruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<STInstruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(STInstruction))
                );
            }
            impl Default for STInstruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core13STInstruction7executeERKNS0_12MachineStateE"]
                pub fn STInstruction_execute(
                    this: *mut ::std::os::raw::c_void,
                    state: *const root::lc3::core::MachineState,
                ) -> root::std::vector;
            }
            #[repr(C)]
            pub struct STIInstruction {
                pub _base: root::lc3::core::IInstruction,
            }
            #[test]
            fn bindgen_test_layout_STIInstruction() {
                assert_eq!(
                    ::std::mem::size_of::<STIInstruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(STIInstruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<STIInstruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(STIInstruction))
                );
            }
            impl Default for STIInstruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core14STIInstruction7executeERKNS0_12MachineStateE"]
                pub fn STIInstruction_execute(
                    this: *mut ::std::os::raw::c_void,
                    state: *const root::lc3::core::MachineState,
                ) -> root::std::vector;
            }
            #[repr(C)]
            pub struct STRInstruction {
                pub _base: root::lc3::core::IInstruction,
            }
            #[test]
            fn bindgen_test_layout_STRInstruction() {
                assert_eq!(
                    ::std::mem::size_of::<STRInstruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(STRInstruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<STRInstruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(STRInstruction))
                );
            }
            impl Default for STRInstruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core14STRInstruction7executeERKNS0_12MachineStateE"]
                pub fn STRInstruction_execute(
                    this: *mut ::std::os::raw::c_void,
                    state: *const root::lc3::core::MachineState,
                ) -> root::std::vector;
            }
            #[repr(C)]
            pub struct TRAPInstruction {
                pub _base: root::lc3::core::IInstruction,
            }
            #[test]
            fn bindgen_test_layout_TRAPInstruction() {
                assert_eq!(
                    ::std::mem::size_of::<TRAPInstruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(TRAPInstruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<TRAPInstruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(TRAPInstruction))
                );
            }
            impl Default for TRAPInstruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core15TRAPInstruction7executeERKNS0_12MachineStateE"]
                pub fn TRAPInstruction_execute(
                    this: *mut ::std::os::raw::c_void,
                    state: *const root::lc3::core::MachineState,
                ) -> root::std::vector;
            }
            #[repr(C)]
            pub struct GETCInstruction {
                pub _base: root::lc3::core::TRAPInstruction,
            }
            #[test]
            fn bindgen_test_layout_GETCInstruction() {
                assert_eq!(
                    ::std::mem::size_of::<GETCInstruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(GETCInstruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<GETCInstruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(GETCInstruction))
                );
            }
            impl Default for GETCInstruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            pub struct OUTInstruction {
                pub _base: root::lc3::core::TRAPInstruction,
            }
            #[test]
            fn bindgen_test_layout_OUTInstruction() {
                assert_eq!(
                    ::std::mem::size_of::<OUTInstruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(OUTInstruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<OUTInstruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(OUTInstruction))
                );
            }
            impl Default for OUTInstruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            pub struct PUTCInstruction {
                pub _base: root::lc3::core::TRAPInstruction,
            }
            #[test]
            fn bindgen_test_layout_PUTCInstruction() {
                assert_eq!(
                    ::std::mem::size_of::<PUTCInstruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(PUTCInstruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<PUTCInstruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(PUTCInstruction))
                );
            }
            impl Default for PUTCInstruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            pub struct PUTSInstruction {
                pub _base: root::lc3::core::TRAPInstruction,
            }
            #[test]
            fn bindgen_test_layout_PUTSInstruction() {
                assert_eq!(
                    ::std::mem::size_of::<PUTSInstruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(PUTSInstruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<PUTSInstruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(PUTSInstruction))
                );
            }
            impl Default for PUTSInstruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            pub struct INInstruction {
                pub _base: root::lc3::core::TRAPInstruction,
            }
            #[test]
            fn bindgen_test_layout_INInstruction() {
                assert_eq!(
                    ::std::mem::size_of::<INInstruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(INInstruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<INInstruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(INInstruction))
                );
            }
            impl Default for INInstruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            pub struct PUTSPInstruction {
                pub _base: root::lc3::core::TRAPInstruction,
            }
            #[test]
            fn bindgen_test_layout_PUTSPInstruction() {
                assert_eq!(
                    ::std::mem::size_of::<PUTSPInstruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(PUTSPInstruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<PUTSPInstruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(PUTSPInstruction))
                );
            }
            impl Default for PUTSPInstruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            pub struct HALTInstruction {
                pub _base: root::lc3::core::TRAPInstruction,
            }
            #[test]
            fn bindgen_test_layout_HALTInstruction() {
                assert_eq!(
                    ::std::mem::size_of::<HALTInstruction>(),
                    64usize,
                    concat!("Size of: ", stringify!(HALTInstruction))
                );
                assert_eq!(
                    ::std::mem::align_of::<HALTInstruction>(),
                    8usize,
                    concat!("Alignment of ", stringify!(HALTInstruction))
                );
            }
            impl Default for HALTInstruction {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            pub struct Assembler {
                pub file_buffer: root::std::vector,
                pub logger: root::lc3::utils::AssemblerLogger,
                pub enable_liberal_asm: bool,
                pub encoder: root::lc3::core::asmbl::InstructionEncoder,
            }
            #[test]
            fn bindgen_test_layout_Assembler() {
                assert_eq!(
                    ::std::mem::size_of::<Assembler>(),
                    224usize,
                    concat!("Size of: ", stringify!(Assembler))
                );
                assert_eq!(
                    ::std::mem::align_of::<Assembler>(),
                    8usize,
                    concat!("Alignment of ", stringify!(Assembler))
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<Assembler>())).file_buffer
                            as *const _ as usize
                    },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(Assembler),
                        "::",
                        stringify!(file_buffer)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<Assembler>())).logger as *const _
                            as usize
                    },
                    24usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(Assembler),
                        "::",
                        stringify!(logger)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<Assembler>())).enable_liberal_asm
                            as *const _ as usize
                    },
                    72usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(Assembler),
                        "::",
                        stringify!(enable_liberal_asm)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<Assembler>())).encoder
                            as *const _ as usize
                    },
                    80usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(Assembler),
                        "::",
                        stringify!(encoder)
                    )
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core9Assembler8assembleB5cxx11ERSi"]
                pub fn Assembler_assemble(
                    this: *mut root::lc3::core::Assembler,
                    buffer: *mut root::std::istream,
                ) -> root::std::shared_ptr;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core9Assembler13setLiberalAsmEb"]
                pub fn Assembler_setLiberalAsm(
                    this: *mut root::lc3::core::Assembler,
                    enable_liberal_asm: bool,
                );
            }
            impl Default for Assembler {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            impl Assembler {
                #[inline]
                pub unsafe fn assemble(
                    &mut self,
                    buffer: *mut root::std::istream,
                ) -> root::std::shared_ptr {
                    Assembler_assemble(self, buffer)
                }
                #[inline]
                pub unsafe fn setLiberalAsm(
                    &mut self,
                    enable_liberal_asm: bool,
                ) {
                    Assembler_setLiberalAsm(self, enable_liberal_asm)
                }
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct Converter {
                pub logger: root::lc3::utils::Logger,
            }
            #[test]
            fn bindgen_test_layout_Converter() {
                assert_eq!(
                    ::std::mem::size_of::<Converter>(),
                    16usize,
                    concat!("Size of: ", stringify!(Converter))
                );
                assert_eq!(
                    ::std::mem::align_of::<Converter>(),
                    8usize,
                    concat!("Alignment of ", stringify!(Converter))
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<Converter>())).logger as *const _
                            as usize
                    },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(Converter),
                        "::",
                        stringify!(logger)
                    )
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core9Converter10convertBinB5cxx11ERSi"]
                pub fn Converter_convertBin(
                    this: *mut root::lc3::core::Converter,
                    buffer: *mut root::std::istream,
                ) -> root::std::shared_ptr;
            }
            impl Default for Converter {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            impl Converter {
                #[inline]
                pub unsafe fn convertBin(
                    &mut self,
                    buffer: *mut root::std::istream,
                ) -> root::std::shared_ptr {
                    Converter_convertBin(self, buffer)
                }
            }
            pub mod sim {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                #[repr(C)]
                pub struct InstructionDecoder {
                    pub _base: root::lc3::core::InstructionHandler,
                    pub instructions_by_opcode: root::std::map,
                }
                #[test]
                fn bindgen_test_layout_InstructionDecoder() {
                    assert_eq!(
                        ::std::mem::size_of::<InstructionDecoder>(),
                        128usize,
                        concat!("Size of: ", stringify!(InstructionDecoder))
                    );
                    assert_eq!(
                        ::std::mem::align_of::<InstructionDecoder>(),
                        8usize,
                        concat!(
                            "Alignment of ",
                            stringify!(InstructionDecoder)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<InstructionDecoder>()))
                                .instructions_by_opcode
                                as *const _ as usize
                        },
                        80usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(InstructionDecoder),
                            "::",
                            stringify!(instructions_by_opcode)
                        )
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZNK3lc34core3sim18InstructionDecoder25findInstructionByEncodingEj"]
                    pub fn InstructionDecoder_findInstructionByEncoding(
                        this: *const root::lc3::core::sim::InstructionDecoder,
                        encoding: u32,
                    ) -> root::lc3::optional<root::lc3::core::PIInstruction>;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3lc34core3sim18InstructionDecoderC1Ev"]
                    pub fn InstructionDecoder_InstructionDecoder(
                        this: *mut root::lc3::core::sim::InstructionDecoder,
                    );
                }
                impl Default for InstructionDecoder {
                    fn default() -> Self {
                        unsafe { ::std::mem::zeroed() }
                    }
                }
                impl InstructionDecoder {
                    #[inline]
                    pub unsafe fn findInstructionByEncoding(
                        &self,
                        encoding: u32,
                    ) -> root::lc3::optional<root::lc3::core::PIInstruction>
                    {
                        InstructionDecoder_findInstructionByEncoding(
                            self, encoding,
                        )
                    }
                    #[inline]
                    pub unsafe fn new() -> Self {
                        let mut __bindgen_tmp =
                            ::std::mem::MaybeUninit::uninit();
                        InstructionDecoder_InstructionDecoder(
                            __bindgen_tmp.as_mut_ptr(),
                        );
                        __bindgen_tmp.assume_init()
                    }
                }
            }
            #[repr(C)]
            pub struct Simulator {
                pub decoder: root::lc3::core::sim::InstructionDecoder,
                pub state: root::lc3::core::MachineState,
                pub logger: root::lc3::utils::Logger,
                pub inputter: *mut root::lc3::utils::IInputter,
                pub threaded_input: bool,
                pub collecting_input: root::std::atomic<bool>,
            }
            #[test]
            fn bindgen_test_layout_Simulator() {
                assert_eq!(
                    ::std::mem::size_of::<Simulator>(),
                    632usize,
                    concat!("Size of: ", stringify!(Simulator))
                );
                assert_eq!(
                    ::std::mem::align_of::<Simulator>(),
                    8usize,
                    concat!("Alignment of ", stringify!(Simulator))
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<Simulator>())).decoder
                            as *const _ as usize
                    },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(Simulator),
                        "::",
                        stringify!(decoder)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<Simulator>())).state as *const _
                            as usize
                    },
                    128usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(Simulator),
                        "::",
                        stringify!(state)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<Simulator>())).logger as *const _
                            as usize
                    },
                    600usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(Simulator),
                        "::",
                        stringify!(logger)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<Simulator>())).inputter
                            as *const _ as usize
                    },
                    616usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(Simulator),
                        "::",
                        stringify!(inputter)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<Simulator>())).threaded_input
                            as *const _ as usize
                    },
                    624usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(Simulator),
                        "::",
                        stringify!(threaded_input)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<Simulator>())).collecting_input
                            as *const _ as usize
                    },
                    625usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(Simulator),
                        "::",
                        stringify!(collecting_input)
                    )
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core9Simulator7loadObjERSi"]
                pub fn Simulator_loadObj(
                    this: *mut root::lc3::core::Simulator,
                    buffer: *mut root::std::istream,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core9Simulator8simulateEv"]
                pub fn Simulator_simulate(
                    this: *mut root::lc3::core::Simulator,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core9Simulator11enableClockEv"]
                pub fn Simulator_enableClock(
                    this: *mut root::lc3::core::Simulator,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core9Simulator12disableClockEv"]
                pub fn Simulator_disableClock(
                    this: *mut root::lc3::core::Simulator,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZNK3lc34core9Simulator14isClockEnabledEv"]
                pub fn Simulator_isClockEnabled(
                    this: *const root::lc3::core::Simulator,
                ) -> bool;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core9Simulator12reinitializeEv"]
                pub fn Simulator_reinitialize(
                    this: *mut root::lc3::core::Simulator,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core9Simulator30registerPreInstructionCallbackESt8functionIFvRNS_3simERNS0_12MachineStateEEE"]
                pub fn Simulator_registerPreInstructionCallback(
                    this: *mut root::lc3::core::Simulator,
                    func: root::lc3::core::callback_func_t,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core9Simulator31registerPostInstructionCallbackESt8functionIFvRNS_3simERNS0_12MachineStateEEE"]
                pub fn Simulator_registerPostInstructionCallback(
                    this: *mut root::lc3::core::Simulator,
                    func: root::lc3::core::callback_func_t,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core9Simulator30registerInterruptEnterCallbackESt8functionIFvRNS_3simERNS0_12MachineStateEEE"]
                pub fn Simulator_registerInterruptEnterCallback(
                    this: *mut root::lc3::core::Simulator,
                    func: root::lc3::core::callback_func_t,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core9Simulator29registerInterruptExitCallbackESt8functionIFvRNS_3simERNS0_12MachineStateEEE"]
                pub fn Simulator_registerInterruptExitCallback(
                    this: *mut root::lc3::core::Simulator,
                    func: root::lc3::core::callback_func_t,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core9Simulator30registerExceptionEnterCallbackESt8functionIFvRNS_3simERNS0_12MachineStateEEE"]
                pub fn Simulator_registerExceptionEnterCallback(
                    this: *mut root::lc3::core::Simulator,
                    func: root::lc3::core::callback_func_t,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core9Simulator29registerExceptionExitCallbackESt8functionIFvRNS_3simERNS0_12MachineStateEEE"]
                pub fn Simulator_registerExceptionExitCallback(
                    this: *mut root::lc3::core::Simulator,
                    func: root::lc3::core::callback_func_t,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core9Simulator24registerSubEnterCallbackESt8functionIFvRNS_3simERNS0_12MachineStateEEE"]
                pub fn Simulator_registerSubEnterCallback(
                    this: *mut root::lc3::core::Simulator,
                    func: root::lc3::core::callback_func_t,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core9Simulator23registerSubExitCallbackESt8functionIFvRNS_3simERNS0_12MachineStateEEE"]
                pub fn Simulator_registerSubExitCallback(
                    this: *mut root::lc3::core::Simulator,
                    func: root::lc3::core::callback_func_t,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core9Simulator28registerWaitForInputCallbackESt8functionIFvRNS_3simERNS0_12MachineStateEEE"]
                pub fn Simulator_registerWaitForInputCallback(
                    this: *mut root::lc3::core::Simulator,
                    func: root::lc3::core::callback_func_t,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core9Simulator18setIgnorePrivilegeEb"]
                pub fn Simulator_setIgnorePrivilege(
                    this: *mut root::lc3::core::Simulator,
                    ignore: bool,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core9SimulatorC1ERNS_3simERNS_5utils8IPrinterERNS4_9IInputterEjb"]
                pub fn Simulator_Simulator(
                    this: *mut root::lc3::core::Simulator,
                    simulator: *mut root::lc3::sim,
                    printer: *mut root::lc3::utils::IPrinter,
                    inputter: *mut root::lc3::utils::IInputter,
                    print_level: u32,
                    threaded_input: bool,
                );
            }
            impl Default for Simulator {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            impl Simulator {
                #[inline]
                pub unsafe fn loadObj(
                    &mut self,
                    buffer: *mut root::std::istream,
                ) {
                    Simulator_loadObj(self, buffer)
                }
                #[inline]
                pub unsafe fn simulate(&mut self) {
                    Simulator_simulate(self)
                }
                #[inline]
                pub unsafe fn enableClock(&mut self) {
                    Simulator_enableClock(self)
                }
                #[inline]
                pub unsafe fn disableClock(&mut self) {
                    Simulator_disableClock(self)
                }
                #[inline]
                pub unsafe fn isClockEnabled(&self) -> bool {
                    Simulator_isClockEnabled(self)
                }
                #[inline]
                pub unsafe fn reinitialize(&mut self) {
                    Simulator_reinitialize(self)
                }
                #[inline]
                pub unsafe fn registerPreInstructionCallback(
                    &mut self,
                    func: root::lc3::core::callback_func_t,
                ) {
                    Simulator_registerPreInstructionCallback(self, func)
                }
                #[inline]
                pub unsafe fn registerPostInstructionCallback(
                    &mut self,
                    func: root::lc3::core::callback_func_t,
                ) {
                    Simulator_registerPostInstructionCallback(self, func)
                }
                #[inline]
                pub unsafe fn registerInterruptEnterCallback(
                    &mut self,
                    func: root::lc3::core::callback_func_t,
                ) {
                    Simulator_registerInterruptEnterCallback(self, func)
                }
                #[inline]
                pub unsafe fn registerInterruptExitCallback(
                    &mut self,
                    func: root::lc3::core::callback_func_t,
                ) {
                    Simulator_registerInterruptExitCallback(self, func)
                }
                #[inline]
                pub unsafe fn registerExceptionEnterCallback(
                    &mut self,
                    func: root::lc3::core::callback_func_t,
                ) {
                    Simulator_registerExceptionEnterCallback(self, func)
                }
                #[inline]
                pub unsafe fn registerExceptionExitCallback(
                    &mut self,
                    func: root::lc3::core::callback_func_t,
                ) {
                    Simulator_registerExceptionExitCallback(self, func)
                }
                #[inline]
                pub unsafe fn registerSubEnterCallback(
                    &mut self,
                    func: root::lc3::core::callback_func_t,
                ) {
                    Simulator_registerSubEnterCallback(self, func)
                }
                #[inline]
                pub unsafe fn registerSubExitCallback(
                    &mut self,
                    func: root::lc3::core::callback_func_t,
                ) {
                    Simulator_registerSubExitCallback(self, func)
                }
                #[inline]
                pub unsafe fn registerWaitForInputCallback(
                    &mut self,
                    func: root::lc3::core::callback_func_t,
                ) {
                    Simulator_registerWaitForInputCallback(self, func)
                }
                #[inline]
                pub unsafe fn setIgnorePrivilege(&mut self, ignore: bool) {
                    Simulator_setIgnorePrivilege(self, ignore)
                }
                #[inline]
                pub unsafe fn new(
                    simulator: *mut root::lc3::sim,
                    printer: *mut root::lc3::utils::IPrinter,
                    inputter: *mut root::lc3::utils::IInputter,
                    print_level: u32,
                    threaded_input: bool,
                ) -> Self {
                    let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                    Simulator_Simulator(
                        __bindgen_tmp.as_mut_ptr(),
                        simulator,
                        printer,
                        inputter,
                        print_level,
                        threaded_input,
                    );
                    __bindgen_tmp.assume_init()
                }
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc34core8getOSSrcB5cxx11Ev"]
                pub fn getOSSrc() -> root::std::string;
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct optional<T> {
            pub valid: bool,
            pub value: T,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
        }
        impl<T> Default for optional<T> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Breakpoint {
            pub id: u32,
            pub loc: u32,
            pub sim_int: *const root::lc3::sim,
        }
        #[test]
        fn bindgen_test_layout_Breakpoint() {
            assert_eq!(
                ::std::mem::size_of::<Breakpoint>(),
                16usize,
                concat!("Size of: ", stringify!(Breakpoint))
            );
            assert_eq!(
                ::std::mem::align_of::<Breakpoint>(),
                8usize,
                concat!("Alignment of ", stringify!(Breakpoint))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<Breakpoint>())).id as *const _
                        as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Breakpoint),
                    "::",
                    stringify!(id)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<Breakpoint>())).loc as *const _
                        as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Breakpoint),
                    "::",
                    stringify!(loc)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<Breakpoint>())).sim_int as *const _
                        as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Breakpoint),
                    "::",
                    stringify!(sim_int)
                )
            );
        }
        impl Default for Breakpoint {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub type callback_func_t = [u64; 4usize];
        pub type breakpoint_callback_func_t = [u64; 4usize];
        #[repr(C)]
        pub struct sim {
            pub printer: *mut root::lc3::utils::IPrinter,
            pub simulator: root::lc3::core::Simulator,
            pub inst_exec_count: u64,
            pub total_inst_limit: u64,
            pub inst_limit: u64,
            pub remaining_inst_count: i64,
            pub sub_depth: i32,
            pub hit_internal_exception: bool,
            pub pre_instruction_callback_v: bool,
            pub post_instruction_callback_v: bool,
            pub interrupt_enter_callback_v: bool,
            pub interrupt_exit_callback_v: bool,
            pub exception_enter_callback_v: bool,
            pub exception_exit_callback_v: bool,
            pub sub_enter_callback_v: bool,
            pub sub_exit_callback_v: bool,
            pub wait_for_input_callback_v: bool,
            pub breakpoint_callback_v: bool,
            pub pre_instruction_callback: root::lc3::callback_func_t,
            pub post_instruction_callback: root::lc3::callback_func_t,
            pub interrupt_enter_callback: root::lc3::callback_func_t,
            pub interrupt_exit_callback: root::lc3::callback_func_t,
            pub exception_enter_callback: root::lc3::callback_func_t,
            pub exception_exit_callback: root::lc3::callback_func_t,
            pub sub_enter_callback: root::lc3::callback_func_t,
            pub sub_exit_callback: root::lc3::callback_func_t,
            pub wait_for_input_callback: root::lc3::callback_func_t,
            pub breakpoint_callback: root::lc3::breakpoint_callback_func_t,
            pub breakpoint_id: u32,
            pub breakpoints: root::std::vector,
            pub propagate_exceptions: bool,
            pub run_type: root::lc3::sim_RunType,
        }
        pub const sim_RunType_UNTIL_INPUT: root::lc3::sim_RunType = 0;
        pub const sim_RunType_UNTIL_HALT: root::lc3::sim_RunType = 1;
        pub const sim_RunType_UNTIL_DEPTH: root::lc3::sim_RunType = 2;
        pub const sim_RunType_NORMAL: root::lc3::sim_RunType = 3;
        pub type sim_RunType = i32;
        #[test]
        fn bindgen_test_layout_sim() {
            assert_eq!(
                ::std::mem::size_of::<sim>(),
                1048usize,
                concat!("Size of: ", stringify!(sim))
            );
            assert_eq!(
                ::std::mem::align_of::<sim>(),
                8usize,
                concat!("Alignment of ", stringify!(sim))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<sim>())).printer as *const _ as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sim),
                    "::",
                    stringify!(printer)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<sim>())).simulator as *const _
                        as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sim),
                    "::",
                    stringify!(simulator)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<sim>())).inst_exec_count as *const _
                        as usize
                },
                640usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sim),
                    "::",
                    stringify!(inst_exec_count)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<sim>())).total_inst_limit as *const _
                        as usize
                },
                648usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sim),
                    "::",
                    stringify!(total_inst_limit)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<sim>())).inst_limit as *const _
                        as usize
                },
                656usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sim),
                    "::",
                    stringify!(inst_limit)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<sim>())).remaining_inst_count
                        as *const _ as usize
                },
                664usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sim),
                    "::",
                    stringify!(remaining_inst_count)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<sim>())).sub_depth as *const _
                        as usize
                },
                672usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sim),
                    "::",
                    stringify!(sub_depth)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<sim>())).hit_internal_exception
                        as *const _ as usize
                },
                676usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sim),
                    "::",
                    stringify!(hit_internal_exception)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<sim>())).pre_instruction_callback_v
                        as *const _ as usize
                },
                677usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sim),
                    "::",
                    stringify!(pre_instruction_callback_v)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<sim>())).post_instruction_callback_v
                        as *const _ as usize
                },
                678usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sim),
                    "::",
                    stringify!(post_instruction_callback_v)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<sim>())).interrupt_enter_callback_v
                        as *const _ as usize
                },
                679usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sim),
                    "::",
                    stringify!(interrupt_enter_callback_v)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<sim>())).interrupt_exit_callback_v
                        as *const _ as usize
                },
                680usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sim),
                    "::",
                    stringify!(interrupt_exit_callback_v)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<sim>())).exception_enter_callback_v
                        as *const _ as usize
                },
                681usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sim),
                    "::",
                    stringify!(exception_enter_callback_v)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<sim>())).exception_exit_callback_v
                        as *const _ as usize
                },
                682usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sim),
                    "::",
                    stringify!(exception_exit_callback_v)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<sim>())).sub_enter_callback_v
                        as *const _ as usize
                },
                683usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sim),
                    "::",
                    stringify!(sub_enter_callback_v)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<sim>())).sub_exit_callback_v
                        as *const _ as usize
                },
                684usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sim),
                    "::",
                    stringify!(sub_exit_callback_v)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<sim>())).wait_for_input_callback_v
                        as *const _ as usize
                },
                685usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sim),
                    "::",
                    stringify!(wait_for_input_callback_v)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<sim>())).breakpoint_callback_v
                        as *const _ as usize
                },
                686usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sim),
                    "::",
                    stringify!(breakpoint_callback_v)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<sim>())).pre_instruction_callback
                        as *const _ as usize
                },
                688usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sim),
                    "::",
                    stringify!(pre_instruction_callback)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<sim>())).post_instruction_callback
                        as *const _ as usize
                },
                720usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sim),
                    "::",
                    stringify!(post_instruction_callback)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<sim>())).interrupt_enter_callback
                        as *const _ as usize
                },
                752usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sim),
                    "::",
                    stringify!(interrupt_enter_callback)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<sim>())).interrupt_exit_callback
                        as *const _ as usize
                },
                784usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sim),
                    "::",
                    stringify!(interrupt_exit_callback)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<sim>())).exception_enter_callback
                        as *const _ as usize
                },
                816usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sim),
                    "::",
                    stringify!(exception_enter_callback)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<sim>())).exception_exit_callback
                        as *const _ as usize
                },
                848usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sim),
                    "::",
                    stringify!(exception_exit_callback)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<sim>())).sub_enter_callback
                        as *const _ as usize
                },
                880usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sim),
                    "::",
                    stringify!(sub_enter_callback)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<sim>())).sub_exit_callback
                        as *const _ as usize
                },
                912usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sim),
                    "::",
                    stringify!(sub_exit_callback)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<sim>())).wait_for_input_callback
                        as *const _ as usize
                },
                944usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sim),
                    "::",
                    stringify!(wait_for_input_callback)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<sim>())).breakpoint_callback
                        as *const _ as usize
                },
                976usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sim),
                    "::",
                    stringify!(breakpoint_callback)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<sim>())).breakpoint_id as *const _
                        as usize
                },
                1008usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sim),
                    "::",
                    stringify!(breakpoint_id)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<sim>())).breakpoints as *const _
                        as usize
                },
                1016usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sim),
                    "::",
                    stringify!(breakpoints)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<sim>())).propagate_exceptions
                        as *const _ as usize
                },
                1040usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sim),
                    "::",
                    stringify!(propagate_exceptions)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<sim>())).run_type as *const _
                        as usize
                },
                1044usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sim),
                    "::",
                    stringify!(run_type)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim11loadObjFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn sim_loadObjFile(
                this: *mut root::lc3::sim,
                obj_filename: *const root::std::string,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim12reinitializeEv"]
            pub fn sim_reinitialize(this: *mut root::lc3::sim);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim9randomizeEv"]
            pub fn sim_randomize(this: *mut root::lc3::sim);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim7restartEv"]
            pub fn sim_restart(this: *mut root::lc3::sim);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim15setRunInstLimitEm"]
            pub fn sim_setRunInstLimit(
                this: *mut root::lc3::sim,
                inst_limit: u64,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim3runEv"]
            pub fn sim_run(this: *mut root::lc3::sim) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim12runUntilHaltEv"]
            pub fn sim_runUntilHalt(this: *mut root::lc3::sim) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim17runUntilInputPollEv"]
            pub fn sim_runUntilInputPoll(this: *mut root::lc3::sim) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim5pauseEv"]
            pub fn sim_pause(this: *mut root::lc3::sim);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim6stepInEv"]
            pub fn sim_stepIn(this: *mut root::lc3::sim) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim8stepOverEv"]
            pub fn sim_stepOver(this: *mut root::lc3::sim) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim7stepOutEv"]
            pub fn sim_stepOut(this: *mut root::lc3::sim) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim15getMachineStateEv"]
            pub fn sim_getMachineState(
                this: *mut root::lc3::sim,
            ) -> *mut root::lc3::core::MachineState;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK3lc33sim15getMachineStateEv"]
            pub fn sim_getMachineState1(
                this: *const root::lc3::sim,
            ) -> *const root::lc3::core::MachineState;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK3lc33sim16getInstExecCountEv"]
            pub fn sim_getInstExecCount(this: *const root::lc3::sim) -> u64;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK3lc33sim18didExceedInstLimitEv"]
            pub fn sim_didExceedInstLimit(this: *const root::lc3::sim) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK3lc33sim14getBreakpointsEv"]
            pub fn sim_getBreakpoints(
                this: *const root::lc3::sim,
            ) -> *const root::std::vector;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK3lc33sim6getRegEt"]
            pub fn sim_getReg(this: *const root::lc3::sim, id: u16) -> u16;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK3lc33sim6getMemEt"]
            pub fn sim_getMem(this: *const root::lc3::sim, addr: u16) -> u16;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK3lc33sim10getMemLineB5cxx11Et"]
            pub fn sim_getMemLine(
                this: *const root::lc3::sim,
                addr: u16,
            ) -> root::std::string;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK3lc33sim5getPCEv"]
            pub fn sim_getPC(this: *const root::lc3::sim) -> u16;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK3lc33sim6getPSREv"]
            pub fn sim_getPSR(this: *const root::lc3::sim) -> u16;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK3lc33sim6getMCREv"]
            pub fn sim_getMCR(this: *const root::lc3::sim) -> u16;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK3lc33sim5getCCEv"]
            pub fn sim_getCC(
                this: *const root::lc3::sim,
            ) -> ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim6setRegEtt"]
            pub fn sim_setReg(this: *mut root::lc3::sim, id: u16, value: u16);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim6setMemEtt"]
            pub fn sim_setMem(this: *mut root::lc3::sim, addr: u16, value: u16);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim12setMemStringEtRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn sim_setMemString(
                this: *mut root::lc3::sim,
                addr: u16,
                value: *const root::std::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim10setMemLineEtRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn sim_setMemLine(
                this: *mut root::lc3::sim,
                addr: u16,
                value: *const root::std::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim5setPCEt"]
            pub fn sim_setPC(this: *mut root::lc3::sim, value: u16);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim6setPSREt"]
            pub fn sim_setPSR(this: *mut root::lc3::sim, value: u16);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim6setMCREt"]
            pub fn sim_setMCR(this: *mut root::lc3::sim, value: u16);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim5setCCEc"]
            pub fn sim_setCC(
                this: *mut root::lc3::sim,
                value: ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim13setBreakpointEt"]
            pub fn sim_setBreakpoint(
                this: *mut root::lc3::sim,
                addr: u16,
            ) -> root::lc3::Breakpoint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim20removeBreakpointByIDEj"]
            pub fn sim_removeBreakpointByID(
                this: *mut root::lc3::sim,
                id: u32,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim22removeBreakpointByAddrEt"]
            pub fn sim_removeBreakpointByAddr(
                this: *mut root::lc3::sim,
                addr: u16,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim30registerPreInstructionCallbackESt8functionIFvRNS_4core12MachineStateEEE"]
            pub fn sim_registerPreInstructionCallback(
                this: *mut root::lc3::sim,
                func: root::lc3::callback_func_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim31registerPostInstructionCallbackESt8functionIFvRNS_4core12MachineStateEEE"]
            pub fn sim_registerPostInstructionCallback(
                this: *mut root::lc3::sim,
                func: root::lc3::callback_func_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim30registerInterruptEnterCallbackESt8functionIFvRNS_4core12MachineStateEEE"]
            pub fn sim_registerInterruptEnterCallback(
                this: *mut root::lc3::sim,
                func: root::lc3::callback_func_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim29registerInterruptExitCallbackESt8functionIFvRNS_4core12MachineStateEEE"]
            pub fn sim_registerInterruptExitCallback(
                this: *mut root::lc3::sim,
                func: root::lc3::callback_func_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim30registerExceptionEnterCallbackESt8functionIFvRNS_4core12MachineStateEEE"]
            pub fn sim_registerExceptionEnterCallback(
                this: *mut root::lc3::sim,
                func: root::lc3::callback_func_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim29registerExceptionExitCallbackESt8functionIFvRNS_4core12MachineStateEEE"]
            pub fn sim_registerExceptionExitCallback(
                this: *mut root::lc3::sim,
                func: root::lc3::callback_func_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim24registerSubEnterCallbackESt8functionIFvRNS_4core12MachineStateEEE"]
            pub fn sim_registerSubEnterCallback(
                this: *mut root::lc3::sim,
                func: root::lc3::callback_func_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim23registerSubExitCallbackESt8functionIFvRNS_4core12MachineStateEEE"]
            pub fn sim_registerSubExitCallback(
                this: *mut root::lc3::sim,
                func: root::lc3::callback_func_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim28registerWaitForInputCallbackESt8functionIFvRNS_4core12MachineStateEEE"]
            pub fn sim_registerWaitForInputCallback(
                this: *mut root::lc3::sim,
                func: root::lc3::callback_func_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim26registerBreakpointCallbackESt8functionIFvRNS_4core12MachineStateERKNS_10BreakpointEEE"]
            pub fn sim_registerBreakpointCallback(
                this: *mut root::lc3::sim,
                func: root::lc3::breakpoint_callback_func_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim10getPrinterEv"]
            pub fn sim_getPrinter(
                this: *mut root::lc3::sim,
            ) -> *mut root::lc3::utils::IPrinter;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK3lc33sim10getPrinterEv"]
            pub fn sim_getPrinter1(
                this: *const root::lc3::sim,
            ) -> *const root::lc3::utils::IPrinter;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim13setPrintLevelEj"]
            pub fn sim_setPrintLevel(
                this: *mut root::lc3::sim,
                print_level: u32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim22setPropagateExceptionsEv"]
            pub fn sim_setPropagateExceptions(this: *mut root::lc3::sim);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim24clearPropagateExceptionsEv"]
            pub fn sim_clearPropagateExceptions(this: *mut root::lc3::sim);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33sim18setIgnorePrivilegeEb"]
            pub fn sim_setIgnorePrivilege(
                this: *mut root::lc3::sim,
                ignore: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc33simC1ERNS_5utils8IPrinterERNS1_9IInputterEbjb"]
            pub fn sim_sim(
                this: *mut root::lc3::sim,
                printer: *mut root::lc3::utils::IPrinter,
                inputter: *mut root::lc3::utils::IInputter,
                threaded_input: bool,
                print_level: u32,
                propagate_exceptions: bool,
            );
        }
        impl Default for sim {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl sim {
            #[inline]
            pub unsafe fn loadObjFile(
                &mut self,
                obj_filename: *const root::std::string,
            ) -> bool {
                sim_loadObjFile(self, obj_filename)
            }
            #[inline]
            pub unsafe fn reinitialize(&mut self) {
                sim_reinitialize(self)
            }
            #[inline]
            pub unsafe fn randomize(&mut self) {
                sim_randomize(self)
            }
            #[inline]
            pub unsafe fn restart(&mut self) {
                sim_restart(self)
            }
            #[inline]
            pub unsafe fn setRunInstLimit(&mut self, inst_limit: u64) {
                sim_setRunInstLimit(self, inst_limit)
            }
            #[inline]
            pub unsafe fn run(&mut self) -> bool {
                sim_run(self)
            }
            #[inline]
            pub unsafe fn runUntilHalt(&mut self) -> bool {
                sim_runUntilHalt(self)
            }
            #[inline]
            pub unsafe fn runUntilInputPoll(&mut self) -> bool {
                sim_runUntilInputPoll(self)
            }
            #[inline]
            pub unsafe fn pause(&mut self) {
                sim_pause(self)
            }
            #[inline]
            pub unsafe fn stepIn(&mut self) -> bool {
                sim_stepIn(self)
            }
            #[inline]
            pub unsafe fn stepOver(&mut self) -> bool {
                sim_stepOver(self)
            }
            #[inline]
            pub unsafe fn stepOut(&mut self) -> bool {
                sim_stepOut(self)
            }
            #[inline]
            pub unsafe fn getMachineState(
                &mut self,
            ) -> *mut root::lc3::core::MachineState {
                sim_getMachineState(self)
            }
            #[inline]
            pub unsafe fn getMachineState1(
                &self,
            ) -> *const root::lc3::core::MachineState {
                sim_getMachineState1(self)
            }
            #[inline]
            pub unsafe fn getInstExecCount(&self) -> u64 {
                sim_getInstExecCount(self)
            }
            #[inline]
            pub unsafe fn didExceedInstLimit(&self) -> bool {
                sim_didExceedInstLimit(self)
            }
            #[inline]
            pub unsafe fn getBreakpoints(&self) -> *const root::std::vector {
                sim_getBreakpoints(self)
            }
            #[inline]
            pub unsafe fn getReg(&self, id: u16) -> u16 {
                sim_getReg(self, id)
            }
            #[inline]
            pub unsafe fn getMem(&self, addr: u16) -> u16 {
                sim_getMem(self, addr)
            }
            #[inline]
            pub unsafe fn getMemLine(&self, addr: u16) -> root::std::string {
                sim_getMemLine(self, addr)
            }
            #[inline]
            pub unsafe fn getPC(&self) -> u16 {
                sim_getPC(self)
            }
            #[inline]
            pub unsafe fn getPSR(&self) -> u16 {
                sim_getPSR(self)
            }
            #[inline]
            pub unsafe fn getMCR(&self) -> u16 {
                sim_getMCR(self)
            }
            #[inline]
            pub unsafe fn getCC(&self) -> ::std::os::raw::c_char {
                sim_getCC(self)
            }
            #[inline]
            pub unsafe fn setReg(&mut self, id: u16, value: u16) {
                sim_setReg(self, id, value)
            }
            #[inline]
            pub unsafe fn setMem(&mut self, addr: u16, value: u16) {
                sim_setMem(self, addr, value)
            }
            #[inline]
            pub unsafe fn setMemString(
                &mut self,
                addr: u16,
                value: *const root::std::string,
            ) {
                sim_setMemString(self, addr, value)
            }
            #[inline]
            pub unsafe fn setMemLine(
                &mut self,
                addr: u16,
                value: *const root::std::string,
            ) {
                sim_setMemLine(self, addr, value)
            }
            #[inline]
            pub unsafe fn setPC(&mut self, value: u16) {
                sim_setPC(self, value)
            }
            #[inline]
            pub unsafe fn setPSR(&mut self, value: u16) {
                sim_setPSR(self, value)
            }
            #[inline]
            pub unsafe fn setMCR(&mut self, value: u16) {
                sim_setMCR(self, value)
            }
            #[inline]
            pub unsafe fn setCC(&mut self, value: ::std::os::raw::c_char) {
                sim_setCC(self, value)
            }
            #[inline]
            pub unsafe fn setBreakpoint(
                &mut self,
                addr: u16,
            ) -> root::lc3::Breakpoint {
                sim_setBreakpoint(self, addr)
            }
            #[inline]
            pub unsafe fn removeBreakpointByID(&mut self, id: u32) -> bool {
                sim_removeBreakpointByID(self, id)
            }
            #[inline]
            pub unsafe fn removeBreakpointByAddr(&mut self, addr: u16) -> bool {
                sim_removeBreakpointByAddr(self, addr)
            }
            #[inline]
            pub unsafe fn registerPreInstructionCallback(
                &mut self,
                func: root::lc3::callback_func_t,
            ) {
                sim_registerPreInstructionCallback(self, func)
            }
            #[inline]
            pub unsafe fn registerPostInstructionCallback(
                &mut self,
                func: root::lc3::callback_func_t,
            ) {
                sim_registerPostInstructionCallback(self, func)
            }
            #[inline]
            pub unsafe fn registerInterruptEnterCallback(
                &mut self,
                func: root::lc3::callback_func_t,
            ) {
                sim_registerInterruptEnterCallback(self, func)
            }
            #[inline]
            pub unsafe fn registerInterruptExitCallback(
                &mut self,
                func: root::lc3::callback_func_t,
            ) {
                sim_registerInterruptExitCallback(self, func)
            }
            #[inline]
            pub unsafe fn registerExceptionEnterCallback(
                &mut self,
                func: root::lc3::callback_func_t,
            ) {
                sim_registerExceptionEnterCallback(self, func)
            }
            #[inline]
            pub unsafe fn registerExceptionExitCallback(
                &mut self,
                func: root::lc3::callback_func_t,
            ) {
                sim_registerExceptionExitCallback(self, func)
            }
            #[inline]
            pub unsafe fn registerSubEnterCallback(
                &mut self,
                func: root::lc3::callback_func_t,
            ) {
                sim_registerSubEnterCallback(self, func)
            }
            #[inline]
            pub unsafe fn registerSubExitCallback(
                &mut self,
                func: root::lc3::callback_func_t,
            ) {
                sim_registerSubExitCallback(self, func)
            }
            #[inline]
            pub unsafe fn registerWaitForInputCallback(
                &mut self,
                func: root::lc3::callback_func_t,
            ) {
                sim_registerWaitForInputCallback(self, func)
            }
            #[inline]
            pub unsafe fn registerBreakpointCallback(
                &mut self,
                func: root::lc3::breakpoint_callback_func_t,
            ) {
                sim_registerBreakpointCallback(self, func)
            }
            #[inline]
            pub unsafe fn getPrinter(
                &mut self,
            ) -> *mut root::lc3::utils::IPrinter {
                sim_getPrinter(self)
            }
            #[inline]
            pub unsafe fn getPrinter1(
                &self,
            ) -> *const root::lc3::utils::IPrinter {
                sim_getPrinter1(self)
            }
            #[inline]
            pub unsafe fn setPrintLevel(&mut self, print_level: u32) {
                sim_setPrintLevel(self, print_level)
            }
            #[inline]
            pub unsafe fn setPropagateExceptions(&mut self) {
                sim_setPropagateExceptions(self)
            }
            #[inline]
            pub unsafe fn clearPropagateExceptions(&mut self) {
                sim_clearPropagateExceptions(self)
            }
            #[inline]
            pub unsafe fn setIgnorePrivilege(&mut self, ignore: bool) {
                sim_setIgnorePrivilege(self, ignore)
            }
            #[inline]
            pub unsafe fn new(
                printer: *mut root::lc3::utils::IPrinter,
                inputter: *mut root::lc3::utils::IInputter,
                threaded_input: bool,
                print_level: u32,
                propagate_exceptions: bool,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                sim_sim(
                    __bindgen_tmp.as_mut_ptr(),
                    printer,
                    inputter,
                    threaded_input,
                    print_level,
                    propagate_exceptions,
                );
                __bindgen_tmp.assume_init()
            }
        }
        #[repr(C)]
        pub struct as_ {
            pub printer: *mut root::lc3::utils::IPrinter,
            pub assembler: root::lc3::core::Assembler,
            pub propagate_exceptions: bool,
        }
        #[test]
        fn bindgen_test_layout_as_() {
            assert_eq!(
                ::std::mem::size_of::<as_>(),
                240usize,
                concat!("Size of: ", stringify!(as_))
            );
            assert_eq!(
                ::std::mem::align_of::<as_>(),
                8usize,
                concat!("Alignment of ", stringify!(as_))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<as_>())).printer as *const _ as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(as_),
                    "::",
                    stringify!(printer)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<as_>())).assembler as *const _
                        as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(as_),
                    "::",
                    stringify!(assembler)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<as_>())).propagate_exceptions
                        as *const _ as usize
                },
                232usize,
                concat!(
                    "Offset of field: ",
                    stringify!(as_),
                    "::",
                    stringify!(propagate_exceptions)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc32as8assembleERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn as_assemble(
                this: *mut root::lc3::as_,
                asm_filename: *const root::std::string,
            ) -> root::lc3::optional<root::std::string>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc32as22setPropagateExceptionsEv"]
            pub fn as_setPropagateExceptions(this: *mut root::lc3::as_);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc32as24clearPropagateExceptionsEv"]
            pub fn as_clearPropagateExceptions(this: *mut root::lc3::as_);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc32as19setEnableLiberalAsmEb"]
            pub fn as_setEnableLiberalAsm(
                this: *mut root::lc3::as_,
                enable: bool,
            );
        }
        impl Default for as_ {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl as_ {
            #[inline]
            pub unsafe fn assemble(
                &mut self,
                asm_filename: *const root::std::string,
            ) -> root::lc3::optional<root::std::string> {
                as_assemble(self, asm_filename)
            }
            #[inline]
            pub unsafe fn setPropagateExceptions(&mut self) {
                as_setPropagateExceptions(self)
            }
            #[inline]
            pub unsafe fn clearPropagateExceptions(&mut self) {
                as_clearPropagateExceptions(self)
            }
            #[inline]
            pub unsafe fn setEnableLiberalAsm(&mut self, enable: bool) {
                as_setEnableLiberalAsm(self, enable)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct conv {
            pub printer: *mut root::lc3::utils::IPrinter,
            pub converter: root::lc3::core::Converter,
            pub propagate_exceptions: bool,
        }
        #[test]
        fn bindgen_test_layout_conv() {
            assert_eq!(
                ::std::mem::size_of::<conv>(),
                32usize,
                concat!("Size of: ", stringify!(conv))
            );
            assert_eq!(
                ::std::mem::align_of::<conv>(),
                8usize,
                concat!("Alignment of ", stringify!(conv))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<conv>())).printer as *const _
                        as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(conv),
                    "::",
                    stringify!(printer)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<conv>())).converter as *const _
                        as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(conv),
                    "::",
                    stringify!(converter)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<conv>())).propagate_exceptions
                        as *const _ as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(conv),
                    "::",
                    stringify!(propagate_exceptions)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc34conv10convertBinERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn conv_convertBin(
                this: *mut root::lc3::conv,
                asm_filename: *const root::std::string,
            ) -> root::lc3::optional<root::std::string>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc34conv22setPropagateExceptionsEv"]
            pub fn conv_setPropagateExceptions(this: *mut root::lc3::conv);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lc34conv24clearPropagateExceptionsEv"]
            pub fn conv_clearPropagateExceptions(this: *mut root::lc3::conv);
        }
        impl Default for conv {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl conv {
            #[inline]
            pub unsafe fn convertBin(
                &mut self,
                asm_filename: *const root::std::string,
            ) -> root::lc3::optional<root::std::string> {
                conv_convertBin(self, asm_filename)
            }
            #[inline]
            pub unsafe fn setPropagateExceptions(&mut self) {
                conv_setPropagateExceptions(self)
            }
            #[inline]
            pub unsafe fn clearPropagateExceptions(&mut self) {
                conv_clearPropagateExceptions(self)
            }
        }
        pub mod shims {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            #[derive(Debug)]
            pub struct PrinterShim {
                pub _base: root::lc3::utils::IPrinter,
                pub setColorFunc: [u64; 4usize],
                pub printFunc: [u64; 4usize],
                pub newlineFunc: [u64; 4usize],
            }
            #[test]
            fn bindgen_test_layout_PrinterShim() {
                assert_eq!(
                    ::std::mem::size_of::<PrinterShim>(),
                    104usize,
                    concat!("Size of: ", stringify!(PrinterShim))
                );
                assert_eq!(
                    ::std::mem::align_of::<PrinterShim>(),
                    8usize,
                    concat!("Alignment of ", stringify!(PrinterShim))
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<PrinterShim>())).setColorFunc
                            as *const _ as usize
                    },
                    8usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(PrinterShim),
                        "::",
                        stringify!(setColorFunc)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<PrinterShim>())).printFunc
                            as *const _ as usize
                    },
                    40usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(PrinterShim),
                        "::",
                        stringify!(printFunc)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<PrinterShim>())).newlineFunc
                            as *const _ as usize
                    },
                    72usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(PrinterShim),
                        "::",
                        stringify!(newlineFunc)
                    )
                );
            }
            impl Default for PrinterShim {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc35shims11PrinterShim8setColorENS_5utils10PrintColorE"]
                pub fn PrinterShim_setColor(
                    this: *mut ::std::os::raw::c_void,
                    color: root::lc3::utils::PrintColor,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc35shims11PrinterShim5printERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
                pub fn PrinterShim_print(
                    this: *mut ::std::os::raw::c_void,
                    string: *const root::std::string,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc35shims11PrinterShim7newlineEv"]
                pub fn PrinterShim_newline(this: *mut ::std::os::raw::c_void);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc35shims13noOpPrintShimEv"]
                pub fn noOpPrintShim() -> root::lc3::shims::PrinterShim;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc35shims12setColorNoOpENS_5utils10PrintColorE"]
                pub fn setColorNoOp(color: root::lc3::utils::PrintColor);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc35shims9printNoOpERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
                pub fn printNoOp(string: *const root::std::string);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc35shims11newlineNoOpEv"]
                pub fn newlineNoOp();
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc35shims11testPrinterERNS_5utils8IPrinterE"]
                pub fn testPrinter(printer: *mut root::lc3::utils::IPrinter);
            }
            #[repr(C)]
            #[derive(Debug)]
            pub struct InputterShim {
                pub _base: root::lc3::utils::IInputter,
                pub beginInputFunc: [u64; 4usize],
                pub getCharFunc: [u64; 4usize],
                pub endInputFunc: [u64; 4usize],
            }
            #[test]
            fn bindgen_test_layout_InputterShim() {
                assert_eq!(
                    ::std::mem::size_of::<InputterShim>(),
                    104usize,
                    concat!("Size of: ", stringify!(InputterShim))
                );
                assert_eq!(
                    ::std::mem::align_of::<InputterShim>(),
                    8usize,
                    concat!("Alignment of ", stringify!(InputterShim))
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<InputterShim>())).beginInputFunc
                            as *const _ as usize
                    },
                    8usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(InputterShim),
                        "::",
                        stringify!(beginInputFunc)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<InputterShim>())).getCharFunc
                            as *const _ as usize
                    },
                    40usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(InputterShim),
                        "::",
                        stringify!(getCharFunc)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<InputterShim>())).endInputFunc
                            as *const _ as usize
                    },
                    72usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(InputterShim),
                        "::",
                        stringify!(endInputFunc)
                    )
                );
            }
            impl Default for InputterShim {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc35shims12InputterShim10beginInputEv"]
                pub fn InputterShim_beginInput(
                    this: *mut ::std::os::raw::c_void,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc35shims12InputterShim7getCharERc"]
                pub fn InputterShim_getChar(
                    this: *mut ::std::os::raw::c_void,
                    c: *mut ::std::os::raw::c_char,
                ) -> bool;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc35shims12InputterShim8endInputEv"]
                pub fn InputterShim_endInput(this: *mut ::std::os::raw::c_void);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc35shims13noOpInputShimEv"]
                pub fn noOpInputShim() -> root::lc3::shims::InputterShim;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc35shims14beginInputNoOpEv"]
                pub fn beginInputNoOp();
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc35shims11getCharNoOpERc"]
                pub fn getCharNoOp(c: *mut ::std::os::raw::c_char) -> bool;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3lc35shims12endInputNoOpEv"]
                pub fn endInputNoOp();
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        #[cfg(feature = "frontend")]
        #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "frontend")))]
        pub struct ConsoleInputter {
            pub _base: root::lc3::utils::IInputter,
        }
        #[test]
        #[cfg(feature = "frontend")]
        #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "frontend")))]
        fn bindgen_test_layout_ConsoleInputter() {
            assert_eq!(
                ::std::mem::size_of::<ConsoleInputter>(),
                8usize,
                concat!("Size of: ", stringify!(ConsoleInputter))
            );
            assert_eq!(
                ::std::mem::align_of::<ConsoleInputter>(),
                8usize,
                concat!("Alignment of ", stringify!(ConsoleInputter))
            );
        }
        #[cfg(feature = "frontend")]
        #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "frontend")))]
        impl Default for ConsoleInputter {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[cfg(feature = "frontend")]
        #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "frontend")))]
        extern "C" {
            #[link_name = "\u{1}_ZN3lc315ConsoleInputter10beginInputEv"]
            pub fn ConsoleInputter_beginInput(
                this: *mut ::std::os::raw::c_void,
            );
        }
        #[cfg(feature = "frontend")]
        #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "frontend")))]
        extern "C" {
            #[link_name = "\u{1}_ZN3lc315ConsoleInputter7getCharERc"]
            pub fn ConsoleInputter_getChar(
                this: *mut ::std::os::raw::c_void,
                c: *mut ::std::os::raw::c_char,
            ) -> bool;
        }
        #[cfg(feature = "frontend")]
        #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "frontend")))]
        extern "C" {
            #[link_name = "\u{1}_ZN3lc315ConsoleInputter8endInputEv"]
            pub fn ConsoleInputter_endInput(this: *mut ::std::os::raw::c_void);
        }
        #[repr(C)]
        #[derive(Debug)]
        #[cfg(feature = "frontend")]
        #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "frontend")))]
        pub struct ConsolePrinter {
            pub _base: root::lc3::utils::IPrinter,
        }
        #[test]
        #[cfg(feature = "frontend")]
        #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "frontend")))]
        fn bindgen_test_layout_ConsolePrinter() {
            assert_eq!(
                ::std::mem::size_of::<ConsolePrinter>(),
                8usize,
                concat!("Size of: ", stringify!(ConsolePrinter))
            );
            assert_eq!(
                ::std::mem::align_of::<ConsolePrinter>(),
                8usize,
                concat!("Alignment of ", stringify!(ConsolePrinter))
            );
        }
        #[cfg(feature = "frontend")]
        #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "frontend")))]
        impl Default for ConsolePrinter {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[cfg(feature = "frontend")]
        #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "frontend")))]
        extern "C" {
            #[link_name = "\u{1}_ZN3lc314ConsolePrinter8setColorENS_5utils10PrintColorE"]
            pub fn ConsolePrinter_setColor(
                this: *mut ::std::os::raw::c_void,
                color: root::lc3::utils::PrintColor,
            );
        }
        #[cfg(feature = "frontend")]
        #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "frontend")))]
        extern "C" {
            #[link_name = "\u{1}_ZN3lc314ConsolePrinter5printERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn ConsolePrinter_print(
                this: *mut ::std::os::raw::c_void,
                string: *const root::std::string,
            );
        }
        #[cfg(feature = "frontend")]
        #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "frontend")))]
        extern "C" {
            #[link_name = "\u{1}_ZN3lc314ConsolePrinter7newlineEv"]
            pub fn ConsolePrinter_newline(this: *mut ::std::os::raw::c_void);
        }
    }
    pub mod std {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub type size_t = ::std::os::raw::c_ulong;
        pub type nullptr_t = *const ::std::os::raw::c_void;
        pub type string = root::std::basic_string<::std::os::raw::c_char>;
        pub type wstring = root::std::basic_string<u32>;
        pub type u16string = root::std::basic_string<u16>;
        pub type u32string = root::std::basic_string<u32>;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct time_get {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct time_get_byname {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct money_get {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct money_put {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct messages {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct messages_byname {
            pub _address: u8,
        }
        #[repr(C)]
        pub struct basic_string<_CharT> {
            pub _M_dataplus: root::std::basic_string__Alloc_hider,
            pub _M_string_length: root::std::basic_string_size_type,
            pub __bindgen_anon_1: root::std::basic_string__bindgen_ty_2<_CharT>,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_string__Char_alloc_type = [u8; 0usize];
        pub type basic_string__Alloc_traits = root::__gnu_cxx::__alloc_traits;
        pub type basic_string_traits_type<_Traits> = _Traits;
        pub type basic_string_value_type = [u8; 0usize];
        pub type basic_string_allocator_type =
            root::std::basic_string__Char_alloc_type;
        pub type basic_string_size_type = [u8; 0usize];
        pub type basic_string_difference_type = [u8; 0usize];
        pub type basic_string_reference = [u8; 0usize];
        pub type basic_string_const_reference = [u8; 0usize];
        pub type basic_string_pointer = [u8; 0usize];
        pub type basic_string_const_pointer = [u8; 0usize];
        pub type basic_string_iterator =
            root::__gnu_cxx::__normal_iterator<root::std::basic_string_pointer>;
        pub type basic_string_const_iterator =
            root::__gnu_cxx::__normal_iterator<
                root::std::basic_string_const_pointer,
            >;
        pub type basic_string_const_reverse_iterator =
            root::std::reverse_iterator<root::std::basic_string_const_iterator>;
        pub type basic_string_reverse_iterator =
            root::std::reverse_iterator<root::std::basic_string_iterator>;
        pub type basic_string___const_iterator =
            root::std::basic_string_const_iterator;
        #[repr(C)]
        pub struct basic_string__Alloc_hider {
            pub _M_p: root::std::basic_string_pointer,
        }
        impl Default for basic_string__Alloc_hider {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub const basic_string__S_local_capacity:
            root::std::basic_string__bindgen_ty_1 = 0;
        pub type basic_string__bindgen_ty_1 = i32;
        #[repr(C)]
        pub struct basic_string__bindgen_ty_2<_CharT> {
            pub _M_local_buf: root::__BindgenUnionField<*mut _CharT>,
            pub _M_allocated_capacity:
                root::__BindgenUnionField<root::std::basic_string_size_type>,
            pub bindgen_union_field: u64,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        impl<_CharT> Default for basic_string__bindgen_ty_2<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl<_CharT> Default for basic_string<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct collate {
            pub _base: root::std::locale_facet,
            pub _M_c_locale_collate: root::std::__c_locale,
        }
        pub type collate_char_type<_CharT> = _CharT;
        impl Default for collate {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct collate_byname {
            pub _base: root::std::collate,
        }
        pub type collate_byname_char_type<_CharT> = _CharT;
        impl Default for collate_byname {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct numpunct<_CharT> {
            pub _base: root::std::locale_facet,
            pub _M_data: *mut root::std::numpunct___cache_type<_CharT>,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type numpunct_char_type<_CharT> = _CharT;
        pub type numpunct___cache_type<_CharT> =
            root::std::__numpunct_cache<_CharT>;
        impl<_CharT> Default for numpunct<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        extern "C" {
            pub static mut id: root::std::locale_id;
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct numpunct_byname<_CharT> {
            pub _base: root::std::numpunct<_CharT>,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type numpunct_byname_char_type<_CharT> = _CharT;
        impl<_CharT> Default for numpunct_byname<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        pub struct basic_stringbuf<_CharT> {
            pub _base: root::std::basic_streambuf<_CharT>,
            pub _M_mode: root::std::ios_base_openmode,
            pub _M_string: root::std::basic_stringbuf___string_type<_CharT>,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_stringbuf_char_type<_CharT> = _CharT;
        pub type basic_stringbuf_traits_type<_Traits> = _Traits;
        pub type basic_stringbuf_allocator_type<_Alloc> = _Alloc;
        pub type basic_stringbuf_int_type = [u8; 0usize];
        pub type basic_stringbuf_pos_type = [u8; 0usize];
        pub type basic_stringbuf_off_type = [u8; 0usize];
        pub type basic_stringbuf___streambuf_type<_CharT> =
            root::std::basic_streambuf<
                root::std::basic_stringbuf_char_type<_CharT>,
            >;
        pub type basic_stringbuf___string_type<_CharT> =
            root::std::basic_string<
                root::std::basic_stringbuf_char_type<_CharT>,
            >;
        pub type basic_stringbuf___size_type<_CharT> =
            root::std::basic_stringbuf___string_type<_CharT>;
        #[repr(C)]
        pub struct basic_stringbuf___xfer_bufptrs<_CharT> {
            pub _M_to: *mut root::std::basic_stringbuf<_CharT>,
            pub _M_goff: [root::std::basic_stringbuf_off_type; 3usize],
            pub _M_poff: [root::std::basic_stringbuf_off_type; 3usize],
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        impl<_CharT> Default for basic_stringbuf___xfer_bufptrs<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl<_CharT> Default for basic_stringbuf<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        pub struct basic_istringstream<_CharT> {
            pub _base: root::std::basic_istream<_CharT>,
            pub _M_stringbuf:
                root::std::basic_istringstream___stringbuf_type<_CharT>,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_istringstream_char_type<_CharT> = _CharT;
        pub type basic_istringstream_traits_type<_Traits> = _Traits;
        pub type basic_istringstream_allocator_type<_Alloc> = _Alloc;
        pub type basic_istringstream_int_type = [u8; 0usize];
        pub type basic_istringstream_pos_type = [u8; 0usize];
        pub type basic_istringstream_off_type = [u8; 0usize];
        pub type basic_istringstream___string_type<_CharT> =
            root::std::basic_string<_CharT>;
        pub type basic_istringstream___stringbuf_type<_CharT> =
            root::std::basic_stringbuf<_CharT>;
        pub type basic_istringstream___istream_type<_CharT> =
            root::std::basic_istream<
                root::std::basic_istringstream_char_type<_CharT>,
            >;
        impl<_CharT> Default for basic_istringstream<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        pub struct basic_ostringstream<_CharT> {
            pub _base: root::std::basic_ostream<_CharT>,
            pub _M_stringbuf:
                root::std::basic_ostringstream___stringbuf_type<_CharT>,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_ostringstream_char_type<_CharT> = _CharT;
        pub type basic_ostringstream_traits_type<_Traits> = _Traits;
        pub type basic_ostringstream_allocator_type<_Alloc> = _Alloc;
        pub type basic_ostringstream_int_type = [u8; 0usize];
        pub type basic_ostringstream_pos_type = [u8; 0usize];
        pub type basic_ostringstream_off_type = [u8; 0usize];
        pub type basic_ostringstream___string_type<_CharT> =
            root::std::basic_string<_CharT>;
        pub type basic_ostringstream___stringbuf_type<_CharT> =
            root::std::basic_stringbuf<_CharT>;
        pub type basic_ostringstream___ostream_type<_CharT> =
            root::std::basic_ostream<
                root::std::basic_ostringstream_char_type<_CharT>,
            >;
        impl<_CharT> Default for basic_ostringstream<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        pub struct basic_stringstream<_CharT> {
            pub _base: root::std::basic_iostream<_CharT>,
            pub _M_stringbuf:
                root::std::basic_stringstream___stringbuf_type<_CharT>,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_stringstream_char_type<_CharT> = _CharT;
        pub type basic_stringstream_traits_type<_Traits> = _Traits;
        pub type basic_stringstream_allocator_type<_Alloc> = _Alloc;
        pub type basic_stringstream_int_type = [u8; 0usize];
        pub type basic_stringstream_pos_type = [u8; 0usize];
        pub type basic_stringstream_off_type = [u8; 0usize];
        pub type basic_stringstream___string_type<_CharT> =
            root::std::basic_string<_CharT>;
        pub type basic_stringstream___stringbuf_type<_CharT> =
            root::std::basic_stringbuf<_CharT>;
        pub type basic_stringstream___iostream_type<_CharT> =
            root::std::basic_iostream<
                root::std::basic_stringstream_char_type<_CharT>,
            >;
        impl<_CharT> Default for basic_stringstream<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt21__throw_bad_exceptionv"]
            pub fn __throw_bad_exception();
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt17__throw_bad_allocv"]
            pub fn __throw_bad_alloc();
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt16__throw_bad_castv"]
            pub fn __throw_bad_cast();
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt18__throw_bad_typeidv"]
            pub fn __throw_bad_typeid();
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt19__throw_logic_errorPKc"]
            pub fn __throw_logic_error(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_domain_errorPKc"]
            pub fn __throw_domain_error(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt24__throw_invalid_argumentPKc"]
            pub fn __throw_invalid_argument(
                arg1: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_length_errorPKc"]
            pub fn __throw_length_error(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_out_of_rangePKc"]
            pub fn __throw_out_of_range(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt24__throw_out_of_range_fmtPKcz"]
            pub fn __throw_out_of_range_fmt(
                arg1: *const ::std::os::raw::c_char,
                ...
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt21__throw_runtime_errorPKc"]
            pub fn __throw_runtime_error(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt19__throw_range_errorPKc"]
            pub fn __throw_range_error(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt22__throw_overflow_errorPKc"]
            pub fn __throw_overflow_error(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt23__throw_underflow_errorPKc"]
            pub fn __throw_underflow_error(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt19__throw_ios_failurePKc"]
            pub fn __throw_ios_failure(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_system_errori"]
            pub fn __throw_system_error(arg1: ::std::os::raw::c_int);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_future_errori"]
            pub fn __throw_future_error(arg1: ::std::os::raw::c_int);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt25__throw_bad_function_callv"]
            pub fn __throw_bad_function_call();
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __true_type {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___true_type() {
            assert_eq!(
                ::std::mem::size_of::<__true_type>(),
                1usize,
                concat!("Size of: ", stringify!(__true_type))
            );
            assert_eq!(
                ::std::mem::align_of::<__true_type>(),
                1usize,
                concat!("Alignment of ", stringify!(__true_type))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __false_type {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___false_type() {
            assert_eq!(
                ::std::mem::size_of::<__false_type>(),
                1usize,
                concat!("Size of: ", stringify!(__false_type))
            );
            assert_eq!(
                ::std::mem::align_of::<__false_type>(),
                1usize,
                concat!("Alignment of ", stringify!(__false_type))
            );
        }
        pub type __truth_type___type = root::std::__false_type;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __traitor {
            pub _address: u8,
        }
        pub const __traitor___value: root::std::__traitor__bindgen_ty_1 = 0;
        pub type __traitor__bindgen_ty_1 = i32;
        pub type __traitor___type = u8;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __are_same {
            pub _address: u8,
        }
        pub const __are_same___value: root::std::__are_same__bindgen_ty_1 = 0;
        pub type __are_same__bindgen_ty_1 = i32;
        pub type __are_same___type = root::std::__false_type;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_void {
            pub _address: u8,
        }
        pub const __is_void___value: root::std::__is_void__bindgen_ty_1 = 0;
        pub type __is_void__bindgen_ty_1 = i32;
        pub type __is_void___type = root::std::__false_type;
        #[test]
        fn __bindgen_test_layout___is_void_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_void>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_void)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_void>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_void)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_integer {
            pub _address: u8,
        }
        pub const __is_integer___value: root::std::__is_integer__bindgen_ty_1 =
            0;
        pub type __is_integer__bindgen_ty_1 = i32;
        pub type __is_integer___type = root::std::__false_type;
        #[test]
        fn __bindgen_test_layout___is_integer_open0_bool__close0_instantiation()
        {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_char_close0_instantiation()
        {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_signed_char_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_unsigned_char_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_wchar_t_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_char16_t_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_char32_t_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_short_close0_instantiation()
        {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_unsigned_short_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_int_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_unsigned_int_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_long_close0_instantiation()
        {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_unsigned_long_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_long_long_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_unsigned_long_long_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_floating {
            pub _address: u8,
        }
        pub const __is_floating___value:
            root::std::__is_floating__bindgen_ty_1 = 0;
        pub type __is_floating__bindgen_ty_1 = i32;
        pub type __is_floating___type = root::std::__false_type;
        #[test]
        fn __bindgen_test_layout___is_floating_open0_float_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_floating>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_floating)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_floating>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_floating)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_floating_open0_double_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_floating>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_floating)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_floating>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_floating)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_floating_open0_long_double_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_floating>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_floating)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_floating>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_floating)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_pointer {
            pub _address: u8,
        }
        pub const __is_pointer___value: root::std::__is_pointer__bindgen_ty_1 =
            0;
        pub type __is_pointer__bindgen_ty_1 = i32;
        pub type __is_pointer___type = root::std::__false_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_arithmetic {
            pub _address: u8,
        }
        impl Default for __is_arithmetic {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_scalar {
            pub _address: u8,
        }
        impl Default for __is_scalar {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_char {
            pub _address: u8,
        }
        pub const __is_char___value: root::std::__is_char__bindgen_ty_1 = 0;
        pub type __is_char__bindgen_ty_1 = i32;
        pub type __is_char___type = root::std::__false_type;
        #[test]
        fn __bindgen_test_layout___is_char_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_char>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_char)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_char>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_char)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_char_open0_wchar_t_close0_instantiation()
        {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_char>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_char)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_char>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_char)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_byte {
            pub _address: u8,
        }
        pub const __is_byte___value: root::std::__is_byte__bindgen_ty_1 = 0;
        pub type __is_byte__bindgen_ty_1 = i32;
        pub type __is_byte___type = root::std::__false_type;
        #[test]
        fn __bindgen_test_layout___is_byte_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_byte>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_byte)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_byte>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_byte)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_byte_open0_signed_char_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_byte>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_byte)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_byte>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_byte)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_byte_open0_unsigned_char_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_byte>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_byte)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_byte>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_byte)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_move_iterator {
            pub _address: u8,
        }
        pub const __is_move_iterator___value:
            root::std::__is_move_iterator__bindgen_ty_1 = 0;
        pub type __is_move_iterator__bindgen_ty_1 = i32;
        pub type __is_move_iterator___type = root::std::__false_type;
        pub type integral_constant_value_type<_Tp> = _Tp;
        pub type integral_constant_type = u8;
        pub type true_type = u8;
        pub type false_type = u8;
        pub type __bool_constant = u8;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __or_ {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout___or__open0_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__or_>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__or_)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__or_>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__or_)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __and_ {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout___and__open0_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__and_>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__and_)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__and_>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__and_)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __not_ {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __success_type {
            pub _address: u8,
        }
        pub type __success_type_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __failure_type {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___failure_type() {
            assert_eq!(
                ::std::mem::size_of::<__failure_type>(),
                1usize,
                concat!("Size of: ", stringify!(__failure_type))
            );
            assert_eq!(
                ::std::mem::align_of::<__failure_type>(),
                1usize,
                concat!("Alignment of ", stringify!(__failure_type))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_void_helper {
            pub _base: root::std::false_type,
        }
        #[test]
        fn __bindgen_test_layout___is_void_helper_open0_void_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_void_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_void_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_void_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_void_helper)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_void {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_integral_helper {
            pub _base: root::std::false_type,
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_bool__close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_char_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_signed_char_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_unsigned_char_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_wchar_t_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_char16_t_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_char32_t_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_short_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_unsigned_short_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_int_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_unsigned_int_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_long_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_unsigned_long_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_long_long_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_unsigned_long_long_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_integral {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_floating_point_helper {
            pub _base: root::std::false_type,
        }
        #[test]
        fn __bindgen_test_layout___is_floating_point_helper_open0_float_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_floating_point_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_floating_point_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_floating_point_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_floating_point_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_floating_point_helper_open0_double_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_floating_point_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_floating_point_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_floating_point_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_floating_point_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_floating_point_helper_open0_long_double_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_floating_point_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_floating_point_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_floating_point_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_floating_point_helper)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_floating_point {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_array {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_pointer_helper {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_lvalue_reference {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_rvalue_reference {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_member_object_pointer_helper {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_member_object_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_member_function_pointer_helper {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_member_function_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_enum {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_union {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_class {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_function {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_null_pointer_helper {
            pub _base: root::std::false_type,
        }
        #[test]
        fn __bindgen_test_layout___is_null_pointer_helper_open0_nullptr_t_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_null_pointer_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_null_pointer_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_null_pointer_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_null_pointer_helper)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_null_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nullptr_t {
            pub _address: u8,
        }
        impl Default for __is_nullptr_t {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_reference {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_arithmetic {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_fundamental {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_object {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_scalar {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_compound {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_member_pointer_helper {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_member_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_referenceable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_const {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_volatile {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_trivial {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_trivially_copyable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_standard_layout {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_pod {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_literal_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_empty {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_polymorphic {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_final {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_abstract {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_signed {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_unsigned {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_array_known_bounds {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_array_unknown_bounds {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __do_is_destructible_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___do_is_destructible_impl() {
            assert_eq!(
                ::std::mem::size_of::<__do_is_destructible_impl>(),
                1usize,
                concat!("Size of: ", stringify!(__do_is_destructible_impl))
            );
            assert_eq!(
                ::std::mem::align_of::<__do_is_destructible_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(__do_is_destructible_impl))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_destructible_impl {
            pub _address: u8,
        }
        pub type __is_destructible_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_destructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __do_is_nt_destructible_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___do_is_nt_destructible_impl() {
            assert_eq!(
                ::std::mem::size_of::<__do_is_nt_destructible_impl>(),
                1usize,
                concat!("Size of: ", stringify!(__do_is_nt_destructible_impl))
            );
            assert_eq!(
                ::std::mem::align_of::<__do_is_nt_destructible_impl>(),
                1usize,
                concat!(
                    "Alignment of ",
                    stringify!(__do_is_nt_destructible_impl)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_nt_destructible_impl {
            pub _address: u8,
        }
        pub type __is_nt_destructible_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_nothrow_destructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_default_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_copy_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_move_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_nt_default_constructible_atom {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_nothrow_default_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_nt_constructible_impl {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_nothrow_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_nothrow_copy_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_nothrow_move_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_copy_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_move_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_nt_assignable_impl {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_nothrow_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_nothrow_copy_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_nothrow_move_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_trivially_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_trivially_default_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __do_is_implicitly_default_constructible_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___do_is_implicitly_default_constructible_impl() {
            assert_eq!(
                ::std::mem::size_of::<
                    __do_is_implicitly_default_constructible_impl,
                >(),
                1usize,
                concat!(
                    "Size of: ",
                    stringify!(__do_is_implicitly_default_constructible_impl)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<
                    __do_is_implicitly_default_constructible_impl,
                >(),
                1usize,
                concat!(
                    "Alignment of ",
                    stringify!(__do_is_implicitly_default_constructible_impl)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt45__do_is_implicitly_default_constructible_impl6__testEz"]
            pub fn __do_is_implicitly_default_constructible_impl___test(
            ) -> root::std::false_type;
        }
        impl __do_is_implicitly_default_constructible_impl {
            #[inline]
            pub unsafe fn __test() -> root::std::false_type {
                __do_is_implicitly_default_constructible_impl___test()
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_implicitly_default_constructible_impl {
            pub _address: u8,
        }
        pub type __is_implicitly_default_constructible_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_implicitly_default_constructible_safe {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_implicitly_default_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_trivially_copy_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_trivially_move_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_trivially_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_trivially_copy_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_trivially_move_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_trivially_destructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct has_virtual_destructor {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct alignment_of {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct rank {
            pub _base: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_same {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_base_of {
            pub _address: u8,
        }
        pub type __is_convertible_helper_type = root::std::is_void;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_convertible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct remove_const {
            pub _address: u8,
        }
        pub type remove_const_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct remove_volatile {
            pub _address: u8,
        }
        pub type remove_volatile_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct remove_cv {
            pub _address: u8,
        }
        pub type remove_cv_type = root::std::remove_const;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct add_const {
            pub _address: u8,
        }
        pub type add_const_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct add_volatile {
            pub _address: u8,
        }
        pub type add_volatile_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct add_cv {
            pub _address: u8,
        }
        pub type add_cv_type = root::std::add_const;
        pub type remove_const_t = root::std::remove_const;
        pub type remove_volatile_t = root::std::remove_volatile;
        pub type remove_cv_t = root::std::remove_cv;
        pub type add_const_t = root::std::add_const;
        pub type add_volatile_t = root::std::add_volatile;
        pub type add_cv_t = root::std::add_cv;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct remove_reference {
            pub _address: u8,
        }
        pub type remove_reference_type<_Tp> = _Tp;
        pub type __add_lvalue_reference_helper_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct add_lvalue_reference {
            pub _address: u8,
        }
        pub type __add_rvalue_reference_helper_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct add_rvalue_reference {
            pub _address: u8,
        }
        pub type remove_reference_t = root::std::remove_reference;
        pub type add_lvalue_reference_t = root::std::add_lvalue_reference;
        pub type add_rvalue_reference_t = root::std::add_rvalue_reference;
        pub type __match_cv_qualifiers___match = u8;
        pub type __match_cv_qualifiers___type =
            root::std::__match_cv_qualifiers___match;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __make_unsigned {
            pub _address: u8,
        }
        pub type __make_unsigned___type<_Tp> = _Tp;
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_char_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_signed_char_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_short_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_int_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_long_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_long_long_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct make_unsigned {
            pub _address: u8,
        }
        pub type make_unsigned_type = u8;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __make_signed {
            pub _address: u8,
        }
        pub type __make_signed___type<_Tp> = _Tp;
        #[test]
        fn __bindgen_test_layout___make_signed_open0_char_close0_instantiation()
        {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_signed_open0_unsigned_char_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_signed_open0_unsigned_short_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_signed_open0_unsigned_int_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_signed_open0_unsigned_long_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_signed_open0_unsigned_long_long_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct make_signed {
            pub _address: u8,
        }
        pub type make_signed_type = u8;
        pub type make_signed_t = root::std::make_signed;
        pub type make_unsigned_t = root::std::make_unsigned;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct remove_extent {
            pub _address: u8,
        }
        pub type remove_extent_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct remove_all_extents {
            pub _address: u8,
        }
        pub type remove_all_extents_type<_Tp> = _Tp;
        pub type remove_extent_t = root::std::remove_extent;
        pub type remove_all_extents_t = root::std::remove_all_extents;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __remove_pointer_helper {
            pub _address: u8,
        }
        pub type __remove_pointer_helper_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_pointer {
            pub _address: u8,
        }
        impl Default for remove_pointer {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub type __add_pointer_helper_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct add_pointer {
            pub _address: u8,
        }
        pub type remove_pointer_t = root::std::remove_pointer;
        pub type add_pointer_t = root::std::add_pointer;
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub union __aligned_storage_msa___type {
            pub __data: *mut ::std::os::raw::c_uchar,
            pub __align: root::std::__aligned_storage_msa___type__bindgen_ty_1,
            _bindgen_union_align: u64,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __aligned_storage_msa___type__bindgen_ty_1 {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___aligned_storage_msa___type() {
            assert_eq!(
                ::std::mem::size_of::<__aligned_storage_msa___type>(),
                8usize,
                concat!("Size of: ", stringify!(__aligned_storage_msa___type))
            );
            assert_eq!(
                ::std::mem::align_of::<__aligned_storage_msa___type>(),
                8usize,
                concat!(
                    "Alignment of ",
                    stringify!(__aligned_storage_msa___type)
                )
            );
        }
        impl Default for __aligned_storage_msa___type {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub union aligned_storage_type {
            pub __data: *mut ::std::os::raw::c_uchar,
            pub __align: root::std::aligned_storage_type__bindgen_ty_1,
            _bindgen_union_align: u64,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct aligned_storage_type__bindgen_ty_1 {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_aligned_storage_type() {
            assert_eq!(
                ::std::mem::size_of::<aligned_storage_type>(),
                8usize,
                concat!("Size of: ", stringify!(aligned_storage_type))
            );
            assert_eq!(
                ::std::mem::align_of::<aligned_storage_type>(),
                8usize,
                concat!("Alignment of ", stringify!(aligned_storage_type))
            );
        }
        impl Default for aligned_storage_type {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __strictest_alignment {
            pub _address: u8,
        }
        pub type aligned_union___strictest = root::std::__strictest_alignment;
        pub type aligned_union_type = u8;
        extern "C" {
            pub static alignment_value: root::std::size_t;
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct decay {
            pub _address: u8,
        }
        pub type decay___remove_type = root::std::remove_reference;
        pub type decay_type = u8;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __strip_reference_wrapper {
            pub _address: u8,
        }
        pub type __strip_reference_wrapper___type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __decay_and_strip {
            pub _address: u8,
        }
        pub type __decay_and_strip___type =
            root::std::__strip_reference_wrapper;
        pub type _Require = u8;
        pub type conditional_type<_Iftrue> = _Iftrue;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct common_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __do_common_type_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___do_common_type_impl() {
            assert_eq!(
                ::std::mem::size_of::<__do_common_type_impl>(),
                1usize,
                concat!("Size of: ", stringify!(__do_common_type_impl))
            );
            assert_eq!(
                ::std::mem::align_of::<__do_common_type_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(__do_common_type_impl))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __common_type_impl {
            pub _address: u8,
        }
        pub type __common_type_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __do_member_type_wrapper {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___do_member_type_wrapper() {
            assert_eq!(
                ::std::mem::size_of::<__do_member_type_wrapper>(),
                1usize,
                concat!("Size of: ", stringify!(__do_member_type_wrapper))
            );
            assert_eq!(
                ::std::mem::align_of::<__do_member_type_wrapper>(),
                1usize,
                concat!("Alignment of ", stringify!(__do_member_type_wrapper))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __member_type_wrapper {
            pub _address: u8,
        }
        pub type __member_type_wrapper_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __expanded_common_type_wrapper {
            pub _address: u8,
        }
        pub type __expanded_common_type_wrapper_type = root::std::common_type;
        #[test]
        fn __bindgen_test_layout_common_type_open0_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::common_type>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::common_type)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::common_type>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::common_type)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct underlying_type {
            pub _address: u8,
        }
        pub type underlying_type_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __declval_protector {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_wchar_t_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_signed_open0_wchar_t_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_char16_t_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_signed_open0_char16_t_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_char32_t_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_signed_open0_char32_t_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct result_of {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __invoke_memfun_ref {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___invoke_memfun_ref() {
            assert_eq!(
                ::std::mem::size_of::<__invoke_memfun_ref>(),
                1usize,
                concat!("Size of: ", stringify!(__invoke_memfun_ref))
            );
            assert_eq!(
                ::std::mem::align_of::<__invoke_memfun_ref>(),
                1usize,
                concat!("Alignment of ", stringify!(__invoke_memfun_ref))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __invoke_memfun_deref {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___invoke_memfun_deref() {
            assert_eq!(
                ::std::mem::size_of::<__invoke_memfun_deref>(),
                1usize,
                concat!("Size of: ", stringify!(__invoke_memfun_deref))
            );
            assert_eq!(
                ::std::mem::align_of::<__invoke_memfun_deref>(),
                1usize,
                concat!("Alignment of ", stringify!(__invoke_memfun_deref))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __invoke_memobj_ref {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___invoke_memobj_ref() {
            assert_eq!(
                ::std::mem::size_of::<__invoke_memobj_ref>(),
                1usize,
                concat!("Size of: ", stringify!(__invoke_memobj_ref))
            );
            assert_eq!(
                ::std::mem::align_of::<__invoke_memobj_ref>(),
                1usize,
                concat!("Alignment of ", stringify!(__invoke_memobj_ref))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __invoke_memobj_deref {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___invoke_memobj_deref() {
            assert_eq!(
                ::std::mem::size_of::<__invoke_memobj_deref>(),
                1usize,
                concat!("Size of: ", stringify!(__invoke_memobj_deref))
            );
            assert_eq!(
                ::std::mem::align_of::<__invoke_memobj_deref>(),
                1usize,
                concat!("Alignment of ", stringify!(__invoke_memobj_deref))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __invoke_other {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___invoke_other() {
            assert_eq!(
                ::std::mem::size_of::<__invoke_other>(),
                1usize,
                concat!("Size of: ", stringify!(__invoke_other))
            );
            assert_eq!(
                ::std::mem::align_of::<__invoke_other>(),
                1usize,
                concat!("Alignment of ", stringify!(__invoke_other))
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_success {
            pub _address: u8,
        }
        pub type __result_of_success___invoke_type<_Tag> = _Tag;
        impl Default for __result_of_success {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __result_of_memfun_ref_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___result_of_memfun_ref_impl() {
            assert_eq!(
                ::std::mem::size_of::<__result_of_memfun_ref_impl>(),
                1usize,
                concat!("Size of: ", stringify!(__result_of_memfun_ref_impl))
            );
            assert_eq!(
                ::std::mem::align_of::<__result_of_memfun_ref_impl>(),
                1usize,
                concat!(
                    "Alignment of ",
                    stringify!(__result_of_memfun_ref_impl)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __result_of_memfun_ref {
            pub _address: u8,
        }
        pub type __result_of_memfun_ref_type<_MemPtr> = _MemPtr;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __result_of_memfun_deref_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___result_of_memfun_deref_impl() {
            assert_eq!(
                ::std::mem::size_of::<__result_of_memfun_deref_impl>(),
                1usize,
                concat!("Size of: ", stringify!(__result_of_memfun_deref_impl))
            );
            assert_eq!(
                ::std::mem::align_of::<__result_of_memfun_deref_impl>(),
                1usize,
                concat!(
                    "Alignment of ",
                    stringify!(__result_of_memfun_deref_impl)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __result_of_memfun_deref {
            pub _address: u8,
        }
        pub type __result_of_memfun_deref_type<_MemPtr> = _MemPtr;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __result_of_memobj_ref_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___result_of_memobj_ref_impl() {
            assert_eq!(
                ::std::mem::size_of::<__result_of_memobj_ref_impl>(),
                1usize,
                concat!("Size of: ", stringify!(__result_of_memobj_ref_impl))
            );
            assert_eq!(
                ::std::mem::align_of::<__result_of_memobj_ref_impl>(),
                1usize,
                concat!(
                    "Alignment of ",
                    stringify!(__result_of_memobj_ref_impl)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __result_of_memobj_ref {
            pub _address: u8,
        }
        pub type __result_of_memobj_ref_type<_MemPtr> = _MemPtr;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __result_of_memobj_deref_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___result_of_memobj_deref_impl() {
            assert_eq!(
                ::std::mem::size_of::<__result_of_memobj_deref_impl>(),
                1usize,
                concat!("Size of: ", stringify!(__result_of_memobj_deref_impl))
            );
            assert_eq!(
                ::std::mem::align_of::<__result_of_memobj_deref_impl>(),
                1usize,
                concat!(
                    "Alignment of ",
                    stringify!(__result_of_memobj_deref_impl)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __result_of_memobj_deref {
            pub _address: u8,
        }
        pub type __result_of_memobj_deref_type<_MemPtr> = _MemPtr;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __result_of_memobj {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __result_of_memfun {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __inv_unwrap {
            pub _address: u8,
        }
        pub type __inv_unwrap_type<_Tp> = _Tp;
        pub type __result_of_impl_type = root::std::__failure_type;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __result_of_other_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___result_of_other_impl() {
            assert_eq!(
                ::std::mem::size_of::<__result_of_other_impl>(),
                1usize,
                concat!("Size of: ", stringify!(__result_of_other_impl))
            );
            assert_eq!(
                ::std::mem::align_of::<__result_of_other_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(__result_of_other_impl))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __invoke_result {
            pub _address: u8,
        }
        pub type aligned_storage_t = u8;
        pub type aligned_union_t = u8;
        pub type decay_t = root::std::decay;
        pub type enable_if_t = u8;
        pub type conditional_t = u8;
        pub type common_type_t = root::std::common_type;
        pub type underlying_type_t = root::std::underlying_type;
        pub type result_of_t = root::std::result_of;
        pub type __enable_if_t = u8;
        pub type __void_t = ::std::os::raw::c_void;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __detector {
            pub _address: u8,
        }
        pub type __detector_value_t = root::std::false_type;
        pub type __detector_type<_Default> = _Default;
        pub type __detected_or = root::std::__detector;
        pub type __detected_or_t = root::std::__detected_or;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_tuple_like_impl {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_tuple_like {
            pub _address: u8,
        }
        pub mod __swappable_details {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone)]
            pub struct __do_is_swappable_impl {
                pub _address: u8,
            }
            #[test]
            fn bindgen_test_layout___do_is_swappable_impl() {
                assert_eq!(
                    ::std::mem::size_of::<__do_is_swappable_impl>(),
                    1usize,
                    concat!("Size of: ", stringify!(__do_is_swappable_impl))
                );
                assert_eq!(
                    ::std::mem::align_of::<__do_is_swappable_impl>(),
                    1usize,
                    concat!(
                        "Alignment of ",
                        stringify!(__do_is_swappable_impl)
                    )
                );
            }
            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone)]
            pub struct __do_is_nothrow_swappable_impl {
                pub _address: u8,
            }
            #[test]
            fn bindgen_test_layout___do_is_nothrow_swappable_impl() {
                assert_eq!(
                    ::std::mem::size_of::<__do_is_nothrow_swappable_impl>(),
                    1usize,
                    concat!(
                        "Size of: ",
                        stringify!(__do_is_nothrow_swappable_impl)
                    )
                );
                assert_eq!(
                    ::std::mem::align_of::<__do_is_nothrow_swappable_impl>(),
                    1usize,
                    concat!(
                        "Alignment of ",
                        stringify!(__do_is_nothrow_swappable_impl)
                    )
                );
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_swappable_impl {
            pub _address: u8,
        }
        pub type __is_swappable_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_nothrow_swappable_impl {
            pub _address: u8,
        }
        pub type __is_nothrow_swappable_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_swappable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_nothrow_swappable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_invocable_impl {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_invocable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __call_is_nothrow {
            pub _address: u8,
        }
        pub type __call_is_nothrow_ = root::std::__call_is_nothrow;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_nothrow_invocable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default)]
        pub struct __nonesuch {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___nonesuch() {
            assert_eq!(
                ::std::mem::size_of::<__nonesuch>(),
                1usize,
                concat!("Size of: ", stringify!(__nonesuch))
            );
            assert_eq!(
                ::std::mem::align_of::<__nonesuch>(),
                1usize,
                concat!("Alignment of ", stringify!(__nonesuch))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __move_if_noexcept_cond {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct piecewise_construct_t {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_piecewise_construct_t() {
            assert_eq!(
                ::std::mem::size_of::<piecewise_construct_t>(),
                1usize,
                concat!("Size of: ", stringify!(piecewise_construct_t))
            );
            assert_eq!(
                ::std::mem::align_of::<piecewise_construct_t>(),
                1usize,
                concat!("Alignment of ", stringify!(piecewise_construct_t))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZStL19piecewise_construct"]
            pub static piecewise_construct: root::std::piecewise_construct_t;
        }
        #[repr(C)]
        #[derive(Debug, Default)]
        pub struct __nonesuch_no_braces {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___nonesuch_no_braces() {
            assert_eq!(
                ::std::mem::size_of::<__nonesuch_no_braces>(),
                1usize,
                concat!("Size of: ", stringify!(__nonesuch_no_braces))
            );
            assert_eq!(
                ::std::mem::align_of::<__nonesuch_no_braces>(),
                1usize,
                concat!("Alignment of ", stringify!(__nonesuch_no_braces))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default)]
        pub struct __pair_base {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct pair<_T1, _T2> {
            pub first: _T1,
            pub second: _T2,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_T1>>,
            pub _phantom_1:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_T2>>,
        }
        pub type pair_first_type<_T1> = _T1;
        pub type pair_second_type<_T2> = _T2;
        pub type pair__PCCP = u8;
        pub type pair__PCCFP = u8;
        impl<_T1, _T2> Default for pair<_T1, _T2> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct input_iterator_tag {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_input_iterator_tag() {
            assert_eq!(
                ::std::mem::size_of::<input_iterator_tag>(),
                1usize,
                concat!("Size of: ", stringify!(input_iterator_tag))
            );
            assert_eq!(
                ::std::mem::align_of::<input_iterator_tag>(),
                1usize,
                concat!("Alignment of ", stringify!(input_iterator_tag))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct output_iterator_tag {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_output_iterator_tag() {
            assert_eq!(
                ::std::mem::size_of::<output_iterator_tag>(),
                1usize,
                concat!("Size of: ", stringify!(output_iterator_tag))
            );
            assert_eq!(
                ::std::mem::align_of::<output_iterator_tag>(),
                1usize,
                concat!("Alignment of ", stringify!(output_iterator_tag))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct forward_iterator_tag {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_forward_iterator_tag() {
            assert_eq!(
                ::std::mem::size_of::<forward_iterator_tag>(),
                1usize,
                concat!("Size of: ", stringify!(forward_iterator_tag))
            );
            assert_eq!(
                ::std::mem::align_of::<forward_iterator_tag>(),
                1usize,
                concat!("Alignment of ", stringify!(forward_iterator_tag))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct bidirectional_iterator_tag {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_bidirectional_iterator_tag() {
            assert_eq!(
                ::std::mem::size_of::<bidirectional_iterator_tag>(),
                1usize,
                concat!("Size of: ", stringify!(bidirectional_iterator_tag))
            );
            assert_eq!(
                ::std::mem::align_of::<bidirectional_iterator_tag>(),
                1usize,
                concat!(
                    "Alignment of ",
                    stringify!(bidirectional_iterator_tag)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct random_access_iterator_tag {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_random_access_iterator_tag() {
            assert_eq!(
                ::std::mem::size_of::<random_access_iterator_tag>(),
                1usize,
                concat!("Size of: ", stringify!(random_access_iterator_tag))
            );
            assert_eq!(
                ::std::mem::align_of::<random_access_iterator_tag>(),
                1usize,
                concat!(
                    "Alignment of ",
                    stringify!(random_access_iterator_tag)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct iterator {
            pub _address: u8,
        }
        pub type iterator_iterator_category<_Category> = _Category;
        pub type iterator_value_type<_Tp> = _Tp;
        pub type iterator_difference_type<_Distance> = _Distance;
        pub type iterator_pointer<_Pointer> = _Pointer;
        pub type iterator_reference<_Reference> = _Reference;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __iterator_traits {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct iterator_traits {
            pub _address: u8,
        }
        pub type _RequireInputIter = u8;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct _List_iterator {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct _List_const_iterator {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __undefined {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __get_first_arg {
            pub _address: u8,
        }
        pub type __get_first_arg_type = root::std::__undefined;
        pub type __get_first_arg_t = root::std::__get_first_arg;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __replace_first_arg {
            pub _address: u8,
        }
        pub type __replace_first_arg_t = root::std::__replace_first_arg;
        pub type __make_not_void = u8;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct pointer_traits {
            pub _address: u8,
        }
        pub type pointer_traits___element_type = [u8; 0usize];
        pub type pointer_traits___difference_type = [u8; 0usize];
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct pointer_traits___rebind {
            pub _address: u8,
        }
        impl Default for pointer_traits___rebind {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub type pointer_traits_pointer<_Ptr> = _Ptr;
        pub type pointer_traits_element_type = root::std::__detected_or_t;
        pub type pointer_traits_difference_type = root::std::__detected_or_t;
        pub type pointer_traits_rebind = root::std::pointer_traits___rebind;
        pub type __ptr_rebind = root::std::pointer_traits;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct reverse_iterator<_Iterator> {
            pub current: _Iterator,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
        }
        pub type reverse_iterator___traits_type = root::std::iterator_traits;
        pub type reverse_iterator_iterator_type<_Iterator> = _Iterator;
        pub type reverse_iterator_difference_type =
            root::std::reverse_iterator___traits_type;
        pub type reverse_iterator_pointer =
            root::std::reverse_iterator___traits_type;
        pub type reverse_iterator_reference =
            root::std::reverse_iterator___traits_type;
        impl<_Iterator> Default for reverse_iterator<_Iterator> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct back_insert_iterator<_Container> {
            pub container: *mut _Container,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
        }
        pub type back_insert_iterator_container_type<_Container> = _Container;
        impl<_Container> Default for back_insert_iterator<_Container> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct front_insert_iterator<_Container> {
            pub container: *mut _Container,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
        }
        pub type front_insert_iterator_container_type<_Container> = _Container;
        impl<_Container> Default for front_insert_iterator<_Container> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        pub struct insert_iterator<_Container> {
            pub container: *mut _Container,
            pub iter: [u8; 0usize],
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
        }
        pub type insert_iterator_container_type<_Container> = _Container;
        impl<_Container> Default for insert_iterator<_Container> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct move_iterator<_Iterator> {
            pub _M_current: _Iterator,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
        }
        pub type move_iterator___traits_type = root::std::iterator_traits;
        pub type move_iterator___base_ref =
            root::std::move_iterator___traits_type;
        pub type move_iterator_iterator_type<_Iterator> = _Iterator;
        pub type move_iterator_iterator_category =
            root::std::move_iterator___traits_type;
        pub type move_iterator_value_type =
            root::std::move_iterator___traits_type;
        pub type move_iterator_difference_type =
            root::std::move_iterator___traits_type;
        pub type move_iterator_pointer<_Iterator> = _Iterator;
        pub type move_iterator_reference = u8;
        impl<_Iterator> Default for move_iterator<_Iterator> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __lc_rai {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout___lc_rai_open0_random_access_iterator_tag_random_access_iterator_tag_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__lc_rai>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__lc_rai)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__lc_rai>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__lc_rai)
                )
            );
        }
        #[repr(C)]
        pub struct exception__bindgen_vtable(::std::os::raw::c_void);
        #[repr(C)]
        #[derive(Debug)]
        pub struct exception {
            pub vtable_: *const exception__bindgen_vtable,
        }
        #[test]
        fn bindgen_test_layout_exception() {
            assert_eq!(
                ::std::mem::size_of::<exception>(),
                8usize,
                concat!("Size of: ", stringify!(exception))
            );
            assert_eq!(
                ::std::mem::align_of::<exception>(),
                8usize,
                concat!("Alignment of ", stringify!(exception))
            );
        }
        impl Default for exception {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt9exceptionD1Ev"]
            pub fn exception_exception_destructor(
                this: *mut root::std::exception,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt9exception4whatEv"]
            pub fn exception_what(
                this: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct bad_exception {
            pub _base: root::std::exception,
        }
        #[test]
        fn bindgen_test_layout_bad_exception() {
            assert_eq!(
                ::std::mem::size_of::<bad_exception>(),
                8usize,
                concat!("Size of: ", stringify!(bad_exception))
            );
            assert_eq!(
                ::std::mem::align_of::<bad_exception>(),
                8usize,
                concat!("Alignment of ", stringify!(bad_exception))
            );
        }
        impl Default for bad_exception {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt13bad_exceptionD1Ev"]
            pub fn bad_exception_bad_exception_destructor(
                this: *mut root::std::bad_exception,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt13bad_exception4whatEv"]
            pub fn bad_exception_what(
                this: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
        pub type terminate_handler =
            ::std::option::Option<unsafe extern "C" fn()>;
        pub type unexpected_handler =
            ::std::option::Option<unsafe extern "C" fn()>;
        extern "C" {
            #[link_name = "\u{1}_ZSt13set_terminatePFvvE"]
            pub fn set_terminate(
                arg1: root::std::terminate_handler,
            ) -> root::std::terminate_handler;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt13get_terminatev"]
            pub fn get_terminate() -> root::std::terminate_handler;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt9terminatev"]
            pub fn terminate();
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt14set_unexpectedPFvvE"]
            pub fn set_unexpected(
                arg1: root::std::unexpected_handler,
            ) -> root::std::unexpected_handler;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt14get_unexpectedv"]
            pub fn get_unexpected() -> root::std::unexpected_handler;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt10unexpectedv"]
            pub fn unexpected();
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt18uncaught_exceptionv"]
            pub fn uncaught_exception() -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt11_Hash_bytesPKvmm"]
            pub fn _Hash_bytes(
                __ptr: *const ::std::os::raw::c_void,
                __len: root::std::size_t,
                __seed: root::std::size_t,
            ) -> root::std::size_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt15_Fnv_hash_bytesPKvmm"]
            pub fn _Fnv_hash_bytes(
                __ptr: *const ::std::os::raw::c_void,
                __len: root::std::size_t,
                __seed: root::std::size_t,
            ) -> root::std::size_t;
        }
        #[repr(C)]
        pub struct type_info__bindgen_vtable(::std::os::raw::c_void);
        #[repr(C)]
        #[derive(Debug)]
        pub struct type_info {
            pub vtable_: *const type_info__bindgen_vtable,
            pub __name: *const ::std::os::raw::c_char,
        }
        #[test]
        fn bindgen_test_layout_type_info() {
            assert_eq!(
                ::std::mem::size_of::<type_info>(),
                16usize,
                concat!("Size of: ", stringify!(type_info))
            );
            assert_eq!(
                ::std::mem::align_of::<type_info>(),
                8usize,
                concat!("Alignment of ", stringify!(type_info))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<type_info>())).__name as *const _
                        as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(type_info),
                    "::",
                    stringify!(__name)
                )
            );
        }
        impl Default for type_info {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt9type_infoD1Ev"]
            pub fn type_info_type_info_destructor(
                this: *mut root::std::type_info,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt9type_info14__is_pointer_pEv"]
            pub fn type_info___is_pointer_p(
                this: *mut ::std::os::raw::c_void,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt9type_info15__is_function_pEv"]
            pub fn type_info___is_function_p(
                this: *mut ::std::os::raw::c_void,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt9type_info10__do_catchEPKS_PPvj"]
            pub fn type_info___do_catch(
                this: *mut ::std::os::raw::c_void,
                __thr_type: *const root::std::type_info,
                __thr_obj: *mut *mut ::std::os::raw::c_void,
                __outer: ::std::os::raw::c_uint,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv"]
            pub fn type_info___do_upcast(
                this: *mut ::std::os::raw::c_void,
                __target: *const root::__cxxabiv1::__class_type_info,
                __obj_ptr: *mut *mut ::std::os::raw::c_void,
            ) -> bool;
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct bad_cast {
            pub _base: root::std::exception,
        }
        #[test]
        fn bindgen_test_layout_bad_cast() {
            assert_eq!(
                ::std::mem::size_of::<bad_cast>(),
                8usize,
                concat!("Size of: ", stringify!(bad_cast))
            );
            assert_eq!(
                ::std::mem::align_of::<bad_cast>(),
                8usize,
                concat!("Alignment of ", stringify!(bad_cast))
            );
        }
        impl Default for bad_cast {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8bad_castD1Ev"]
            pub fn bad_cast_bad_cast_destructor(this: *mut root::std::bad_cast);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt8bad_cast4whatEv"]
            pub fn bad_cast_what(
                this: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct bad_typeid {
            pub _base: root::std::exception,
        }
        #[test]
        fn bindgen_test_layout_bad_typeid() {
            assert_eq!(
                ::std::mem::size_of::<bad_typeid>(),
                8usize,
                concat!("Size of: ", stringify!(bad_typeid))
            );
            assert_eq!(
                ::std::mem::align_of::<bad_typeid>(),
                8usize,
                concat!("Alignment of ", stringify!(bad_typeid))
            );
        }
        impl Default for bad_typeid {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt10bad_typeidD1Ev"]
            pub fn bad_typeid_bad_typeid_destructor(
                this: *mut root::std::bad_typeid,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt10bad_typeid4whatEv"]
            pub fn bad_typeid_what(
                this: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
        pub mod __exception_ptr {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            #[derive(Debug)]
            pub struct exception_ptr {
                pub _M_exception_object: *mut ::std::os::raw::c_void,
            }
            #[test]
            fn bindgen_test_layout_exception_ptr() {
                assert_eq!(
                    ::std::mem::size_of::<exception_ptr>(),
                    8usize,
                    concat!("Size of: ", stringify!(exception_ptr))
                );
                assert_eq!(
                    ::std::mem::align_of::<exception_ptr>(),
                    8usize,
                    concat!("Alignment of ", stringify!(exception_ptr))
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<exception_ptr>()))
                            ._M_exception_object
                            as *const _ as usize
                    },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(exception_ptr),
                        "::",
                        stringify!(_M_exception_object)
                    )
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt15__exception_ptr13exception_ptr4swapERS0_"]
                pub fn exception_ptr_swap(
                    this: *mut root::std::__exception_ptr::exception_ptr,
                    arg1: *mut root::std::__exception_ptr::exception_ptr,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv"]
                pub fn exception_ptr___cxa_exception_type(
                    this: *const root::std::__exception_ptr::exception_ptr,
                ) -> *const root::std::type_info;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt15__exception_ptr13exception_ptrC1Ev"]
                pub fn exception_ptr_exception_ptr(
                    this: *mut root::std::__exception_ptr::exception_ptr,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt15__exception_ptr13exception_ptrC1ERKS0_"]
                pub fn exception_ptr_exception_ptr1(
                    this: *mut root::std::__exception_ptr::exception_ptr,
                    arg1: *const root::std::__exception_ptr::exception_ptr,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt15__exception_ptr13exception_ptrD1Ev"]
                pub fn exception_ptr_exception_ptr_destructor(
                    this: *mut root::std::__exception_ptr::exception_ptr,
                );
            }
            impl Default for exception_ptr {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            impl exception_ptr {
                #[inline]
                pub unsafe fn swap(
                    &mut self,
                    arg1: *mut root::std::__exception_ptr::exception_ptr,
                ) {
                    exception_ptr_swap(self, arg1)
                }
                #[inline]
                pub unsafe fn __cxa_exception_type(
                    &self,
                ) -> *const root::std::type_info {
                    exception_ptr___cxa_exception_type(self)
                }
                #[inline]
                pub unsafe fn new() -> Self {
                    let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                    exception_ptr_exception_ptr(__bindgen_tmp.as_mut_ptr());
                    __bindgen_tmp.assume_init()
                }
                #[inline]
                pub unsafe fn new1(
                    arg1: *const root::std::__exception_ptr::exception_ptr,
                ) -> Self {
                    let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                    exception_ptr_exception_ptr1(
                        __bindgen_tmp.as_mut_ptr(),
                        arg1,
                    );
                    __bindgen_tmp.assume_init()
                }
                #[inline]
                pub unsafe fn destruct(&mut self) {
                    exception_ptr_exception_ptr_destructor(self)
                }
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt17current_exceptionv"]
            pub fn current_exception(
            ) -> root::std::__exception_ptr::exception_ptr;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE"]
            pub fn rethrow_exception(
                arg1: root::std::__exception_ptr::exception_ptr,
            );
        }
        #[repr(C)]
        pub struct nested_exception__bindgen_vtable(::std::os::raw::c_void);
        #[repr(C)]
        #[derive(Debug)]
        pub struct nested_exception {
            pub vtable_: *const nested_exception__bindgen_vtable,
            pub _M_ptr: root::std::__exception_ptr::exception_ptr,
        }
        #[test]
        fn bindgen_test_layout_nested_exception() {
            assert_eq!(
                ::std::mem::size_of::<nested_exception>(),
                16usize,
                concat!("Size of: ", stringify!(nested_exception))
            );
            assert_eq!(
                ::std::mem::align_of::<nested_exception>(),
                8usize,
                concat!("Alignment of ", stringify!(nested_exception))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<nested_exception>()))._M_ptr
                        as *const _ as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(nested_exception),
                    "::",
                    stringify!(_M_ptr)
                )
            );
        }
        impl Default for nested_exception {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt16nested_exceptionD1Ev"]
            pub fn nested_exception_nested_exception_destructor(
                this: *mut root::std::nested_exception,
            );
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct _Nested_exception<_Except> {
            pub _base: _Except,
            pub _base_1: root::std::nested_exception,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Except>>,
        }
        impl<_Except> Default for _Nested_exception<_Except> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub type __rethrow_if_nested_cond = u8;
        #[repr(C)]
        #[derive(Debug)]
        pub struct bad_alloc {
            pub _base: root::std::exception,
        }
        #[test]
        fn bindgen_test_layout_bad_alloc() {
            assert_eq!(
                ::std::mem::size_of::<bad_alloc>(),
                8usize,
                concat!("Size of: ", stringify!(bad_alloc))
            );
            assert_eq!(
                ::std::mem::align_of::<bad_alloc>(),
                8usize,
                concat!("Alignment of ", stringify!(bad_alloc))
            );
        }
        impl Default for bad_alloc {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt9bad_allocD1Ev"]
            pub fn bad_alloc_bad_alloc_destructor(
                this: *mut root::std::bad_alloc,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt9bad_alloc4whatEv"]
            pub fn bad_alloc_what(
                this: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct bad_array_new_length {
            pub _base: root::std::bad_alloc,
        }
        #[test]
        fn bindgen_test_layout_bad_array_new_length() {
            assert_eq!(
                ::std::mem::size_of::<bad_array_new_length>(),
                8usize,
                concat!("Size of: ", stringify!(bad_array_new_length))
            );
            assert_eq!(
                ::std::mem::align_of::<bad_array_new_length>(),
                8usize,
                concat!("Alignment of ", stringify!(bad_array_new_length))
            );
        }
        impl Default for bad_array_new_length {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt20bad_array_new_lengthD1Ev"]
            pub fn bad_array_new_length_bad_array_new_length_destructor(
                this: *mut root::std::bad_array_new_length,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt20bad_array_new_length4whatEv"]
            pub fn bad_array_new_length_what(
                this: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct nothrow_t {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_nothrow_t() {
            assert_eq!(
                ::std::mem::size_of::<nothrow_t>(),
                1usize,
                concat!("Size of: ", stringify!(nothrow_t))
            );
            assert_eq!(
                ::std::mem::align_of::<nothrow_t>(),
                1usize,
                concat!("Alignment of ", stringify!(nothrow_t))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt7nothrow"]
            pub static nothrow: root::std::nothrow_t;
        }
        pub type new_handler = ::std::option::Option<unsafe extern "C" fn()>;
        extern "C" {
            #[link_name = "\u{1}_ZSt15set_new_handlerPFvvE"]
            pub fn set_new_handler(
                arg1: root::std::new_handler,
            ) -> root::std::new_handler;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt15get_new_handlerv"]
            pub fn get_new_handler() -> root::std::new_handler;
        }
        pub type __allocator_base = root::__gnu_cxx::new_allocator;
        #[test]
        fn __bindgen_test_layout_allocator_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::allocator>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::allocator)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::allocator>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::allocator)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct allocator {
            pub _address: u8,
        }
        pub type allocator_size_type = root::std::size_t;
        pub type allocator_difference_type = isize;
        pub type allocator_pointer<_Tp> = *mut _Tp;
        pub type allocator_const_pointer<_Tp> = *const _Tp;
        pub type allocator_reference<_Tp> = *mut _Tp;
        pub type allocator_const_reference<_Tp> = *const _Tp;
        pub type allocator_value_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct allocator_rebind {
            pub _address: u8,
        }
        pub type allocator_rebind_other = root::std::allocator;
        pub type allocator_propagate_on_container_move_assignment =
            root::std::true_type;
        pub type allocator_is_always_equal = root::std::true_type;
        impl Default for allocator {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[test]
        fn __bindgen_test_layout_allocator_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::allocator>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::allocator)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::allocator>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::allocator)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation()
        {
            assert_eq!(
                ::std::mem::size_of::<root::std::allocator>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::allocator)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::allocator>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::allocator)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct unary_function {
            pub _address: u8,
        }
        pub type unary_function_argument_type<_Arg> = _Arg;
        pub type unary_function_result_type<_Result> = _Result;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct binary_function {
            pub _address: u8,
        }
        pub type binary_function_first_argument_type<_Arg1> = _Arg1;
        pub type binary_function_second_argument_type<_Arg2> = _Arg2;
        pub type binary_function_result_type<_Result> = _Result;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_transparent {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct plus {
            pub _address: u8,
        }
        impl Default for plus {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct minus {
            pub _address: u8,
        }
        impl Default for minus {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct multiplies {
            pub _address: u8,
        }
        impl Default for multiplies {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct divides {
            pub _address: u8,
        }
        impl Default for divides {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct modulus {
            pub _address: u8,
        }
        impl Default for modulus {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct negate {
            pub _address: u8,
        }
        impl Default for negate {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[test]
        fn __bindgen_test_layout_plus_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::plus>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::plus)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::plus>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::plus)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_minus_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::minus>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::minus)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::minus>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::minus)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_multiplies_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::multiplies>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::multiplies)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::multiplies>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::multiplies)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_divides_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::divides>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::divides)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::divides>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::divides)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_modulus_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::modulus>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::modulus)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::modulus>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::modulus)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_negate_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::negate>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::negate)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::negate>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::negate)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct equal_to {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct not_equal_to {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct greater {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct less {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct greater_equal {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct less_equal {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout_equal_to_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::equal_to>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::equal_to)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::equal_to>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::equal_to)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_not_equal_to_open0_void_close0_instantiation()
        {
            assert_eq!(
                ::std::mem::size_of::<root::std::not_equal_to>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::not_equal_to)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::not_equal_to>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::not_equal_to)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_greater_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::greater>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::greater)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::greater>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::greater)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_less_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::less>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::less)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::less>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::less)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_greater_equal_open0_void_close0_instantiation()
        {
            assert_eq!(
                ::std::mem::size_of::<root::std::greater_equal>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::greater_equal)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::greater_equal>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::greater_equal)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_less_equal_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::less_equal>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::less_equal)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::less_equal>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::less_equal)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct logical_and {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct logical_or {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct logical_not {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout_logical_and_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::logical_and>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::logical_and)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::logical_and>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::logical_and)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_logical_or_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::logical_or>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::logical_or)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::logical_or>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::logical_or)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_logical_not_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::logical_not>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::logical_not)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::logical_not>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::logical_not)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct bit_and {
            pub _address: u8,
        }
        impl Default for bit_and {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct bit_or {
            pub _address: u8,
        }
        impl Default for bit_or {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct bit_xor {
            pub _address: u8,
        }
        impl Default for bit_xor {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct bit_not {
            pub _address: u8,
        }
        impl Default for bit_not {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[test]
        fn __bindgen_test_layout_bit_and_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::bit_and>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::bit_and)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::bit_and>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::bit_and)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_bit_or_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::bit_or>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::bit_or)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::bit_or>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::bit_or)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_bit_xor_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::bit_xor>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::bit_xor)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::bit_xor>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::bit_xor)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_bit_not_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::bit_not>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::bit_not)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::bit_not>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::bit_not)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct unary_negate<_Predicate> {
            pub _M_pred: _Predicate,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
        }
        impl<_Predicate> Default for unary_negate<_Predicate> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct binary_negate<_Predicate> {
            pub _M_pred: _Predicate,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
        }
        impl<_Predicate> Default for binary_negate<_Predicate> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct pointer_to_unary_function<_Arg, _Result> {
            pub _M_ptr: ::std::option::Option<
                unsafe extern "C" fn(arg1: _Arg) -> _Result,
            >,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
            pub _phantom_1:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Result>>,
        }
        impl<_Arg, _Result> Default for pointer_to_unary_function<_Arg, _Result> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct pointer_to_binary_function<_Arg1, _Arg2, _Result> {
            pub _M_ptr: ::std::option::Option<
                unsafe extern "C" fn(arg1: _Arg1, arg2: _Arg2) -> _Result,
            >,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg1>>,
            pub _phantom_1:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg2>>,
            pub _phantom_2:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Result>>,
        }
        impl<_Arg1, _Arg2, _Result> Default
            for pointer_to_binary_function<_Arg1, _Arg2, _Result>
        {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Identity {
            pub _address: u8,
        }
        impl Default for _Identity {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Select1st {
            pub _address: u8,
        }
        impl Default for _Select1st {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Select2nd {
            pub _address: u8,
        }
        impl Default for _Select2nd {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct mem_fun_t<_Ret> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
        }
        impl<_Ret> Default for mem_fun_t<_Ret> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct const_mem_fun_t<_Ret> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
        }
        impl<_Ret> Default for const_mem_fun_t<_Ret> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct mem_fun_ref_t<_Ret> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
        }
        impl<_Ret> Default for mem_fun_ref_t<_Ret> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct const_mem_fun_ref_t<_Ret> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
        }
        impl<_Ret> Default for const_mem_fun_ref_t<_Ret> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct mem_fun1_t<_Ret, _Arg> {
            pub _M_f:
                ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
            pub _phantom_1:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
        }
        impl<_Ret, _Arg> Default for mem_fun1_t<_Ret, _Arg> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct const_mem_fun1_t<_Ret, _Arg> {
            pub _M_f:
                ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
            pub _phantom_1:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
        }
        impl<_Ret, _Arg> Default for const_mem_fun1_t<_Ret, _Arg> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct mem_fun1_ref_t<_Ret, _Arg> {
            pub _M_f:
                ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
            pub _phantom_1:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
        }
        impl<_Ret, _Arg> Default for mem_fun1_ref_t<_Ret, _Arg> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct const_mem_fun1_ref_t<_Ret, _Arg> {
            pub _M_f:
                ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
            pub _phantom_1:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
        }
        impl<_Ret, _Arg> Default for const_mem_fun1_ref_t<_Ret, _Arg> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        pub struct binder1st<_Operation> {
            pub op: _Operation,
            pub value: [u8; 0usize],
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Operation>>,
        }
        impl<_Operation> Default for binder1st<_Operation> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        pub struct binder2nd<_Operation> {
            pub op: _Operation,
            pub value: [u8; 0usize],
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Operation>>,
        }
        impl<_Operation> Default for binder2nd<_Operation> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __allocator_traits_base {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __allocator_traits_base___rebind {
            pub _address: u8,
        }
        impl Default for __allocator_traits_base___rebind {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub type __allocator_traits_base___pointer = [u8; 0usize];
        pub type __allocator_traits_base___c_pointer = [u8; 0usize];
        pub type __allocator_traits_base___v_pointer = [u8; 0usize];
        pub type __allocator_traits_base___cv_pointer = [u8; 0usize];
        pub type __allocator_traits_base___pocca = [u8; 0usize];
        pub type __allocator_traits_base___pocma = [u8; 0usize];
        pub type __allocator_traits_base___pocs = [u8; 0usize];
        pub type __allocator_traits_base___equal = [u8; 0usize];
        #[test]
        fn bindgen_test_layout___allocator_traits_base() {
            assert_eq!(
                ::std::mem::size_of::<__allocator_traits_base>(),
                1usize,
                concat!("Size of: ", stringify!(__allocator_traits_base))
            );
            assert_eq!(
                ::std::mem::align_of::<__allocator_traits_base>(),
                1usize,
                concat!("Alignment of ", stringify!(__allocator_traits_base))
            );
        }
        pub type __alloc_rebind = root::std::__allocator_traits_base;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct allocator_traits {
            pub _address: u8,
        }
        pub type allocator_traits_allocator_type<_Alloc> = _Alloc;
        pub type allocator_traits_value_type = [u8; 0usize];
        pub type allocator_traits_pointer = root::std::__detected_or_t;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct allocator_traits__Ptr {
            pub _address: u8,
        }
        pub type allocator_traits__Ptr_type = [u8; 0usize];
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct allocator_traits__Diff {
            pub _address: u8,
        }
        pub type allocator_traits__Diff_type = root::std::pointer_traits;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_traits__Size {
            pub _address: u8,
        }
        impl Default for allocator_traits__Size {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub type allocator_traits_const_pointer = [u8; 0usize];
        pub type allocator_traits_void_pointer =
            root::std::allocator_traits__Ptr;
        pub type allocator_traits_const_void_pointer =
            root::std::allocator_traits__Ptr;
        pub type allocator_traits_difference_type = [u8; 0usize];
        pub type allocator_traits_size_type = [u8; 0usize];
        pub type allocator_traits_propagate_on_container_copy_assignment =
            root::std::__detected_or_t;
        pub type allocator_traits_propagate_on_container_move_assignment =
            root::std::__detected_or_t;
        pub type allocator_traits_propagate_on_container_swap =
            root::std::__detected_or_t;
        pub type allocator_traits_is_always_equal = root::std::__detected_or_t;
        pub type allocator_traits_rebind_alloc = root::std::__alloc_rebind;
        pub type allocator_traits_rebind_traits = root::std::allocator_traits;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct allocator_traits___construct_helper {
            pub _address: u8,
        }
        pub type allocator_traits___construct_helper_type<_Alloc> = _Alloc;
        pub type allocator_traits___has_construct =
            root::std::allocator_traits___construct_helper;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_copy_insertable_impl {
            pub _address: u8,
        }
        pub type __is_copy_insertable_impl__Traits =
            root::std::allocator_traits;
        pub type __is_copy_insertable_impl_type<_Alloc> = _Alloc;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_copy_insertable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_allocator {
            pub _base: root::std::false_type,
        }
        pub type _RequireAllocator = u8;
        pub const _Rb_tree_color__S_red: root::std::_Rb_tree_color = 0;
        pub const _Rb_tree_color__S_black: root::std::_Rb_tree_color = 1;
        pub type _Rb_tree_color = u32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Rb_tree_node_base {
            pub _M_color: root::std::_Rb_tree_color,
            pub _M_parent: root::std::_Rb_tree_node_base__Base_ptr,
            pub _M_left: root::std::_Rb_tree_node_base__Base_ptr,
            pub _M_right: root::std::_Rb_tree_node_base__Base_ptr,
        }
        pub type _Rb_tree_node_base__Base_ptr =
            *mut root::std::_Rb_tree_node_base;
        pub type _Rb_tree_node_base__Const_Base_ptr =
            *const root::std::_Rb_tree_node_base;
        #[test]
        fn bindgen_test_layout__Rb_tree_node_base() {
            assert_eq!(
                ::std::mem::size_of::<_Rb_tree_node_base>(),
                32usize,
                concat!("Size of: ", stringify!(_Rb_tree_node_base))
            );
            assert_eq!(
                ::std::mem::align_of::<_Rb_tree_node_base>(),
                8usize,
                concat!("Alignment of ", stringify!(_Rb_tree_node_base))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<_Rb_tree_node_base>()))._M_color
                        as *const _ as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Rb_tree_node_base),
                    "::",
                    stringify!(_M_color)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<_Rb_tree_node_base>()))._M_parent
                        as *const _ as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Rb_tree_node_base),
                    "::",
                    stringify!(_M_parent)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<_Rb_tree_node_base>()))._M_left
                        as *const _ as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Rb_tree_node_base),
                    "::",
                    stringify!(_M_left)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<_Rb_tree_node_base>()))._M_right
                        as *const _ as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Rb_tree_node_base),
                    "::",
                    stringify!(_M_right)
                )
            );
        }
        impl Default for _Rb_tree_node_base {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Rb_tree_key_compare<_Key_compare> {
            pub _M_key_compare: _Key_compare,
            pub _phantom_0: ::std::marker::PhantomData<
                ::std::cell::UnsafeCell<_Key_compare>,
            >,
        }
        impl<_Key_compare> Default for _Rb_tree_key_compare<_Key_compare> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Rb_tree_header {
            pub _M_header: root::std::_Rb_tree_node_base,
            pub _M_node_count: root::std::size_t,
        }
        #[test]
        fn bindgen_test_layout__Rb_tree_header() {
            assert_eq!(
                ::std::mem::size_of::<_Rb_tree_header>(),
                40usize,
                concat!("Size of: ", stringify!(_Rb_tree_header))
            );
            assert_eq!(
                ::std::mem::align_of::<_Rb_tree_header>(),
                8usize,
                concat!("Alignment of ", stringify!(_Rb_tree_header))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<_Rb_tree_header>()))._M_header
                        as *const _ as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Rb_tree_header),
                    "::",
                    stringify!(_M_header)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<_Rb_tree_header>()))._M_node_count
                        as *const _ as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Rb_tree_header),
                    "::",
                    stringify!(_M_node_count)
                )
            );
        }
        impl Default for _Rb_tree_header {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Rb_tree_node {
            pub _base: root::std::_Rb_tree_node_base,
            pub _M_storage: root::__gnu_cxx::__aligned_membuf,
        }
        pub type _Rb_tree_node__Link_type = *mut root::std::_Rb_tree_node;
        impl Default for _Rb_tree_node {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base"]
            pub fn _Rb_tree_increment(
                __x: *mut root::std::_Rb_tree_node_base,
            ) -> *mut root::std::_Rb_tree_node_base;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base"]
            pub fn _Rb_tree_increment1(
                __x: *const root::std::_Rb_tree_node_base,
            ) -> *const root::std::_Rb_tree_node_base;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base"]
            pub fn _Rb_tree_decrement(
                __x: *mut root::std::_Rb_tree_node_base,
            ) -> *mut root::std::_Rb_tree_node_base;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base"]
            pub fn _Rb_tree_decrement1(
                __x: *const root::std::_Rb_tree_node_base,
            ) -> *const root::std::_Rb_tree_node_base;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Rb_tree_iterator {
            pub _M_node: root::std::_Rb_tree_iterator__Base_ptr,
        }
        pub type _Rb_tree_iterator_value_type<_Tp> = _Tp;
        pub type _Rb_tree_iterator_reference<_Tp> = *mut _Tp;
        pub type _Rb_tree_iterator_pointer<_Tp> = *mut _Tp;
        pub type _Rb_tree_iterator_iterator_category =
            root::std::bidirectional_iterator_tag;
        pub type _Rb_tree_iterator_difference_type = isize;
        pub type _Rb_tree_iterator__Self = root::std::_Rb_tree_iterator;
        pub type _Rb_tree_iterator__Base_ptr =
            root::std::_Rb_tree_node_base__Base_ptr;
        pub type _Rb_tree_iterator__Link_type = *mut root::std::_Rb_tree_node;
        impl Default for _Rb_tree_iterator {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Rb_tree_const_iterator {
            pub _M_node: root::std::_Rb_tree_const_iterator__Base_ptr,
        }
        pub type _Rb_tree_const_iterator_value_type<_Tp> = _Tp;
        pub type _Rb_tree_const_iterator_reference<_Tp> = *const _Tp;
        pub type _Rb_tree_const_iterator_pointer<_Tp> = *const _Tp;
        pub type _Rb_tree_const_iterator_iterator =
            root::std::_Rb_tree_iterator;
        pub type _Rb_tree_const_iterator_iterator_category =
            root::std::bidirectional_iterator_tag;
        pub type _Rb_tree_const_iterator_difference_type = isize;
        pub type _Rb_tree_const_iterator__Self =
            root::std::_Rb_tree_const_iterator;
        pub type _Rb_tree_const_iterator__Base_ptr =
            root::std::_Rb_tree_node_base__Const_Base_ptr;
        pub type _Rb_tree_const_iterator__Link_type =
            *const root::std::_Rb_tree_node;
        impl Default for _Rb_tree_const_iterator {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_"]
            pub fn _Rb_tree_insert_and_rebalance(
                __insert_left: bool,
                __x: *mut root::std::_Rb_tree_node_base,
                __p: *mut root::std::_Rb_tree_node_base,
                __header: *mut root::std::_Rb_tree_node_base,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_"]
            pub fn _Rb_tree_rebalance_for_erase(
                __z: *mut root::std::_Rb_tree_node_base,
                __header: *mut root::std::_Rb_tree_node_base,
            ) -> *mut root::std::_Rb_tree_node_base;
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __has_is_transparent {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default)]
        pub struct _Rb_tree {
            pub _M_impl: u8,
        }
        pub type _Rb_tree__Node_allocator = [u8; 0usize];
        pub type _Rb_tree__Alloc_traits = root::__gnu_cxx::__alloc_traits;
        pub type _Rb_tree__Base_ptr = *mut root::std::_Rb_tree_node_base;
        pub type _Rb_tree__Const_Base_ptr =
            *const root::std::_Rb_tree_node_base;
        pub type _Rb_tree__Link_type = *mut root::std::_Rb_tree_node;
        pub type _Rb_tree__Const_Link_type = *const root::std::_Rb_tree_node;
        #[repr(C)]
        #[derive(Debug)]
        pub struct _Rb_tree__Reuse_or_alloc_node {
            pub _M_root: root::std::_Rb_tree__Base_ptr,
            pub _M_nodes: root::std::_Rb_tree__Base_ptr,
            pub _M_t: *mut root::std::_Rb_tree,
        }
        impl Default for _Rb_tree__Reuse_or_alloc_node {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Rb_tree__Alloc_node {
            pub _M_t: *mut root::std::_Rb_tree,
        }
        impl Default for _Rb_tree__Alloc_node {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub type _Rb_tree_key_type<_Key> = _Key;
        pub type _Rb_tree_value_type<_Val> = _Val;
        pub type _Rb_tree_pointer<_Val> =
            *mut root::std::_Rb_tree_value_type<_Val>;
        pub type _Rb_tree_const_pointer<_Val> =
            *const root::std::_Rb_tree_value_type<_Val>;
        pub type _Rb_tree_reference<_Val> =
            *mut root::std::_Rb_tree_value_type<_Val>;
        pub type _Rb_tree_const_reference<_Val> =
            *const root::std::_Rb_tree_value_type<_Val>;
        pub type _Rb_tree_size_type = root::std::size_t;
        pub type _Rb_tree_difference_type = isize;
        pub type _Rb_tree_allocator_type<_Alloc> = _Alloc;
        pub type _Rb_tree_reverse_iterator =
            root::std::reverse_iterator<root::std::_Rb_tree_iterator>;
        pub type _Rb_tree_const_reverse_iterator =
            root::std::reverse_iterator<root::std::_Rb_tree_const_iterator>;
        pub type _Rb_tree__Rb_tree_impl__Base_key_compare<_Key_compare> =
            root::std::_Rb_tree_key_compare<_Key_compare>;
        extern "C" {
            #[link_name = "\u{1}_ZSt20_Rb_tree_black_countPKSt18_Rb_tree_node_baseS1_"]
            pub fn _Rb_tree_black_count(
                __node: *const root::std::_Rb_tree_node_base,
                __root: *const root::std::_Rb_tree_node_base,
            ) -> ::std::os::raw::c_uint;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct initializer_list<_E> {
            pub _M_array: root::std::initializer_list_iterator<_E>,
            pub _M_len: root::std::initializer_list_size_type,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_E>>,
        }
        pub type initializer_list_value_type<_E> = _E;
        pub type initializer_list_reference<_E> = *const _E;
        pub type initializer_list_const_reference<_E> = *const _E;
        pub type initializer_list_size_type = root::std::size_t;
        pub type initializer_list_iterator<_E> = *const _E;
        pub type initializer_list_const_iterator<_E> = *const _E;
        impl<_E> Default for initializer_list<_E> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct tuple_size {
            pub _address: u8,
        }
        pub type __enable_if_has_tuple_size<_Tp> = _Tp;
        pub type __tuple_element_t = u8;
        pub type tuple_element_t = u8;
        pub type _Build_index_tuple__IdxTuple = u8;
        pub type _Build_index_tuple___type = u8;
        pub type integer_sequence_value_type<_Tp> = _Tp;
        pub type make_integer_sequence = u8;
        pub type index_sequence = u8;
        pub type make_index_sequence = root::std::make_integer_sequence;
        pub type index_sequence_for = root::std::make_index_sequence;
        pub type streamoff = ::std::os::raw::c_long;
        pub type streamsize = isize;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct fpos<_StateT> {
            pub _M_off: root::std::streamoff,
            pub _M_state: _StateT,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_StateT>>,
        }
        impl<_StateT> Default for fpos<_StateT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub type streampos = root::std::fpos<root::mbstate_t>;
        pub type wstreampos = root::std::fpos<root::mbstate_t>;
        pub type u16streampos = root::std::fpos<root::mbstate_t>;
        pub type u32streampos = root::std::fpos<root::mbstate_t>;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct char_traits {
            pub _address: u8,
        }
        impl Default for char_traits {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[test]
        fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_char_traits_open0_char16_t_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_char_traits_open0_char32_t_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
        }
        pub type __c_locale = root::__locale_t;
        pub type ios = root::std::basic_ios<::std::os::raw::c_char>;
        pub type streambuf = root::std::basic_streambuf<::std::os::raw::c_char>;
        pub type istream = root::std::basic_istream<::std::os::raw::c_char>;
        pub type ostream = root::std::basic_ostream<::std::os::raw::c_char>;
        pub type iostream = root::std::basic_iostream<::std::os::raw::c_char>;
        pub type stringbuf = root::std::basic_stringbuf<::std::os::raw::c_char>;
        pub type istringstream =
            root::std::basic_istringstream<::std::os::raw::c_char>;
        pub type ostringstream =
            root::std::basic_ostringstream<::std::os::raw::c_char>;
        pub type stringstream =
            root::std::basic_stringstream<::std::os::raw::c_char>;
        pub type filebuf = root::std::basic_filebuf<::std::os::raw::c_char>;
        pub type ifstream = root::std::basic_ifstream<::std::os::raw::c_char>;
        pub type ofstream = root::std::basic_ofstream<::std::os::raw::c_char>;
        pub type fstream = root::std::basic_fstream<::std::os::raw::c_char>;
        pub type wios = root::std::basic_ios<u32>;
        pub type wstreambuf = root::std::basic_streambuf<u32>;
        pub type wistream = root::std::basic_istream<u32>;
        pub type wostream = root::std::basic_ostream<u32>;
        pub type wiostream = root::std::basic_iostream<u32>;
        pub type wstringbuf = root::std::basic_stringbuf<u32>;
        pub type wistringstream = root::std::basic_istringstream<u32>;
        pub type wostringstream = root::std::basic_ostringstream<u32>;
        pub type wstringstream = root::std::basic_stringstream<u32>;
        pub type wfilebuf = root::std::basic_filebuf<u32>;
        pub type wifstream = root::std::basic_ifstream<u32>;
        pub type wofstream = root::std::basic_ofstream<u32>;
        pub type wfstream = root::std::basic_fstream<u32>;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct time_base {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct time_put {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct time_put_byname {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct money_base {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct messages_base {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct valarray {
            pub _address: u8,
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_"]
            pub fn getline(
                __in: *mut root::std::basic_istream<::std::os::raw::c_char>,
                __str: *mut root::std::basic_string<::std::os::raw::c_char>,
                __delim: ::std::os::raw::c_char,
            ) -> *mut root::std::basic_istream<::std::os::raw::c_char>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt7getlineIwSt11char_traitsIwESaIwEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_"]
            pub fn getline1(
                __in: *mut root::std::basic_istream<u32>,
                __str: *mut root::std::basic_string<u32>,
                __delim: u32,
            ) -> *mut root::std::basic_istream<u32>;
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __hash_base {
            pub _address: u8,
        }
        pub type __hash_base_result_type<_Result> = _Result;
        pub type __hash_base_argument_type<_Arg> = _Arg;
        #[repr(C)]
        #[derive(Debug, Default)]
        pub struct __poison_hash {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default)]
        pub struct hash {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_bool__close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_signed_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_unsigned_char_close0_instantiation()
        {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_char16_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_char32_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_short_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_int_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_long_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_unsigned_short_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_unsigned_int_close0_instantiation()
        {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_unsigned_long_close0_instantiation()
        {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_unsigned_long_long_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct _Hash_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout__Hash_impl() {
            assert_eq!(
                ::std::mem::size_of::<_Hash_impl>(),
                1usize,
                concat!("Size of: ", stringify!(_Hash_impl))
            );
            assert_eq!(
                ::std::mem::align_of::<_Hash_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(_Hash_impl))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct _Fnv_hash_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout__Fnv_hash_impl() {
            assert_eq!(
                ::std::mem::size_of::<_Fnv_hash_impl>(),
                1usize,
                concat!("Size of: ", stringify!(_Fnv_hash_impl))
            );
            assert_eq!(
                ::std::mem::align_of::<_Fnv_hash_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(_Fnv_hash_impl))
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_float_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_double_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_long_double_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_fast_hash {
            pub _base: root::std::true_type,
        }
        #[test]
        fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_long_double_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_basic_string_open1_wchar_t_char_traits_open2_wchar_t_close2_allocator_open2_wchar_t_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_open2_wchar_t_char_traits_open3_wchar_t_close3_allocator_open3_wchar_t_close3_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_basic_string_open1_char16_t_char_traits_open2_char16_t_close2_allocator_open2_char16_t_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_open2_char16_t_char_traits_open3_char16_t_close3_allocator_open3_char16_t_close3_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_basic_string_open1_char32_t_char_traits_open2_char32_t_close2_allocator_open2_char32_t_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_open2_char32_t_char_traits_open3_char32_t_close3_allocator_open3_char32_t_close3_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
        }
        extern "C" {
            pub static npos: root::std::basic_string_size_type;
        }
        #[test]
        fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<
                    root::std::basic_string<::std::os::raw::c_char>,
                >(),
                32usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_string<::std::os::raw::c_char>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<
                    root::std::basic_string<::std::os::raw::c_char>,
                >(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_string<::std::os::raw::c_char>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_string_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::basic_string<u32>>(),
                32usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_string<u32>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::basic_string<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_string<u32>)
                )
            );
        }
        #[repr(C)]
        pub struct __cow_string {
            pub __bindgen_anon_1: root::std::__cow_string__bindgen_ty_1,
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub union __cow_string__bindgen_ty_1 {
            pub _M_p: *const ::std::os::raw::c_char,
            pub _M_bytes: [::std::os::raw::c_char; 8usize],
            _bindgen_union_align: u64,
        }
        #[test]
        fn bindgen_test_layout___cow_string__bindgen_ty_1() {
            assert_eq!(
                ::std::mem::size_of::<__cow_string__bindgen_ty_1>(),
                8usize,
                concat!("Size of: ", stringify!(__cow_string__bindgen_ty_1))
            );
            assert_eq!(
                ::std::mem::align_of::<__cow_string__bindgen_ty_1>(),
                8usize,
                concat!(
                    "Alignment of ",
                    stringify!(__cow_string__bindgen_ty_1)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<__cow_string__bindgen_ty_1>()))._M_p
                        as *const _ as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__cow_string__bindgen_ty_1),
                    "::",
                    stringify!(_M_p)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<__cow_string__bindgen_ty_1>()))
                        ._M_bytes as *const _ as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__cow_string__bindgen_ty_1),
                    "::",
                    stringify!(_M_bytes)
                )
            );
        }
        impl Default for __cow_string__bindgen_ty_1 {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[test]
        fn bindgen_test_layout___cow_string() {
            assert_eq!(
                ::std::mem::size_of::<__cow_string>(),
                8usize,
                concat!("Size of: ", stringify!(__cow_string))
            );
            assert_eq!(
                ::std::mem::align_of::<__cow_string>(),
                8usize,
                concat!("Alignment of ", stringify!(__cow_string))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12__cow_stringC1Ev"]
            pub fn __cow_string___cow_string(
                this: *mut root::std::__cow_string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12__cow_stringC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn __cow_string___cow_string1(
                this: *mut root::std::__cow_string,
                arg1: *const root::std::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12__cow_stringC1EPKcm"]
            pub fn __cow_string___cow_string2(
                this: *mut root::std::__cow_string,
                arg1: *const ::std::os::raw::c_char,
                arg2: root::std::size_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12__cow_stringC1ERKS_"]
            pub fn __cow_string___cow_string3(
                this: *mut root::std::__cow_string,
                arg1: *const root::std::__cow_string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12__cow_stringC1EOS_"]
            pub fn __cow_string___cow_string4(
                this: *mut root::std::__cow_string,
                arg1: *mut root::std::__cow_string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12__cow_stringD1Ev"]
            pub fn __cow_string___cow_string_destructor(
                this: *mut root::std::__cow_string,
            );
        }
        impl Default for __cow_string {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl __cow_string {
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                __cow_string___cow_string(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(arg1: *const root::std::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                __cow_string___cow_string1(__bindgen_tmp.as_mut_ptr(), arg1);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(
                arg1: *const ::std::os::raw::c_char,
                arg2: root::std::size_t,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                __cow_string___cow_string2(
                    __bindgen_tmp.as_mut_ptr(),
                    arg1,
                    arg2,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new3(arg1: *const root::std::__cow_string) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                __cow_string___cow_string3(__bindgen_tmp.as_mut_ptr(), arg1);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new4(arg1: *mut root::std::__cow_string) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                __cow_string___cow_string4(__bindgen_tmp.as_mut_ptr(), arg1);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                __cow_string___cow_string_destructor(self)
            }
        }
        pub type __sso_string = root::std::basic_string<::std::os::raw::c_char>;
        #[repr(C)]
        pub struct logic_error {
            pub _base: root::std::exception,
            pub _M_msg: root::std::__cow_string,
        }
        #[test]
        fn bindgen_test_layout_logic_error() {
            assert_eq!(
                ::std::mem::size_of::<logic_error>(),
                16usize,
                concat!("Size of: ", stringify!(logic_error))
            );
            assert_eq!(
                ::std::mem::align_of::<logic_error>(),
                8usize,
                concat!("Alignment of ", stringify!(logic_error))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<logic_error>()))._M_msg as *const _
                        as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(logic_error),
                    "::",
                    stringify!(_M_msg)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt11logic_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn logic_error_logic_error(
                this: *mut root::std::logic_error,
                __arg: *const root::std::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt11logic_errorC1EPKc"]
            pub fn logic_error_logic_error1(
                this: *mut root::std::logic_error,
                arg1: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt11logic_errorC1ERKS_"]
            pub fn logic_error_logic_error2(
                this: *mut root::std::logic_error,
                arg1: *const root::std::logic_error,
            );
        }
        impl Default for logic_error {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl logic_error {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                logic_error_logic_error(__bindgen_tmp.as_mut_ptr(), __arg);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                logic_error_logic_error1(__bindgen_tmp.as_mut_ptr(), arg1);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(arg1: *const root::std::logic_error) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                logic_error_logic_error2(__bindgen_tmp.as_mut_ptr(), arg1);
                __bindgen_tmp.assume_init()
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt11logic_errorD1Ev"]
            pub fn logic_error_logic_error_destructor(
                this: *mut root::std::logic_error,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt11logic_error4whatEv"]
            pub fn logic_error_what(
                this: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
        #[repr(C)]
        pub struct domain_error {
            pub _base: root::std::logic_error,
        }
        #[test]
        fn bindgen_test_layout_domain_error() {
            assert_eq!(
                ::std::mem::size_of::<domain_error>(),
                16usize,
                concat!("Size of: ", stringify!(domain_error))
            );
            assert_eq!(
                ::std::mem::align_of::<domain_error>(),
                8usize,
                concat!("Alignment of ", stringify!(domain_error))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12domain_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn domain_error_domain_error(
                this: *mut root::std::domain_error,
                __arg: *const root::std::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12domain_errorC1EPKc"]
            pub fn domain_error_domain_error1(
                this: *mut root::std::domain_error,
                arg1: *const ::std::os::raw::c_char,
            );
        }
        impl Default for domain_error {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl domain_error {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                domain_error_domain_error(__bindgen_tmp.as_mut_ptr(), __arg);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                domain_error_domain_error1(__bindgen_tmp.as_mut_ptr(), arg1);
                __bindgen_tmp.assume_init()
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12domain_errorD1Ev"]
            pub fn domain_error_domain_error_destructor(
                this: *mut root::std::domain_error,
            );
        }
        #[repr(C)]
        pub struct invalid_argument {
            pub _base: root::std::logic_error,
        }
        #[test]
        fn bindgen_test_layout_invalid_argument() {
            assert_eq!(
                ::std::mem::size_of::<invalid_argument>(),
                16usize,
                concat!("Size of: ", stringify!(invalid_argument))
            );
            assert_eq!(
                ::std::mem::align_of::<invalid_argument>(),
                8usize,
                concat!("Alignment of ", stringify!(invalid_argument))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt16invalid_argumentC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn invalid_argument_invalid_argument(
                this: *mut root::std::invalid_argument,
                __arg: *const root::std::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt16invalid_argumentC1EPKc"]
            pub fn invalid_argument_invalid_argument1(
                this: *mut root::std::invalid_argument,
                arg1: *const ::std::os::raw::c_char,
            );
        }
        impl Default for invalid_argument {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl invalid_argument {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                invalid_argument_invalid_argument(
                    __bindgen_tmp.as_mut_ptr(),
                    __arg,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                invalid_argument_invalid_argument1(
                    __bindgen_tmp.as_mut_ptr(),
                    arg1,
                );
                __bindgen_tmp.assume_init()
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt16invalid_argumentD1Ev"]
            pub fn invalid_argument_invalid_argument_destructor(
                this: *mut root::std::invalid_argument,
            );
        }
        #[repr(C)]
        pub struct length_error {
            pub _base: root::std::logic_error,
        }
        #[test]
        fn bindgen_test_layout_length_error() {
            assert_eq!(
                ::std::mem::size_of::<length_error>(),
                16usize,
                concat!("Size of: ", stringify!(length_error))
            );
            assert_eq!(
                ::std::mem::align_of::<length_error>(),
                8usize,
                concat!("Alignment of ", stringify!(length_error))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12length_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn length_error_length_error(
                this: *mut root::std::length_error,
                __arg: *const root::std::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12length_errorC1EPKc"]
            pub fn length_error_length_error1(
                this: *mut root::std::length_error,
                arg1: *const ::std::os::raw::c_char,
            );
        }
        impl Default for length_error {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl length_error {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                length_error_length_error(__bindgen_tmp.as_mut_ptr(), __arg);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                length_error_length_error1(__bindgen_tmp.as_mut_ptr(), arg1);
                __bindgen_tmp.assume_init()
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12length_errorD1Ev"]
            pub fn length_error_length_error_destructor(
                this: *mut root::std::length_error,
            );
        }
        #[repr(C)]
        pub struct out_of_range {
            pub _base: root::std::logic_error,
        }
        #[test]
        fn bindgen_test_layout_out_of_range() {
            assert_eq!(
                ::std::mem::size_of::<out_of_range>(),
                16usize,
                concat!("Size of: ", stringify!(out_of_range))
            );
            assert_eq!(
                ::std::mem::align_of::<out_of_range>(),
                8usize,
                concat!("Alignment of ", stringify!(out_of_range))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12out_of_rangeC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn out_of_range_out_of_range(
                this: *mut root::std::out_of_range,
                __arg: *const root::std::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12out_of_rangeC1EPKc"]
            pub fn out_of_range_out_of_range1(
                this: *mut root::std::out_of_range,
                arg1: *const ::std::os::raw::c_char,
            );
        }
        impl Default for out_of_range {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl out_of_range {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                out_of_range_out_of_range(__bindgen_tmp.as_mut_ptr(), __arg);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                out_of_range_out_of_range1(__bindgen_tmp.as_mut_ptr(), arg1);
                __bindgen_tmp.assume_init()
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12out_of_rangeD1Ev"]
            pub fn out_of_range_out_of_range_destructor(
                this: *mut root::std::out_of_range,
            );
        }
        #[repr(C)]
        pub struct runtime_error {
            pub _base: root::std::exception,
            pub _M_msg: root::std::__cow_string,
        }
        #[test]
        fn bindgen_test_layout_runtime_error() {
            assert_eq!(
                ::std::mem::size_of::<runtime_error>(),
                16usize,
                concat!("Size of: ", stringify!(runtime_error))
            );
            assert_eq!(
                ::std::mem::align_of::<runtime_error>(),
                8usize,
                concat!("Alignment of ", stringify!(runtime_error))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<runtime_error>()))._M_msg as *const _
                        as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(runtime_error),
                    "::",
                    stringify!(_M_msg)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt13runtime_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn runtime_error_runtime_error(
                this: *mut root::std::runtime_error,
                __arg: *const root::std::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt13runtime_errorC1EPKc"]
            pub fn runtime_error_runtime_error1(
                this: *mut root::std::runtime_error,
                arg1: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt13runtime_errorC1ERKS_"]
            pub fn runtime_error_runtime_error2(
                this: *mut root::std::runtime_error,
                arg1: *const root::std::runtime_error,
            );
        }
        impl Default for runtime_error {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl runtime_error {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                runtime_error_runtime_error(__bindgen_tmp.as_mut_ptr(), __arg);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                runtime_error_runtime_error1(__bindgen_tmp.as_mut_ptr(), arg1);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(arg1: *const root::std::runtime_error) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                runtime_error_runtime_error2(__bindgen_tmp.as_mut_ptr(), arg1);
                __bindgen_tmp.assume_init()
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt13runtime_errorD1Ev"]
            pub fn runtime_error_runtime_error_destructor(
                this: *mut root::std::runtime_error,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt13runtime_error4whatEv"]
            pub fn runtime_error_what(
                this: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
        #[repr(C)]
        pub struct range_error {
            pub _base: root::std::runtime_error,
        }
        #[test]
        fn bindgen_test_layout_range_error() {
            assert_eq!(
                ::std::mem::size_of::<range_error>(),
                16usize,
                concat!("Size of: ", stringify!(range_error))
            );
            assert_eq!(
                ::std::mem::align_of::<range_error>(),
                8usize,
                concat!("Alignment of ", stringify!(range_error))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt11range_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn range_error_range_error(
                this: *mut root::std::range_error,
                __arg: *const root::std::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt11range_errorC1EPKc"]
            pub fn range_error_range_error1(
                this: *mut root::std::range_error,
                arg1: *const ::std::os::raw::c_char,
            );
        }
        impl Default for range_error {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl range_error {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                range_error_range_error(__bindgen_tmp.as_mut_ptr(), __arg);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                range_error_range_error1(__bindgen_tmp.as_mut_ptr(), arg1);
                __bindgen_tmp.assume_init()
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt11range_errorD1Ev"]
            pub fn range_error_range_error_destructor(
                this: *mut root::std::range_error,
            );
        }
        #[repr(C)]
        pub struct overflow_error {
            pub _base: root::std::runtime_error,
        }
        #[test]
        fn bindgen_test_layout_overflow_error() {
            assert_eq!(
                ::std::mem::size_of::<overflow_error>(),
                16usize,
                concat!("Size of: ", stringify!(overflow_error))
            );
            assert_eq!(
                ::std::mem::align_of::<overflow_error>(),
                8usize,
                concat!("Alignment of ", stringify!(overflow_error))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt14overflow_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn overflow_error_overflow_error(
                this: *mut root::std::overflow_error,
                __arg: *const root::std::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt14overflow_errorC1EPKc"]
            pub fn overflow_error_overflow_error1(
                this: *mut root::std::overflow_error,
                arg1: *const ::std::os::raw::c_char,
            );
        }
        impl Default for overflow_error {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl overflow_error {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                overflow_error_overflow_error(
                    __bindgen_tmp.as_mut_ptr(),
                    __arg,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                overflow_error_overflow_error1(
                    __bindgen_tmp.as_mut_ptr(),
                    arg1,
                );
                __bindgen_tmp.assume_init()
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt14overflow_errorD1Ev"]
            pub fn overflow_error_overflow_error_destructor(
                this: *mut root::std::overflow_error,
            );
        }
        #[repr(C)]
        pub struct underflow_error {
            pub _base: root::std::runtime_error,
        }
        #[test]
        fn bindgen_test_layout_underflow_error() {
            assert_eq!(
                ::std::mem::size_of::<underflow_error>(),
                16usize,
                concat!("Size of: ", stringify!(underflow_error))
            );
            assert_eq!(
                ::std::mem::align_of::<underflow_error>(),
                8usize,
                concat!("Alignment of ", stringify!(underflow_error))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt15underflow_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn underflow_error_underflow_error(
                this: *mut root::std::underflow_error,
                __arg: *const root::std::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt15underflow_errorC1EPKc"]
            pub fn underflow_error_underflow_error1(
                this: *mut root::std::underflow_error,
                arg1: *const ::std::os::raw::c_char,
            );
        }
        impl Default for underflow_error {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl underflow_error {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                underflow_error_underflow_error(
                    __bindgen_tmp.as_mut_ptr(),
                    __arg,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                underflow_error_underflow_error1(
                    __bindgen_tmp.as_mut_ptr(),
                    arg1,
                );
                __bindgen_tmp.assume_init()
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt15underflow_errorD1Ev"]
            pub fn underflow_error_underflow_error_destructor(
                this: *mut root::std::underflow_error,
            );
        }
        pub type __array_traits__Type<_Tp> = *mut _Tp;
        pub type __array_traits__Is_swappable = root::std::__is_swappable;
        pub type __array_traits__Is_nothrow_swappable =
            root::std::__is_nothrow_swappable;
        pub type array_value_type<_Tp> = _Tp;
        pub type array_pointer<_Tp> = *mut root::std::array_value_type<_Tp>;
        pub type array_const_pointer<_Tp> =
            *const root::std::array_value_type<_Tp>;
        pub type array_reference<_Tp> = *mut root::std::array_value_type<_Tp>;
        pub type array_const_reference<_Tp> =
            *const root::std::array_value_type<_Tp>;
        pub type array_iterator<_Tp> = *mut root::std::array_value_type<_Tp>;
        pub type array_const_iterator<_Tp> =
            *const root::std::array_value_type<_Tp>;
        pub type array_size_type = root::std::size_t;
        pub type array_difference_type = isize;
        pub type array_reverse_iterator<_Tp> =
            root::std::reverse_iterator<root::std::array_iterator<_Tp>>;
        pub type array_const_reverse_iterator<_Tp> =
            root::std::reverse_iterator<root::std::array_const_iterator<_Tp>>;
        pub type array__AT_Type = u8;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __erased_type {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___erased_type() {
            assert_eq!(
                ::std::mem::size_of::<__erased_type>(),
                1usize,
                concat!("Size of: ", stringify!(__erased_type))
            );
            assert_eq!(
                ::std::mem::align_of::<__erased_type>(),
                1usize,
                concat!("Alignment of ", stringify!(__erased_type))
            );
        }
        pub type __is_erased_or_convertible = root::std::__or_;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct allocator_arg_t {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_allocator_arg_t() {
            assert_eq!(
                ::std::mem::size_of::<allocator_arg_t>(),
                1usize,
                concat!("Size of: ", stringify!(allocator_arg_t))
            );
            assert_eq!(
                ::std::mem::align_of::<allocator_arg_t>(),
                1usize,
                concat!("Alignment of ", stringify!(allocator_arg_t))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZStL13allocator_arg"]
            pub static allocator_arg: root::std::allocator_arg_t;
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __uses_allocator_helper {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct uses_allocator {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __uses_alloc_base {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___uses_alloc_base() {
            assert_eq!(
                ::std::mem::size_of::<__uses_alloc_base>(),
                1usize,
                concat!("Size of: ", stringify!(__uses_alloc_base))
            );
            assert_eq!(
                ::std::mem::align_of::<__uses_alloc_base>(),
                1usize,
                concat!("Alignment of ", stringify!(__uses_alloc_base))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __uses_alloc0 {
            pub _M_a: root::std::__uses_alloc0__Sink,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __uses_alloc0__Sink {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___uses_alloc0__Sink() {
            assert_eq!(
                ::std::mem::size_of::<__uses_alloc0__Sink>(),
                1usize,
                concat!("Size of: ", stringify!(__uses_alloc0__Sink))
            );
            assert_eq!(
                ::std::mem::align_of::<__uses_alloc0__Sink>(),
                1usize,
                concat!("Alignment of ", stringify!(__uses_alloc0__Sink))
            );
        }
        #[test]
        fn bindgen_test_layout___uses_alloc0() {
            assert_eq!(
                ::std::mem::size_of::<__uses_alloc0>(),
                1usize,
                concat!("Size of: ", stringify!(__uses_alloc0))
            );
            assert_eq!(
                ::std::mem::align_of::<__uses_alloc0>(),
                1usize,
                concat!("Alignment of ", stringify!(__uses_alloc0))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<__uses_alloc0>()))._M_a as *const _
                        as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__uses_alloc0),
                    "::",
                    stringify!(_M_a)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __uses_alloc1<_Alloc> {
            pub _M_a: *const _Alloc,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
        }
        impl<_Alloc> Default for __uses_alloc1<_Alloc> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __uses_alloc2<_Alloc> {
            pub _M_a: *const _Alloc,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
        }
        impl<_Alloc> Default for __uses_alloc2<_Alloc> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub type __uses_alloc_t = u8;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_uses_allocator_predicate {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_uses_allocator_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_nothrow_uses_allocator_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_empty_non_tuple {
            pub _address: u8,
        }
        impl Default for __is_empty_non_tuple {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub type __empty_not_final = u8;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct tuple {
            pub _address: u8,
        }
        pub type tuple__Inherited = u8;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct tuple__TC2 {
            pub _address: u8,
        }
        pub type tuple__TCC = u8;
        pub type tuple__TMC = u8;
        pub type tuple__TMCT = u8;
        pub type tuple__TNTC = u8;
        #[test]
        fn __bindgen_test_layout_tuple_open0_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::tuple>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::tuple)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::tuple>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::tuple)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __do_make_tuple {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __make_tuple {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __combine_tuples {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout___combine_tuples_open0_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__combine_tuples>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__combine_tuples)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__combine_tuples>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__combine_tuples)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __tuple_cat_result {
            pub _address: u8,
        }
        pub type __tuple_cat_result___type = root::std::__combine_tuples;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __make_1st_indices {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout___make_1st_indices_open0_close0_instantiation()
        {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_1st_indices>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_1st_indices)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_1st_indices>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_1st_indices)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __tuple_concater {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct _Swallow_assign {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout__Swallow_assign() {
            assert_eq!(
                ::std::mem::size_of::<_Swallow_assign>(),
                1usize,
                concat!("Size of: ", stringify!(_Swallow_assign))
            );
            assert_eq!(
                ::std::mem::align_of::<_Swallow_assign>(),
                1usize,
                concat!("Alignment of ", stringify!(_Swallow_assign))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZStL6ignore"]
            pub static ignore: root::std::_Swallow_assign;
        }
        #[repr(C)]
        pub struct map {
            pub _M_t: root::std::map__Rep_type,
        }
        pub type map_key_type<_Key> = _Key;
        pub type map_mapped_type<_Tp> = _Tp;
        pub type map_value_type<_Key, _Tp> = root::std::pair<_Key, _Tp>;
        pub type map_key_compare<_Compare> = _Compare;
        pub type map_allocator_type<_Alloc> = _Alloc;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct map_value_compare<_Compare> {
            pub comp: _Compare,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
        }
        impl<_Compare> Default for map_value_compare<_Compare> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub type map__Pair_alloc_type = [u8; 0usize];
        pub type map__Rep_type = root::std::_Rb_tree;
        pub type map__Alloc_traits = root::__gnu_cxx::__alloc_traits;
        pub type map_pointer = [u8; 0usize];
        pub type map_const_pointer = [u8; 0usize];
        pub type map_reference = [u8; 0usize];
        pub type map_const_reference = [u8; 0usize];
        pub type map_iterator = [u8; 0usize];
        pub type map_const_iterator = [u8; 0usize];
        pub type map_size_type = [u8; 0usize];
        pub type map_difference_type = [u8; 0usize];
        pub type map_reverse_iterator = [u8; 0usize];
        pub type map_const_reverse_iterator = [u8; 0usize];
        impl Default for map {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        pub struct multimap {
            pub _M_t: root::std::multimap__Rep_type,
        }
        pub type multimap_key_type<_Key> = _Key;
        pub type multimap_mapped_type<_Tp> = _Tp;
        pub type multimap_value_type<_Key, _Tp> = root::std::pair<_Key, _Tp>;
        pub type multimap_key_compare<_Compare> = _Compare;
        pub type multimap_allocator_type<_Alloc> = _Alloc;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct multimap_value_compare<_Compare> {
            pub comp: _Compare,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
        }
        impl<_Compare> Default for multimap_value_compare<_Compare> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub type multimap__Pair_alloc_type = [u8; 0usize];
        pub type multimap__Rep_type = root::std::_Rb_tree;
        pub type multimap__Alloc_traits = root::__gnu_cxx::__alloc_traits;
        pub type multimap_pointer = [u8; 0usize];
        pub type multimap_const_pointer = [u8; 0usize];
        pub type multimap_reference = [u8; 0usize];
        pub type multimap_const_reference = [u8; 0usize];
        pub type multimap_iterator = [u8; 0usize];
        pub type multimap_const_iterator = [u8; 0usize];
        pub type multimap_size_type = [u8; 0usize];
        pub type multimap_difference_type = [u8; 0usize];
        pub type multimap_reverse_iterator = [u8; 0usize];
        pub type multimap_const_reverse_iterator = [u8; 0usize];
        impl Default for multimap {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct _Temporary_buffer<_Tp> {
            pub _M_original_len: root::std::_Temporary_buffer_size_type,
            pub _M_len: root::std::_Temporary_buffer_size_type,
            pub _M_buffer: root::std::_Temporary_buffer_pointer<_Tp>,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
        }
        pub type _Temporary_buffer_value_type<_Tp> = _Tp;
        pub type _Temporary_buffer_pointer<_Tp> =
            *mut root::std::_Temporary_buffer_value_type<_Tp>;
        pub type _Temporary_buffer_iterator<_Tp> =
            root::std::_Temporary_buffer_pointer<_Tp>;
        pub type _Temporary_buffer_size_type = isize;
        impl<_Tp> Default for _Temporary_buffer<_Tp> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct raw_storage_iterator<_OutputIterator> {
            pub _M_iter: _OutputIterator,
            pub _phantom_0: ::std::marker::PhantomData<
                ::std::cell::UnsafeCell<_OutputIterator>,
            >,
        }
        impl<_OutputIterator> Default for raw_storage_iterator<_OutputIterator> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct default_delete {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __uniq_ptr_impl {
            pub _M_t: root::std::tuple,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __uniq_ptr_impl__Ptr {
            pub _address: u8,
        }
        pub type __uniq_ptr_impl__Ptr_type<_Up> = *mut _Up;
        pub type __uniq_ptr_impl__DeleterConstraint = u8;
        pub type __uniq_ptr_impl_pointer = root::std::__uniq_ptr_impl__Ptr;
        #[repr(C)]
        #[derive(Debug)]
        pub struct unique_ptr {
            pub _M_t: root::std::__uniq_ptr_impl,
        }
        pub type unique_ptr__DeleterConstraint = root::std::__uniq_ptr_impl;
        pub type unique_ptr_pointer = root::std::__uniq_ptr_impl;
        pub type unique_ptr_element_type<_Tp> = _Tp;
        pub type unique_ptr_deleter_type<_Dp> = _Dp;
        pub type unique_ptr___safe_conversion_up = root::std::__and_;
        impl Default for unique_ptr {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct _MakeUniq {
            pub _address: u8,
        }
        pub type _MakeUniq___single_object = root::std::unique_ptr;
        #[repr(C)]
        #[derive(Debug)]
        pub struct __allocated_ptr<_Alloc> {
            pub _M_alloc: *mut _Alloc,
            pub _M_ptr: root::std::__allocated_ptr_pointer,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
        }
        pub type __allocated_ptr_pointer = root::std::allocator_traits;
        pub type __allocated_ptr_value_type = root::std::allocator_traits;
        impl<_Alloc> Default for __allocated_ptr<_Alloc> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct _Maybe_unary_or_binary_function {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct _Mem_fn_traits {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct _Mem_fn_traits_base {
            pub _address: u8,
        }
        pub type _Mem_fn_traits_base___result_type<_Res> = _Res;
        pub type _Mem_fn_traits_base___maybe_type =
            root::std::_Maybe_unary_or_binary_function;
        pub type _Mem_fn_traits_base___arity = u8;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct _Maybe_get_result_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct _Weak_result_type_impl {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct _Weak_result_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct _Refwrap_base_arg1 {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct _Refwrap_base_arg2 {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Reference_wrapper_base {
            pub _address: u8,
        }
        impl Default for _Reference_wrapper_base {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct reference_wrapper<_Tp> {
            pub _M_data: *mut _Tp,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
        }
        pub type reference_wrapper_type<_Tp> = _Tp;
        impl<_Tp> Default for reference_wrapper<_Tp> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct bad_weak_ptr {
            pub _base: root::std::exception,
        }
        #[test]
        fn bindgen_test_layout_bad_weak_ptr() {
            assert_eq!(
                ::std::mem::size_of::<bad_weak_ptr>(),
                8usize,
                concat!("Size of: ", stringify!(bad_weak_ptr))
            );
            assert_eq!(
                ::std::mem::align_of::<bad_weak_ptr>(),
                8usize,
                concat!("Alignment of ", stringify!(bad_weak_ptr))
            );
        }
        impl Default for bad_weak_ptr {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt12bad_weak_ptr4whatEv"]
            pub fn bad_weak_ptr_what(
                this: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12bad_weak_ptrD1Ev"]
            pub fn bad_weak_ptr_bad_weak_ptr_destructor(
                this: *mut root::std::bad_weak_ptr,
            );
        }
        pub const _Mutex_base__S_need_barriers:
            root::std::_Mutex_base__bindgen_ty_1 = 0;
        pub type _Mutex_base__bindgen_ty_1 = i32;
        extern "C" {
            #[link_name = "\u{1}_M_add_ref_lock"]
            pub fn _Sp_counted_base__M_add_ref_lock(this: *mut u8);
        }
        extern "C" {
            #[link_name = "\u{1}_M_add_ref_lock_nothrow"]
            pub fn _Sp_counted_base__M_add_ref_lock_nothrow(
                this: *mut u8,
            ) -> bool;
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct owner_less {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Sp_counted_deleter__Impl<_Ptr> {
            pub _M_ptr: _Ptr,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ptr>>,
        }
        pub type _Sp_counted_deleter__Impl__Del_base = u8;
        pub type _Sp_counted_deleter__Impl__Alloc_base = u8;
        impl<_Ptr> Default for _Sp_counted_deleter__Impl<_Ptr> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub type _Sp_counted_deleter___allocator_type =
            root::std::__alloc_rebind;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct _Sp_make_shared_tag {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout__Sp_make_shared_tag() {
            assert_eq!(
                ::std::mem::size_of::<_Sp_make_shared_tag>(),
                1usize,
                concat!("Size of: ", stringify!(_Sp_make_shared_tag))
            );
            assert_eq!(
                ::std::mem::align_of::<_Sp_make_shared_tag>(),
                1usize,
                concat!("Alignment of ", stringify!(_Sp_make_shared_tag))
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Sp_alloc_shared_tag<_Alloc> {
            pub _M_a: *const _Alloc,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
        }
        impl<_Alloc> Default for _Sp_alloc_shared_tag<_Alloc> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Sp_counted_ptr_inplace__Impl {
            pub _M_storage: root::__gnu_cxx::__aligned_buffer,
        }
        pub type _Sp_counted_ptr_inplace__Impl__A_base = u8;
        impl Default for _Sp_counted_ptr_inplace__Impl {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub type _Sp_counted_ptr_inplace___allocator_type =
            root::std::__alloc_rebind;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __sp_array_delete {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___sp_array_delete() {
            assert_eq!(
                ::std::mem::size_of::<__sp_array_delete>(),
                1usize,
                concat!("Size of: ", stringify!(__sp_array_delete))
            );
            assert_eq!(
                ::std::mem::align_of::<__sp_array_delete>(),
                1usize,
                concat!("Alignment of ", stringify!(__sp_array_delete))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __shared_count___not_alloc_shared_tag {
            pub _address: u8,
        }
        pub type __shared_count___not_alloc_shared_tag_type =
            ::std::os::raw::c_void;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __sp_compatible_with {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __sp_is_constructible_arr {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __sp_is_constructible {
            pub _address: u8,
        }
        pub type __shared_ptr_access_element_type<_Tp> = _Tp;
        pub type __shared_ptr_element_type = root::std::remove_extent;
        pub type __shared_ptr__SafeConv = u8;
        pub type __shared_ptr__Compatible = u8;
        pub type __shared_ptr__Assignable = root::std::__shared_ptr__Compatible;
        pub type __shared_ptr__UniqCompatible = u8;
        pub type __shared_ptr__UniqAssignable =
            root::std::__shared_ptr__UniqCompatible;
        pub type __shared_ptr___esft_base_t = u8;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __shared_ptr___has_esft_base {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct _Sp_less {
            pub _address: u8,
        }
        pub type __weak_ptr__Compatible = u8;
        pub type __weak_ptr__Assignable = root::std::__weak_ptr__Compatible;
        pub type __weak_ptr_element_type = root::std::remove_extent;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct _Sp_owner_less {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout__Sp_owner_less_open0_void_void_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::_Sp_owner_less>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::_Sp_owner_less)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::_Sp_owner_less>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::_Sp_owner_less)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default)]
        pub struct shared_ptr {
            pub _address: u8,
        }
        pub type shared_ptr__Constructible = u8;
        pub type shared_ptr__Assignable = u8;
        pub type shared_ptr_element_type = u8;
        #[repr(C)]
        #[derive(Debug, Default)]
        pub struct weak_ptr {
            pub _address: u8,
        }
        pub type weak_ptr__Constructible = u8;
        pub type weak_ptr__Assignable = u8;
        #[test]
        fn __bindgen_test_layout_owner_less_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::owner_less>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::owner_less)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::owner_less>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::owner_less)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct enable_shared_from_this {
            pub _M_weak_this: root::std::weak_ptr,
        }
        impl Default for enable_shared_from_this {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub const memory_order_memory_order_relaxed: root::std::memory_order =
            0;
        pub const memory_order_memory_order_consume: root::std::memory_order =
            1;
        pub const memory_order_memory_order_acquire: root::std::memory_order =
            2;
        pub const memory_order_memory_order_release: root::std::memory_order =
            3;
        pub const memory_order_memory_order_acq_rel: root::std::memory_order =
            4;
        pub const memory_order_memory_order_seq_cst: root::std::memory_order =
            5;
        pub type memory_order = u32;
        pub const __memory_order_modifier___memory_order_mask:
            root::std::__memory_order_modifier = 65535;
        pub const __memory_order_modifier___memory_order_modifier_mask:
            root::std::__memory_order_modifier = 4294901760;
        pub const __memory_order_modifier___memory_order_hle_acquire:
            root::std::__memory_order_modifier = 65536;
        pub const __memory_order_modifier___memory_order_hle_release:
            root::std::__memory_order_modifier = 131072;
        pub type __memory_order_modifier = u32;
        pub type __atomic_flag_data_type = bool;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __atomic_flag_base {
            pub _M_i: root::std::__atomic_flag_data_type,
        }
        #[test]
        fn bindgen_test_layout___atomic_flag_base() {
            assert_eq!(
                ::std::mem::size_of::<__atomic_flag_base>(),
                1usize,
                concat!("Size of: ", stringify!(__atomic_flag_base))
            );
            assert_eq!(
                ::std::mem::align_of::<__atomic_flag_base>(),
                1usize,
                concat!("Alignment of ", stringify!(__atomic_flag_base))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<__atomic_flag_base>()))._M_i
                        as *const _ as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__atomic_flag_base),
                    "::",
                    stringify!(_M_i)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default)]
        pub struct atomic_flag {
            pub _base: root::std::__atomic_flag_base,
        }
        #[test]
        fn bindgen_test_layout_atomic_flag() {
            assert_eq!(
                ::std::mem::size_of::<atomic_flag>(),
                1usize,
                concat!("Size of: ", stringify!(atomic_flag))
            );
            assert_eq!(
                ::std::mem::align_of::<atomic_flag>(),
                1usize,
                concat!("Alignment of ", stringify!(atomic_flag))
            );
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct __atomic_base<_ITp> {
            pub _M_i: root::std::__atomic_base___int_type<_ITp>,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_ITp>>,
        }
        pub type __atomic_base___int_type<_ITp> = _ITp;
        impl<_ITp> Default for __atomic_base<_ITp> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default)]
        pub struct _Sp_locker {
            pub _M_key1: ::std::os::raw::c_uchar,
            pub _M_key2: ::std::os::raw::c_uchar,
        }
        #[test]
        fn bindgen_test_layout__Sp_locker() {
            assert_eq!(
                ::std::mem::size_of::<_Sp_locker>(),
                2usize,
                concat!("Size of: ", stringify!(_Sp_locker))
            );
            assert_eq!(
                ::std::mem::align_of::<_Sp_locker>(),
                1usize,
                concat!("Alignment of ", stringify!(_Sp_locker))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<_Sp_locker>()))._M_key1 as *const _
                        as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Sp_locker),
                    "::",
                    stringify!(_M_key1)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<_Sp_locker>()))._M_key2 as *const _
                        as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Sp_locker),
                    "::",
                    stringify!(_M_key2)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt10_Sp_lockerC1EPKv"]
            pub fn _Sp_locker__Sp_locker(
                this: *mut root::std::_Sp_locker,
                arg1: *const ::std::os::raw::c_void,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt10_Sp_lockerC1EPKvS1_"]
            pub fn _Sp_locker__Sp_locker1(
                this: *mut root::std::_Sp_locker,
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt10_Sp_lockerD1Ev"]
            pub fn _Sp_locker__Sp_locker_destructor(
                this: *mut root::std::_Sp_locker,
            );
        }
        impl _Sp_locker {
            #[inline]
            pub unsafe fn new(arg1: *const ::std::os::raw::c_void) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                _Sp_locker__Sp_locker(__bindgen_tmp.as_mut_ptr(), arg1);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                _Sp_locker__Sp_locker1(__bindgen_tmp.as_mut_ptr(), arg1, arg2);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                _Sp_locker__Sp_locker_destructor(self)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct auto_ptr_ref<_Tp1> {
            pub _M_ptr: *mut _Tp1,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp1>>,
        }
        impl<_Tp1> Default for auto_ptr_ref<_Tp1> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct auto_ptr<_Tp> {
            pub _M_ptr: *mut _Tp,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
        }
        pub type auto_ptr_element_type<_Tp> = _Tp;
        impl<_Tp> Default for auto_ptr<_Tp> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[test]
        fn __bindgen_test_layout_auto_ptr_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<
                    root::std::auto_ptr<::std::os::raw::c_void>,
                >(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::auto_ptr<::std::os::raw::c_void>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<
                    root::std::auto_ptr<::std::os::raw::c_void>,
                >(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::auto_ptr<::std::os::raw::c_void>)
                )
            );
        }
        pub const pointer_safety_relaxed: root::std::pointer_safety = 0;
        pub const pointer_safety_preferred: root::std::pointer_safety = 1;
        pub const pointer_safety_strict: root::std::pointer_safety = 2;
        pub type pointer_safety = i32;
        #[repr(C)]
        pub struct _Vector_base {
            pub _M_impl: root::std::_Vector_base__Vector_impl,
        }
        pub type _Vector_base__Tp_alloc_type = [u8; 0usize];
        pub type _Vector_base_pointer = [u8; 0usize];
        #[repr(C)]
        pub struct _Vector_base__Vector_impl {
            pub _M_start: root::std::_Vector_base_pointer,
            pub _M_finish: root::std::_Vector_base_pointer,
            pub _M_end_of_storage: root::std::_Vector_base_pointer,
        }
        impl Default for _Vector_base__Vector_impl {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub type _Vector_base_allocator_type<_Alloc> = _Alloc;
        impl Default for _Vector_base {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        pub struct vector {
            pub _base: root::std::_Vector_base,
        }
        pub type vector__Base = root::std::_Vector_base;
        pub type vector__Tp_alloc_type = root::std::vector__Base;
        pub type vector__Alloc_traits = root::__gnu_cxx::__alloc_traits;
        pub type vector_value_type<_Tp> = _Tp;
        pub type vector_pointer = root::std::vector__Base;
        pub type vector_const_pointer = root::std::vector__Alloc_traits;
        pub type vector_reference = root::std::vector__Alloc_traits;
        pub type vector_const_reference = root::std::vector__Alloc_traits;
        pub type vector_iterator =
            root::__gnu_cxx::__normal_iterator<root::std::vector_pointer>;
        pub type vector_const_iterator =
            root::__gnu_cxx::__normal_iterator<root::std::vector_const_pointer>;
        pub type vector_const_reverse_iterator =
            root::std::reverse_iterator<root::std::vector_const_iterator>;
        pub type vector_reverse_iterator =
            root::std::reverse_iterator<root::std::vector_iterator>;
        pub type vector_size_type = root::std::size_t;
        pub type vector_difference_type = isize;
        pub type vector_allocator_type<_Alloc> = _Alloc;
        #[repr(C)]
        #[derive(Debug)]
        pub struct vector__Temporary_value {
            pub _M_this: *mut root::std::vector,
            pub __buf: u8,
        }
        impl Default for vector__Temporary_value {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl Default for vector {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub type _Bit_type = ::std::os::raw::c_ulong;
        pub const std__S_word_bit: root::std::_bindgen_ty_1 = 64;
        pub type _bindgen_ty_1 = u32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Bit_reference {
            pub _M_p: *mut root::std::_Bit_type,
            pub _M_mask: root::std::_Bit_type,
        }
        #[test]
        fn bindgen_test_layout__Bit_reference() {
            assert_eq!(
                ::std::mem::size_of::<_Bit_reference>(),
                16usize,
                concat!("Size of: ", stringify!(_Bit_reference))
            );
            assert_eq!(
                ::std::mem::align_of::<_Bit_reference>(),
                8usize,
                concat!("Alignment of ", stringify!(_Bit_reference))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<_Bit_reference>()))._M_p as *const _
                        as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Bit_reference),
                    "::",
                    stringify!(_M_p)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<_Bit_reference>()))._M_mask
                        as *const _ as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Bit_reference),
                    "::",
                    stringify!(_M_mask)
                )
            );
        }
        impl Default for _Bit_reference {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Bit_iterator_base {
            pub _M_p: *mut root::std::_Bit_type,
            pub _M_offset: ::std::os::raw::c_uint,
        }
        #[test]
        fn bindgen_test_layout__Bit_iterator_base() {
            assert_eq!(
                ::std::mem::size_of::<_Bit_iterator_base>(),
                16usize,
                concat!("Size of: ", stringify!(_Bit_iterator_base))
            );
            assert_eq!(
                ::std::mem::align_of::<_Bit_iterator_base>(),
                8usize,
                concat!("Alignment of ", stringify!(_Bit_iterator_base))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<_Bit_iterator_base>()))._M_p
                        as *const _ as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Bit_iterator_base),
                    "::",
                    stringify!(_M_p)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<_Bit_iterator_base>()))._M_offset
                        as *const _ as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Bit_iterator_base),
                    "::",
                    stringify!(_M_offset)
                )
            );
        }
        impl Default for _Bit_iterator_base {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Bit_iterator {
            pub _base: root::std::_Bit_iterator_base,
        }
        pub type _Bit_iterator_reference = root::std::_Bit_reference;
        pub type _Bit_iterator_pointer = *mut root::std::_Bit_reference;
        pub type _Bit_iterator_iterator = root::std::_Bit_iterator;
        #[test]
        fn bindgen_test_layout__Bit_iterator() {
            assert_eq!(
                ::std::mem::size_of::<_Bit_iterator>(),
                16usize,
                concat!("Size of: ", stringify!(_Bit_iterator))
            );
            assert_eq!(
                ::std::mem::align_of::<_Bit_iterator>(),
                8usize,
                concat!("Alignment of ", stringify!(_Bit_iterator))
            );
        }
        impl Default for _Bit_iterator {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Bit_const_iterator {
            pub _base: root::std::_Bit_iterator_base,
        }
        pub type _Bit_const_iterator_reference = bool;
        pub type _Bit_const_iterator_const_reference = bool;
        pub type _Bit_const_iterator_pointer = *const bool;
        pub type _Bit_const_iterator_const_iterator =
            root::std::_Bit_const_iterator;
        #[test]
        fn bindgen_test_layout__Bit_const_iterator() {
            assert_eq!(
                ::std::mem::size_of::<_Bit_const_iterator>(),
                16usize,
                concat!("Size of: ", stringify!(_Bit_const_iterator))
            );
            assert_eq!(
                ::std::mem::align_of::<_Bit_const_iterator>(),
                8usize,
                concat!("Alignment of ", stringify!(_Bit_const_iterator))
            );
        }
        impl Default for _Bit_const_iterator {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        pub struct _Bvector_base {
            pub _M_impl: root::std::_Bvector_base__Bvector_impl,
        }
        pub type _Bvector_base__Bit_alloc_type = [u8; 0usize];
        pub type _Bvector_base__Bit_alloc_traits =
            root::__gnu_cxx::__alloc_traits;
        pub type _Bvector_base__Bit_pointer = [u8; 0usize];
        #[repr(C)]
        pub struct _Bvector_base__Bvector_impl_data {
            pub _M_start: root::std::_Bit_iterator,
            pub _M_finish: root::std::_Bit_iterator,
            pub _M_end_of_storage: root::std::_Bvector_base__Bit_pointer,
        }
        impl Default for _Bvector_base__Bvector_impl_data {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        pub struct _Bvector_base__Bvector_impl {
            pub _base_1: root::std::_Bvector_base__Bvector_impl_data,
        }
        impl Default for _Bvector_base__Bvector_impl {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub type _Bvector_base_allocator_type<_Alloc> = _Alloc;
        impl Default for _Bvector_base {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct locale {
            pub _M_impl: *mut root::std::locale__Impl,
        }
        pub type locale_category = ::std::os::raw::c_int;
        pub const locale__S_categories_size: root::std::locale__bindgen_ty_1 =
            12;
        pub type locale__bindgen_ty_1 = u32;
        pub const locale_none: root::std::locale_category = 0;
        pub const locale_ctype: root::std::locale_category = 1;
        pub const locale_numeric: root::std::locale_category = 2;
        pub const locale_collate: root::std::locale_category = 4;
        pub const locale_time: root::std::locale_category = 8;
        pub const locale_monetary: root::std::locale_category = 16;
        pub const locale_messages: root::std::locale_category = 32;
        pub const locale_all: root::std::locale_category = 63;
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale10_S_classicE"]
            pub static mut locale__S_classic: *mut root::std::locale__Impl;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale9_S_globalE"]
            pub static mut locale__S_global: *mut root::std::locale__Impl;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale13_S_categoriesE"]
            pub static locale__S_categories:
                *const *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale7_S_onceE"]
            pub static mut locale__S_once: root::__gthread_once_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale17_S_twinned_facetsE"]
            pub static mut locale__S_twinned_facets:
                [*const root::std::locale_id; 0usize];
        }
        #[test]
        fn bindgen_test_layout_locale() {
            assert_eq!(
                ::std::mem::size_of::<locale>(),
                8usize,
                concat!("Size of: ", stringify!(locale))
            );
            assert_eq!(
                ::std::mem::align_of::<locale>(),
                8usize,
                concat!("Alignment of ", stringify!(locale))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<locale>()))._M_impl as *const _
                        as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(locale),
                    "::",
                    stringify!(_M_impl)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt6locale4nameB5cxx11Ev"]
            pub fn locale_name(
                this: *const root::std::locale,
            ) -> root::std::string;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale6globalERKS_"]
            pub fn locale_global(
                __loc: *const root::std::locale,
            ) -> root::std::locale;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale7classicEv"]
            pub fn locale_classic() -> *const root::std::locale;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6localeC1Ev"]
            pub fn locale_locale(this: *mut root::std::locale);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6localeC1ERKS_"]
            pub fn locale_locale1(
                this: *mut root::std::locale,
                __other: *const root::std::locale,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6localeC1EPKc"]
            pub fn locale_locale2(
                this: *mut root::std::locale,
                __s: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6localeC1ERKS_PKci"]
            pub fn locale_locale3(
                this: *mut root::std::locale,
                __base: *const root::std::locale,
                __s: *const ::std::os::raw::c_char,
                __cat: root::std::locale_category,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6localeC1ERKS_S1_i"]
            pub fn locale_locale4(
                this: *mut root::std::locale,
                __base: *const root::std::locale,
                __add: *const root::std::locale,
                __cat: root::std::locale_category,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6localeD1Ev"]
            pub fn locale_locale_destructor(this: *mut root::std::locale);
        }
        impl Default for locale {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl locale {
            #[inline]
            pub unsafe fn name(&self) -> root::std::string {
                locale_name(self)
            }
            #[inline]
            pub unsafe fn global(
                __loc: *const root::std::locale,
            ) -> root::std::locale {
                locale_global(__loc)
            }
            #[inline]
            pub unsafe fn classic() -> *const root::std::locale {
                locale_classic()
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                locale_locale(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(__other: *const root::std::locale) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                locale_locale1(__bindgen_tmp.as_mut_ptr(), __other);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(__s: *const ::std::os::raw::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                locale_locale2(__bindgen_tmp.as_mut_ptr(), __s);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new3(
                __base: *const root::std::locale,
                __s: *const ::std::os::raw::c_char,
                __cat: root::std::locale_category,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                locale_locale3(__bindgen_tmp.as_mut_ptr(), __base, __s, __cat);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new4(
                __base: *const root::std::locale,
                __add: *const root::std::locale,
                __cat: root::std::locale_category,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                locale_locale4(
                    __bindgen_tmp.as_mut_ptr(),
                    __base,
                    __add,
                    __cat,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                locale_locale_destructor(self)
            }
        }
        #[repr(C)]
        pub struct locale_facet__bindgen_vtable(::std::os::raw::c_void);
        #[repr(C)]
        #[derive(Debug)]
        pub struct locale_facet {
            pub vtable_: *const locale_facet__bindgen_vtable,
            pub _M_refcount: root::_Atomic_word,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct locale_facet___shim {
            _unused: [u8; 0],
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5facet11_S_c_localeE"]
            pub static mut locale_facet__S_c_locale: root::std::__c_locale;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5facet9_S_c_nameE"]
            pub static locale_facet__S_c_name: [::std::os::raw::c_char; 2usize];
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5facet7_S_onceE"]
            pub static mut locale_facet__S_once: root::__gthread_once_t;
        }
        #[test]
        fn bindgen_test_layout_locale_facet() {
            assert_eq!(
                ::std::mem::size_of::<locale_facet>(),
                16usize,
                concat!("Size of: ", stringify!(locale_facet))
            );
            assert_eq!(
                ::std::mem::align_of::<locale_facet>(),
                8usize,
                concat!("Alignment of ", stringify!(locale_facet))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<locale_facet>()))._M_refcount
                        as *const _ as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(locale_facet),
                    "::",
                    stringify!(_M_refcount)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5facet18_S_create_c_localeERP15__locale_structPKcS2_"]
            pub fn locale_facet__S_create_c_locale(
                __cloc: *mut root::std::__c_locale,
                __s: *const ::std::os::raw::c_char,
                __old: root::std::__c_locale,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5facet17_S_clone_c_localeERP15__locale_struct"]
            pub fn locale_facet__S_clone_c_locale(
                __cloc: *mut root::std::__c_locale,
            ) -> root::std::__c_locale;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5facet19_S_destroy_c_localeERP15__locale_struct"]
            pub fn locale_facet__S_destroy_c_locale(
                __cloc: *mut root::std::__c_locale,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5facet20_S_lc_ctype_c_localeEP15__locale_structPKc"]
            pub fn locale_facet__S_lc_ctype_c_locale(
                __cloc: root::std::__c_locale,
                __s: *const ::std::os::raw::c_char,
            ) -> root::std::__c_locale;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5facet15_S_get_c_localeEv"]
            pub fn locale_facet__S_get_c_locale() -> root::std::__c_locale;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5facet13_S_get_c_nameEv"]
            pub fn locale_facet__S_get_c_name() -> *const ::std::os::raw::c_char;
        }
        impl Default for locale_facet {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl locale_facet {
            #[inline]
            pub unsafe fn _S_create_c_locale(
                __cloc: *mut root::std::__c_locale,
                __s: *const ::std::os::raw::c_char,
                __old: root::std::__c_locale,
            ) {
                locale_facet__S_create_c_locale(__cloc, __s, __old)
            }
            #[inline]
            pub unsafe fn _S_clone_c_locale(
                __cloc: *mut root::std::__c_locale,
            ) -> root::std::__c_locale {
                locale_facet__S_clone_c_locale(__cloc)
            }
            #[inline]
            pub unsafe fn _S_destroy_c_locale(
                __cloc: *mut root::std::__c_locale,
            ) {
                locale_facet__S_destroy_c_locale(__cloc)
            }
            #[inline]
            pub unsafe fn _S_lc_ctype_c_locale(
                __cloc: root::std::__c_locale,
                __s: *const ::std::os::raw::c_char,
            ) -> root::std::__c_locale {
                locale_facet__S_lc_ctype_c_locale(__cloc, __s)
            }
            #[inline]
            pub unsafe fn _S_get_c_locale() -> root::std::__c_locale {
                locale_facet__S_get_c_locale()
            }
            #[inline]
            pub unsafe fn _S_get_c_name() -> *const ::std::os::raw::c_char {
                locale_facet__S_get_c_name()
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5facetD1Ev"]
            pub fn locale_facet_facet_destructor(
                this: *mut root::std::locale_facet,
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct locale_id {
            pub _M_index: root::std::size_t,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale2id11_S_refcountE"]
            pub static mut locale_id__S_refcount: root::_Atomic_word;
        }
        #[test]
        fn bindgen_test_layout_locale_id() {
            assert_eq!(
                ::std::mem::size_of::<locale_id>(),
                8usize,
                concat!("Size of: ", stringify!(locale_id))
            );
            assert_eq!(
                ::std::mem::align_of::<locale_id>(),
                8usize,
                concat!("Alignment of ", stringify!(locale_id))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<locale_id>()))._M_index as *const _
                        as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(locale_id),
                    "::",
                    stringify!(_M_index)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt6locale2id5_M_idEv"]
            pub fn locale_id__M_id(
                this: *const root::std::locale_id,
            ) -> root::std::size_t;
        }
        impl locale_id {
            #[inline]
            pub unsafe fn _M_id(&self) -> root::std::size_t {
                locale_id__M_id(self)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct locale__Impl {
            pub _M_refcount: root::_Atomic_word,
            pub _M_facets: *mut *const root::std::locale_facet,
            pub _M_facets_size: root::std::size_t,
            pub _M_caches: *mut *const root::std::locale_facet,
            pub _M_names: *mut *mut ::std::os::raw::c_char,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5_Impl11_S_id_ctypeE"]
            pub static mut locale__Impl__S_id_ctype:
                [*const root::std::locale_id; 0usize];
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5_Impl13_S_id_numericE"]
            pub static mut locale__Impl__S_id_numeric:
                [*const root::std::locale_id; 0usize];
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5_Impl13_S_id_collateE"]
            pub static mut locale__Impl__S_id_collate:
                [*const root::std::locale_id; 0usize];
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5_Impl10_S_id_timeE"]
            pub static mut locale__Impl__S_id_time:
                [*const root::std::locale_id; 0usize];
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5_Impl14_S_id_monetaryE"]
            pub static mut locale__Impl__S_id_monetary:
                [*const root::std::locale_id; 0usize];
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5_Impl14_S_id_messagesE"]
            pub static mut locale__Impl__S_id_messages:
                [*const root::std::locale_id; 0usize];
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5_Impl19_S_facet_categoriesE"]
            pub static mut locale__Impl__S_facet_categories:
                [*const *const root::std::locale_id; 0usize];
        }
        #[test]
        fn bindgen_test_layout_locale__Impl() {
            assert_eq!(
                ::std::mem::size_of::<locale__Impl>(),
                40usize,
                concat!("Size of: ", stringify!(locale__Impl))
            );
            assert_eq!(
                ::std::mem::align_of::<locale__Impl>(),
                8usize,
                concat!("Alignment of ", stringify!(locale__Impl))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<locale__Impl>()))._M_refcount
                        as *const _ as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(locale__Impl),
                    "::",
                    stringify!(_M_refcount)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<locale__Impl>()))._M_facets
                        as *const _ as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(locale__Impl),
                    "::",
                    stringify!(_M_facets)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<locale__Impl>()))._M_facets_size
                        as *const _ as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(locale__Impl),
                    "::",
                    stringify!(_M_facets_size)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<locale__Impl>()))._M_caches
                        as *const _ as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(locale__Impl),
                    "::",
                    stringify!(_M_caches)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<locale__Impl>()))._M_names
                        as *const _ as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(locale__Impl),
                    "::",
                    stringify!(_M_names)
                )
            );
        }
        impl Default for locale__Impl {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[test]
        fn __bindgen_test_layout_collate_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::collate>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::collate)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::collate>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::collate)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_collate_byname_open0_char_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::collate_byname>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::collate_byname)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::collate_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::collate_byname)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_collate_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::collate>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::collate)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::collate>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::collate)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_collate_byname_open0_wchar_t_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::collate_byname>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::collate_byname)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::collate_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::collate_byname)
                )
            );
        }
        pub const errc_address_family_not_supported: root::std::errc = 97;
        pub const errc_address_in_use: root::std::errc = 98;
        pub const errc_address_not_available: root::std::errc = 99;
        pub const errc_already_connected: root::std::errc = 106;
        pub const errc_argument_list_too_long: root::std::errc = 7;
        pub const errc_argument_out_of_domain: root::std::errc = 33;
        pub const errc_bad_address: root::std::errc = 14;
        pub const errc_bad_file_descriptor: root::std::errc = 9;
        pub const errc_bad_message: root::std::errc = 74;
        pub const errc_broken_pipe: root::std::errc = 32;
        pub const errc_connection_aborted: root::std::errc = 103;
        pub const errc_connection_already_in_progress: root::std::errc = 114;
        pub const errc_connection_refused: root::std::errc = 111;
        pub const errc_connection_reset: root::std::errc = 104;
        pub const errc_cross_device_link: root::std::errc = 18;
        pub const errc_destination_address_required: root::std::errc = 89;
        pub const errc_device_or_resource_busy: root::std::errc = 16;
        pub const errc_directory_not_empty: root::std::errc = 39;
        pub const errc_executable_format_error: root::std::errc = 8;
        pub const errc_file_exists: root::std::errc = 17;
        pub const errc_file_too_large: root::std::errc = 27;
        pub const errc_filename_too_long: root::std::errc = 36;
        pub const errc_function_not_supported: root::std::errc = 38;
        pub const errc_host_unreachable: root::std::errc = 113;
        pub const errc_identifier_removed: root::std::errc = 43;
        pub const errc_illegal_byte_sequence: root::std::errc = 84;
        pub const errc_inappropriate_io_control_operation: root::std::errc = 25;
        pub const errc_interrupted: root::std::errc = 4;
        pub const errc_invalid_argument: root::std::errc = 22;
        pub const errc_invalid_seek: root::std::errc = 29;
        pub const errc_io_error: root::std::errc = 5;
        pub const errc_is_a_directory: root::std::errc = 21;
        pub const errc_message_size: root::std::errc = 90;
        pub const errc_network_down: root::std::errc = 100;
        pub const errc_network_reset: root::std::errc = 102;
        pub const errc_network_unreachable: root::std::errc = 101;
        pub const errc_no_buffer_space: root::std::errc = 105;
        pub const errc_no_child_process: root::std::errc = 10;
        pub const errc_no_link: root::std::errc = 67;
        pub const errc_no_lock_available: root::std::errc = 37;
        pub const errc_no_message_available: root::std::errc = 61;
        pub const errc_no_message: root::std::errc = 42;
        pub const errc_no_protocol_option: root::std::errc = 92;
        pub const errc_no_space_on_device: root::std::errc = 28;
        pub const errc_no_stream_resources: root::std::errc = 63;
        pub const errc_no_such_device_or_address: root::std::errc = 6;
        pub const errc_no_such_device: root::std::errc = 19;
        pub const errc_no_such_file_or_directory: root::std::errc = 2;
        pub const errc_no_such_process: root::std::errc = 3;
        pub const errc_not_a_directory: root::std::errc = 20;
        pub const errc_not_a_socket: root::std::errc = 88;
        pub const errc_not_a_stream: root::std::errc = 60;
        pub const errc_not_connected: root::std::errc = 107;
        pub const errc_not_enough_memory: root::std::errc = 12;
        pub const errc_not_supported: root::std::errc = 95;
        pub const errc_operation_canceled: root::std::errc = 125;
        pub const errc_operation_in_progress: root::std::errc = 115;
        pub const errc_operation_not_permitted: root::std::errc = 1;
        pub const errc_operation_not_supported: root::std::errc = 95;
        pub const errc_operation_would_block: root::std::errc = 11;
        pub const errc_owner_dead: root::std::errc = 130;
        pub const errc_permission_denied: root::std::errc = 13;
        pub const errc_protocol_error: root::std::errc = 71;
        pub const errc_protocol_not_supported: root::std::errc = 93;
        pub const errc_read_only_file_system: root::std::errc = 30;
        pub const errc_resource_deadlock_would_occur: root::std::errc = 35;
        pub const errc_resource_unavailable_try_again: root::std::errc = 11;
        pub const errc_result_out_of_range: root::std::errc = 34;
        pub const errc_state_not_recoverable: root::std::errc = 131;
        pub const errc_stream_timeout: root::std::errc = 62;
        pub const errc_text_file_busy: root::std::errc = 26;
        pub const errc_timed_out: root::std::errc = 110;
        pub const errc_too_many_files_open_in_system: root::std::errc = 23;
        pub const errc_too_many_files_open: root::std::errc = 24;
        pub const errc_too_many_links: root::std::errc = 31;
        pub const errc_too_many_symbolic_link_levels: root::std::errc = 40;
        pub const errc_value_too_large: root::std::errc = 75;
        pub const errc_wrong_protocol_type: root::std::errc = 91;
        pub type errc = i32;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_error_code_enum {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_error_condition_enum {
            pub _base: root::std::false_type,
        }
        #[test]
        fn __bindgen_test_layout_is_error_condition_enum_open0_errc_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::is_error_condition_enum>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::is_error_condition_enum)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::is_error_condition_enum>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::is_error_condition_enum)
                )
            );
        }
        #[repr(C)]
        pub struct error_category__bindgen_vtable(::std::os::raw::c_void);
        #[repr(C)]
        #[derive(Debug)]
        pub struct error_category {
            pub vtable_: *const error_category__bindgen_vtable,
        }
        #[test]
        fn bindgen_test_layout_error_category() {
            assert_eq!(
                ::std::mem::size_of::<error_category>(),
                8usize,
                concat!("Size of: ", stringify!(error_category))
            );
            assert_eq!(
                ::std::mem::align_of::<error_category>(),
                8usize,
                concat!("Alignment of ", stringify!(error_category))
            );
        }
        impl Default for error_category {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt3_V214error_categoryD1Ev"]
            pub fn error_category_error_category_destructor(
                this: *mut root::std::error_category,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt3_V214error_category23default_error_conditionEi"]
            pub fn error_category_default_error_condition(
                this: *mut ::std::os::raw::c_void,
                __i: ::std::os::raw::c_int,
            ) -> root::std::error_condition;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition"]
            pub fn error_category_equivalent(
                this: *mut ::std::os::raw::c_void,
                __i: ::std::os::raw::c_int,
                __cond: *const root::std::error_condition,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt3_V214error_category10equivalentERKSt10error_codei"]
            pub fn error_category_equivalent1(
                this: *mut ::std::os::raw::c_void,
                __code: *const root::std::error_code,
                __i: ::std::os::raw::c_int,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt3_V215system_categoryEv"]
            pub fn system_category() -> *const root::std::error_category;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt3_V216generic_categoryEv"]
            pub fn generic_category() -> *const root::std::error_category;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt15make_error_codeSt4errc"]
            pub fn make_error_code(
                arg1: root::std::errc,
            ) -> root::std::error_code;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct error_code {
            pub _M_value: ::std::os::raw::c_int,
            pub _M_cat: *const root::std::error_category,
        }
        #[test]
        fn bindgen_test_layout_error_code() {
            assert_eq!(
                ::std::mem::size_of::<error_code>(),
                16usize,
                concat!("Size of: ", stringify!(error_code))
            );
            assert_eq!(
                ::std::mem::align_of::<error_code>(),
                8usize,
                concat!("Alignment of ", stringify!(error_code))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<error_code>()))._M_value as *const _
                        as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(error_code),
                    "::",
                    stringify!(_M_value)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<error_code>()))._M_cat as *const _
                        as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(error_code),
                    "::",
                    stringify!(_M_cat)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt10error_code23default_error_conditionEv"]
            pub fn error_code_default_error_condition(
                this: *const root::std::error_code,
            ) -> root::std::error_condition;
        }
        impl Default for error_code {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl error_code {
            #[inline]
            pub unsafe fn default_error_condition(
                &self,
            ) -> root::std::error_condition {
                error_code_default_error_condition(self)
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt20make_error_conditionSt4errc"]
            pub fn make_error_condition(
                arg1: root::std::errc,
            ) -> root::std::error_condition;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct error_condition {
            pub _M_value: ::std::os::raw::c_int,
            pub _M_cat: *const root::std::error_category,
        }
        #[test]
        fn bindgen_test_layout_error_condition() {
            assert_eq!(
                ::std::mem::size_of::<error_condition>(),
                16usize,
                concat!("Size of: ", stringify!(error_condition))
            );
            assert_eq!(
                ::std::mem::align_of::<error_condition>(),
                8usize,
                concat!("Alignment of ", stringify!(error_condition))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<error_condition>()))._M_value
                        as *const _ as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(error_condition),
                    "::",
                    stringify!(_M_value)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<error_condition>()))._M_cat
                        as *const _ as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(error_condition),
                    "::",
                    stringify!(_M_cat)
                )
            );
        }
        impl Default for error_condition {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        pub struct system_error {
            pub _base: root::std::runtime_error,
            pub _M_code: root::std::error_code,
        }
        #[test]
        fn bindgen_test_layout_system_error() {
            assert_eq!(
                ::std::mem::size_of::<system_error>(),
                32usize,
                concat!("Size of: ", stringify!(system_error))
            );
            assert_eq!(
                ::std::mem::align_of::<system_error>(),
                8usize,
                concat!("Alignment of ", stringify!(system_error))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<system_error>()))._M_code as *const _
                        as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(system_error),
                    "::",
                    stringify!(_M_code)
                )
            );
        }
        impl Default for system_error {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12system_errorD1Ev"]
            pub fn system_error_system_error_destructor(
                this: *mut root::std::system_error,
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_error_code_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        pub const _Ios_Fmtflags__S_boolalpha: root::std::_Ios_Fmtflags = 1;
        pub const _Ios_Fmtflags__S_dec: root::std::_Ios_Fmtflags = 2;
        pub const _Ios_Fmtflags__S_fixed: root::std::_Ios_Fmtflags = 4;
        pub const _Ios_Fmtflags__S_hex: root::std::_Ios_Fmtflags = 8;
        pub const _Ios_Fmtflags__S_internal: root::std::_Ios_Fmtflags = 16;
        pub const _Ios_Fmtflags__S_left: root::std::_Ios_Fmtflags = 32;
        pub const _Ios_Fmtflags__S_oct: root::std::_Ios_Fmtflags = 64;
        pub const _Ios_Fmtflags__S_right: root::std::_Ios_Fmtflags = 128;
        pub const _Ios_Fmtflags__S_scientific: root::std::_Ios_Fmtflags = 256;
        pub const _Ios_Fmtflags__S_showbase: root::std::_Ios_Fmtflags = 512;
        pub const _Ios_Fmtflags__S_showpoint: root::std::_Ios_Fmtflags = 1024;
        pub const _Ios_Fmtflags__S_showpos: root::std::_Ios_Fmtflags = 2048;
        pub const _Ios_Fmtflags__S_skipws: root::std::_Ios_Fmtflags = 4096;
        pub const _Ios_Fmtflags__S_unitbuf: root::std::_Ios_Fmtflags = 8192;
        pub const _Ios_Fmtflags__S_uppercase: root::std::_Ios_Fmtflags = 16384;
        pub const _Ios_Fmtflags__S_adjustfield: root::std::_Ios_Fmtflags = 176;
        pub const _Ios_Fmtflags__S_basefield: root::std::_Ios_Fmtflags = 74;
        pub const _Ios_Fmtflags__S_floatfield: root::std::_Ios_Fmtflags = 260;
        pub const _Ios_Fmtflags__S_ios_fmtflags_end: root::std::_Ios_Fmtflags =
            65536;
        pub const _Ios_Fmtflags__S_ios_fmtflags_max: root::std::_Ios_Fmtflags =
            2147483647;
        pub const _Ios_Fmtflags__S_ios_fmtflags_min: root::std::_Ios_Fmtflags =
            -2147483648;
        pub type _Ios_Fmtflags = i32;
        pub const _Ios_Openmode__S_app: root::std::_Ios_Openmode = 1;
        pub const _Ios_Openmode__S_ate: root::std::_Ios_Openmode = 2;
        pub const _Ios_Openmode__S_bin: root::std::_Ios_Openmode = 4;
        pub const _Ios_Openmode__S_in: root::std::_Ios_Openmode = 8;
        pub const _Ios_Openmode__S_out: root::std::_Ios_Openmode = 16;
        pub const _Ios_Openmode__S_trunc: root::std::_Ios_Openmode = 32;
        pub const _Ios_Openmode__S_ios_openmode_end: root::std::_Ios_Openmode =
            65536;
        pub const _Ios_Openmode__S_ios_openmode_max: root::std::_Ios_Openmode =
            2147483647;
        pub const _Ios_Openmode__S_ios_openmode_min: root::std::_Ios_Openmode =
            -2147483648;
        pub type _Ios_Openmode = i32;
        pub const _Ios_Iostate__S_goodbit: root::std::_Ios_Iostate = 0;
        pub const _Ios_Iostate__S_badbit: root::std::_Ios_Iostate = 1;
        pub const _Ios_Iostate__S_eofbit: root::std::_Ios_Iostate = 2;
        pub const _Ios_Iostate__S_failbit: root::std::_Ios_Iostate = 4;
        pub const _Ios_Iostate__S_ios_iostate_end: root::std::_Ios_Iostate =
            65536;
        pub const _Ios_Iostate__S_ios_iostate_max: root::std::_Ios_Iostate =
            2147483647;
        pub const _Ios_Iostate__S_ios_iostate_min: root::std::_Ios_Iostate =
            -2147483648;
        pub type _Ios_Iostate = i32;
        pub const _Ios_Seekdir__S_beg: root::std::_Ios_Seekdir = 0;
        pub const _Ios_Seekdir__S_cur: root::std::_Ios_Seekdir = 1;
        pub const _Ios_Seekdir__S_end: root::std::_Ios_Seekdir = 2;
        pub const _Ios_Seekdir__S_ios_seekdir_end: root::std::_Ios_Seekdir =
            65536;
        pub type _Ios_Seekdir = u32;
        pub const io_errc_stream: root::std::io_errc = 1;
        pub type io_errc = i32;
        #[test]
        fn __bindgen_test_layout_is_error_code_enum_open0_io_errc_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::is_error_code_enum>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::is_error_code_enum)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::is_error_code_enum>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::is_error_code_enum)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt17iostream_categoryv"]
            pub fn iostream_category() -> *const root::std::error_category;
        }
        #[repr(C)]
        pub struct ios_base__bindgen_vtable(::std::os::raw::c_void);
        #[repr(C)]
        #[derive(Debug)]
        pub struct ios_base {
            pub vtable_: *const ios_base__bindgen_vtable,
            pub _M_precision: root::std::streamsize,
            pub _M_width: root::std::streamsize,
            pub _M_flags: root::std::ios_base_fmtflags,
            pub _M_exception: root::std::ios_base_iostate,
            pub _M_streambuf_state: root::std::ios_base_iostate,
            pub _M_callbacks: *mut root::std::ios_base__Callback_list,
            pub _M_word_zero: root::std::ios_base__Words,
            pub _M_local_word: [root::std::ios_base__Words; 8usize],
            pub _M_word_size: ::std::os::raw::c_int,
            pub _M_word: *mut root::std::ios_base__Words,
            pub _M_ios_locale: root::std::locale,
        }
        #[repr(C)]
        pub struct ios_base_failure {
            pub _base: root::std::system_error,
        }
        #[test]
        fn bindgen_test_layout_ios_base_failure() {
            assert_eq!(
                ::std::mem::size_of::<ios_base_failure>(),
                32usize,
                concat!("Size of: ", stringify!(ios_base_failure))
            );
            assert_eq!(
                ::std::mem::align_of::<ios_base_failure>(),
                8usize,
                concat!("Alignment of ", stringify!(ios_base_failure))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base7failureB5cxx11C1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn ios_base_failure_failure(
                this: *mut root::std::ios_base_failure,
                __str: *const root::std::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base7failureB5cxx11C1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt10error_code"]
            pub fn ios_base_failure_failure1(
                this: *mut root::std::ios_base_failure,
                arg1: *const root::std::string,
                arg2: *const root::std::error_code,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base7failureB5cxx11C1EPKcRKSt10error_code"]
            pub fn ios_base_failure_failure2(
                this: *mut root::std::ios_base_failure,
                arg1: *const ::std::os::raw::c_char,
                arg2: *const root::std::error_code,
            );
        }
        impl Default for ios_base_failure {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ios_base_failure {
            #[inline]
            pub unsafe fn new(__str: *const root::std::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                ios_base_failure_failure(__bindgen_tmp.as_mut_ptr(), __str);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(
                arg1: *const root::std::string,
                arg2: *const root::std::error_code,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                ios_base_failure_failure1(
                    __bindgen_tmp.as_mut_ptr(),
                    arg1,
                    arg2,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(
                arg1: *const ::std::os::raw::c_char,
                arg2: *const root::std::error_code,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                ios_base_failure_failure2(
                    __bindgen_tmp.as_mut_ptr(),
                    arg1,
                    arg2,
                );
                __bindgen_tmp.assume_init()
            }
        }
        pub use self::super::super::root::std::_Ios_Fmtflags as ios_base_fmtflags;
        pub use self::super::super::root::std::_Ios_Iostate as ios_base_iostate;
        pub use self::super::super::root::std::_Ios_Openmode as ios_base_openmode;
        pub use self::super::super::root::std::_Ios_Seekdir as ios_base_seekdir;
        pub type ios_base_io_state = ::std::os::raw::c_int;
        pub type ios_base_open_mode = ::std::os::raw::c_int;
        pub type ios_base_seek_dir = ::std::os::raw::c_int;
        pub type ios_base_streampos = root::std::streampos;
        pub type ios_base_streamoff = root::std::streamoff;
        pub const ios_base_event_erase_event: root::std::ios_base_event = 0;
        pub const ios_base_event_imbue_event: root::std::ios_base_event = 1;
        pub const ios_base_event_copyfmt_event: root::std::ios_base_event = 2;
        pub type ios_base_event = u32;
        pub type ios_base_event_callback = ::std::option::Option<
            unsafe extern "C" fn(
                __e: root::std::ios_base_event,
                __b: *mut root::std::ios_base,
                __i: ::std::os::raw::c_int,
            ),
        >;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ios_base__Callback_list {
            pub _M_next: *mut root::std::ios_base__Callback_list,
            pub _M_fn: root::std::ios_base_event_callback,
            pub _M_index: ::std::os::raw::c_int,
            pub _M_refcount: root::_Atomic_word,
        }
        #[test]
        fn bindgen_test_layout_ios_base__Callback_list() {
            assert_eq!(
                ::std::mem::size_of::<ios_base__Callback_list>(),
                24usize,
                concat!("Size of: ", stringify!(ios_base__Callback_list))
            );
            assert_eq!(
                ::std::mem::align_of::<ios_base__Callback_list>(),
                8usize,
                concat!("Alignment of ", stringify!(ios_base__Callback_list))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<ios_base__Callback_list>()))._M_next
                        as *const _ as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base__Callback_list),
                    "::",
                    stringify!(_M_next)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<ios_base__Callback_list>()))._M_fn
                        as *const _ as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base__Callback_list),
                    "::",
                    stringify!(_M_fn)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<ios_base__Callback_list>()))._M_index
                        as *const _ as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base__Callback_list),
                    "::",
                    stringify!(_M_index)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<ios_base__Callback_list>()))
                        ._M_refcount as *const _ as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base__Callback_list),
                    "::",
                    stringify!(_M_refcount)
                )
            );
        }
        impl Default for ios_base__Callback_list {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ios_base__Words {
            pub _M_pword: *mut ::std::os::raw::c_void,
            pub _M_iword: ::std::os::raw::c_long,
        }
        #[test]
        fn bindgen_test_layout_ios_base__Words() {
            assert_eq!(
                ::std::mem::size_of::<ios_base__Words>(),
                16usize,
                concat!("Size of: ", stringify!(ios_base__Words))
            );
            assert_eq!(
                ::std::mem::align_of::<ios_base__Words>(),
                8usize,
                concat!("Alignment of ", stringify!(ios_base__Words))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<ios_base__Words>()))._M_pword
                        as *const _ as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base__Words),
                    "::",
                    stringify!(_M_pword)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<ios_base__Words>()))._M_iword
                        as *const _ as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base__Words),
                    "::",
                    stringify!(_M_iword)
                )
            );
        }
        impl Default for ios_base__Words {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub const ios_base__S_local_word_size:
            root::std::ios_base__bindgen_ty_1 = 8;
        pub type ios_base__bindgen_ty_1 = u32;
        #[repr(C)]
        #[derive(Debug, Default)]
        pub struct ios_base_Init {
            pub _address: u8,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base4Init11_S_refcountE"]
            pub static mut ios_base_Init__S_refcount: root::_Atomic_word;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base4Init20_S_synced_with_stdioE"]
            pub static mut ios_base_Init__S_synced_with_stdio: bool;
        }
        #[test]
        fn bindgen_test_layout_ios_base_Init() {
            assert_eq!(
                ::std::mem::size_of::<ios_base_Init>(),
                1usize,
                concat!("Size of: ", stringify!(ios_base_Init))
            );
            assert_eq!(
                ::std::mem::align_of::<ios_base_Init>(),
                1usize,
                concat!("Alignment of ", stringify!(ios_base_Init))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base4InitC1Ev"]
            pub fn ios_base_Init_Init(this: *mut root::std::ios_base_Init);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base4InitD1Ev"]
            pub fn ios_base_Init_Init_destructor(
                this: *mut root::std::ios_base_Init,
            );
        }
        impl ios_base_Init {
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                ios_base_Init_Init(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                ios_base_Init_Init_destructor(self)
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base9boolalphaE"]
            pub static ios_base_boolalpha: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base3decE"]
            pub static ios_base_dec: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base5fixedE"]
            pub static ios_base_fixed: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base3hexE"]
            pub static ios_base_hex: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base8internalE"]
            pub static ios_base_internal: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base4leftE"]
            pub static ios_base_left: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base3octE"]
            pub static ios_base_oct: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base5rightE"]
            pub static ios_base_right: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base10scientificE"]
            pub static ios_base_scientific: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base8showbaseE"]
            pub static ios_base_showbase: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base9showpointE"]
            pub static ios_base_showpoint: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base7showposE"]
            pub static ios_base_showpos: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base6skipwsE"]
            pub static ios_base_skipws: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base7unitbufE"]
            pub static ios_base_unitbuf: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base9uppercaseE"]
            pub static ios_base_uppercase: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base11adjustfieldE"]
            pub static ios_base_adjustfield: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base9basefieldE"]
            pub static ios_base_basefield: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base10floatfieldE"]
            pub static ios_base_floatfield: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base6badbitE"]
            pub static ios_base_badbit: root::std::ios_base_iostate;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base6eofbitE"]
            pub static ios_base_eofbit: root::std::ios_base_iostate;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base7failbitE"]
            pub static ios_base_failbit: root::std::ios_base_iostate;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base7goodbitE"]
            pub static ios_base_goodbit: root::std::ios_base_iostate;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base3appE"]
            pub static ios_base_app: root::std::ios_base_openmode;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base3ateE"]
            pub static ios_base_ate: root::std::ios_base_openmode;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base6binaryE"]
            pub static ios_base_binary: root::std::ios_base_openmode;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base2inE"]
            pub static ios_base_in: root::std::ios_base_openmode;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base3outE"]
            pub static ios_base_out: root::std::ios_base_openmode;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base5truncE"]
            pub static ios_base_trunc: root::std::ios_base_openmode;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base3begE"]
            pub static ios_base_beg: root::std::ios_base_seekdir;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base3curE"]
            pub static ios_base_cur: root::std::ios_base_seekdir;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base3endE"]
            pub static ios_base_end: root::std::ios_base_seekdir;
        }
        #[test]
        fn bindgen_test_layout_ios_base() {
            assert_eq!(
                ::std::mem::size_of::<ios_base>(),
                216usize,
                concat!("Size of: ", stringify!(ios_base))
            );
            assert_eq!(
                ::std::mem::align_of::<ios_base>(),
                8usize,
                concat!("Alignment of ", stringify!(ios_base))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<ios_base>()))._M_precision
                        as *const _ as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base),
                    "::",
                    stringify!(_M_precision)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<ios_base>()))._M_width as *const _
                        as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base),
                    "::",
                    stringify!(_M_width)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<ios_base>()))._M_flags as *const _
                        as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base),
                    "::",
                    stringify!(_M_flags)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<ios_base>()))._M_exception
                        as *const _ as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base),
                    "::",
                    stringify!(_M_exception)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<ios_base>()))._M_streambuf_state
                        as *const _ as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base),
                    "::",
                    stringify!(_M_streambuf_state)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<ios_base>()))._M_callbacks
                        as *const _ as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base),
                    "::",
                    stringify!(_M_callbacks)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<ios_base>()))._M_word_zero
                        as *const _ as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base),
                    "::",
                    stringify!(_M_word_zero)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<ios_base>()))._M_local_word
                        as *const _ as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base),
                    "::",
                    stringify!(_M_local_word)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<ios_base>()))._M_word_size
                        as *const _ as usize
                },
                192usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base),
                    "::",
                    stringify!(_M_word_size)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<ios_base>()))._M_word as *const _
                        as usize
                },
                200usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base),
                    "::",
                    stringify!(_M_word)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<ios_base>()))._M_ios_locale
                        as *const _ as usize
                },
                208usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base),
                    "::",
                    stringify!(_M_ios_locale)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base17register_callbackEPFvNS_5eventERS_iEi"]
            pub fn ios_base_register_callback(
                this: *mut root::std::ios_base,
                __fn: root::std::ios_base_event_callback,
                __index: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base17_M_call_callbacksENS_5eventE"]
            pub fn ios_base__M_call_callbacks(
                this: *mut root::std::ios_base,
                __ev: root::std::ios_base_event,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base20_M_dispose_callbacksEv"]
            pub fn ios_base__M_dispose_callbacks(
                this: *mut root::std::ios_base,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base13_M_grow_wordsEib"]
            pub fn ios_base__M_grow_words(
                this: *mut root::std::ios_base,
                __index: ::std::os::raw::c_int,
                __iword: bool,
            ) -> *mut root::std::ios_base__Words;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base7_M_initEv"]
            pub fn ios_base__M_init(this: *mut root::std::ios_base);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base15sync_with_stdioEb"]
            pub fn ios_base_sync_with_stdio(__sync: bool) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base5imbueERKSt6locale"]
            pub fn ios_base_imbue(
                this: *mut root::std::ios_base,
                __loc: *const root::std::locale,
            ) -> root::std::locale;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base6xallocEv"]
            pub fn ios_base_xalloc() -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base7_M_moveERS_"]
            pub fn ios_base__M_move(
                this: *mut root::std::ios_base,
                arg1: *mut root::std::ios_base,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base7_M_swapERS_"]
            pub fn ios_base__M_swap(
                this: *mut root::std::ios_base,
                __rhs: *mut root::std::ios_base,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_baseC1Ev"]
            pub fn ios_base_ios_base(this: *mut root::std::ios_base);
        }
        impl Default for ios_base {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ios_base {
            #[inline]
            pub unsafe fn register_callback(
                &mut self,
                __fn: root::std::ios_base_event_callback,
                __index: ::std::os::raw::c_int,
            ) {
                ios_base_register_callback(self, __fn, __index)
            }
            #[inline]
            pub unsafe fn _M_call_callbacks(
                &mut self,
                __ev: root::std::ios_base_event,
            ) {
                ios_base__M_call_callbacks(self, __ev)
            }
            #[inline]
            pub unsafe fn _M_dispose_callbacks(&mut self) {
                ios_base__M_dispose_callbacks(self)
            }
            #[inline]
            pub unsafe fn _M_grow_words(
                &mut self,
                __index: ::std::os::raw::c_int,
                __iword: bool,
            ) -> *mut root::std::ios_base__Words {
                ios_base__M_grow_words(self, __index, __iword)
            }
            #[inline]
            pub unsafe fn _M_init(&mut self) {
                ios_base__M_init(self)
            }
            #[inline]
            pub unsafe fn sync_with_stdio(__sync: bool) -> bool {
                ios_base_sync_with_stdio(__sync)
            }
            #[inline]
            pub unsafe fn imbue(
                &mut self,
                __loc: *const root::std::locale,
            ) -> root::std::locale {
                ios_base_imbue(self, __loc)
            }
            #[inline]
            pub unsafe fn xalloc() -> ::std::os::raw::c_int {
                ios_base_xalloc()
            }
            #[inline]
            pub unsafe fn _M_move(&mut self, arg1: *mut root::std::ios_base) {
                ios_base__M_move(self, arg1)
            }
            #[inline]
            pub unsafe fn _M_swap(&mut self, __rhs: *mut root::std::ios_base) {
                ios_base__M_swap(self, __rhs)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                ios_base_ios_base(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base7failureB5cxx11D1Ev"]
            pub fn ios_base_failure_failure_destructor(
                this: *mut root::std::ios_base_failure,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt8ios_base7failureB5cxx114whatEv"]
            pub fn ios_base_failure_what(
                this: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_baseD1Ev"]
            pub fn ios_base_ios_base_destructor(this: *mut root::std::ios_base);
        }
        #[repr(C)]
        pub struct basic_streambuf__bindgen_vtable(::std::os::raw::c_void);
        #[repr(C)]
        #[derive(Debug)]
        pub struct basic_streambuf<_CharT> {
            pub vtable_: *const basic_streambuf__bindgen_vtable,
            pub _M_in_beg: *mut root::std::basic_streambuf_char_type<_CharT>,
            pub _M_in_cur: *mut root::std::basic_streambuf_char_type<_CharT>,
            pub _M_in_end: *mut root::std::basic_streambuf_char_type<_CharT>,
            pub _M_out_beg: *mut root::std::basic_streambuf_char_type<_CharT>,
            pub _M_out_cur: *mut root::std::basic_streambuf_char_type<_CharT>,
            pub _M_out_end: *mut root::std::basic_streambuf_char_type<_CharT>,
            pub _M_buf_locale: root::std::locale,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_streambuf_char_type<_CharT> = _CharT;
        pub type basic_streambuf_traits_type<_Traits> = _Traits;
        pub type basic_streambuf_int_type = [u8; 0usize];
        pub type basic_streambuf_pos_type = [u8; 0usize];
        pub type basic_streambuf_off_type = [u8; 0usize];
        pub type basic_streambuf___streambuf_type<_CharT> =
            root::std::basic_streambuf<
                root::std::basic_streambuf_char_type<_CharT>,
            >;
        impl<_CharT> Default for basic_streambuf<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt21__copy_streambufs_eofIcSt11char_traitsIcEElPSt15basic_streambufIT_T0_ES6_Rb"]
            pub fn __copy_streambufs_eof(
                __sbin: *mut root::std::basic_streambuf<::std::os::raw::c_char>,
                __sbout: *mut root::std::basic_streambuf<
                    ::std::os::raw::c_char,
                >,
                __ineof: *mut bool,
            ) -> root::std::streamsize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt21__copy_streambufs_eofIwSt11char_traitsIwEElPSt15basic_streambufIT_T0_ES6_Rb"]
            pub fn __copy_streambufs_eof1(
                __sbin: *mut root::std::basic_streambuf<u32>,
                __sbout: *mut root::std::basic_streambuf<u32>,
                __ineof: *mut bool,
            ) -> root::std::streamsize;
        }
        #[test]
        fn __bindgen_test_layout_basic_streambuf_open0_char_char_traits_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<
                    root::std::basic_streambuf<::std::os::raw::c_char>,
                >(),
                64usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(
                        root::std::basic_streambuf<::std::os::raw::c_char>
                    )
                )
            );
            assert_eq!(
                ::std::mem::align_of::<
                    root::std::basic_streambuf<::std::os::raw::c_char>,
                >(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(
                        root::std::basic_streambuf<::std::os::raw::c_char>
                    )
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_streambuf_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::basic_streambuf<u32>>(),
                64usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_streambuf<u32>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::basic_streambuf<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_streambuf<u32>)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct ctype_base {
            pub _address: u8,
        }
        pub type ctype_base___to_type = *const ::std::os::raw::c_int;
        pub type ctype_base_mask = ::std::os::raw::c_ushort;
        pub const ctype_base_upper: root::std::ctype_base_mask = 256;
        pub const ctype_base_lower: root::std::ctype_base_mask = 512;
        pub const ctype_base_alpha: root::std::ctype_base_mask = 1024;
        pub const ctype_base_digit: root::std::ctype_base_mask = 2048;
        pub const ctype_base_xdigit: root::std::ctype_base_mask = 4096;
        pub const ctype_base_space: root::std::ctype_base_mask = 8192;
        pub const ctype_base_print: root::std::ctype_base_mask = 16384;
        pub const ctype_base_graph: root::std::ctype_base_mask = 3076;
        pub const ctype_base_cntrl: root::std::ctype_base_mask = 2;
        pub const ctype_base_punct: root::std::ctype_base_mask = 4;
        pub const ctype_base_alnum: root::std::ctype_base_mask = 3072;
        pub const ctype_base_blank: root::std::ctype_base_mask = 1;
        #[test]
        fn bindgen_test_layout_ctype_base() {
            assert_eq!(
                ::std::mem::size_of::<ctype_base>(),
                1usize,
                concat!("Size of: ", stringify!(ctype_base))
            );
            assert_eq!(
                ::std::mem::align_of::<ctype_base>(),
                1usize,
                concat!("Alignment of ", stringify!(ctype_base))
            );
        }
        #[repr(C)]
        pub struct istreambuf_iterator<_CharT> {
            pub _M_sbuf:
                *mut root::std::istreambuf_iterator_streambuf_type<_CharT>,
            pub _M_c: root::std::istreambuf_iterator_int_type,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type istreambuf_iterator_char_type<_CharT> = _CharT;
        pub type istreambuf_iterator_traits_type<_Traits> = _Traits;
        pub type istreambuf_iterator_int_type = [u8; 0usize];
        pub type istreambuf_iterator_streambuf_type<_CharT> =
            root::std::basic_streambuf<_CharT>;
        pub type istreambuf_iterator_istream_type<_CharT> =
            root::std::basic_istream<_CharT>;
        impl<_CharT> Default for istreambuf_iterator<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ostreambuf_iterator<_CharT> {
            pub _M_sbuf:
                *mut root::std::ostreambuf_iterator_streambuf_type<_CharT>,
            pub _M_failed: bool,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type ostreambuf_iterator_char_type<_CharT> = _CharT;
        pub type ostreambuf_iterator_traits_type<_Traits> = _Traits;
        pub type ostreambuf_iterator_streambuf_type<_CharT> =
            root::std::basic_streambuf<_CharT>;
        pub type ostreambuf_iterator_ostream_type<_CharT> =
            root::std::basic_ostream<_CharT>;
        impl<_CharT> Default for ostreambuf_iterator<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt14__convert_to_vIfEvPKcRT_RSt12_Ios_IostateRKP15__locale_struct"]
            pub fn __convert_to_v(
                arg1: *const ::std::os::raw::c_char,
                arg2: *mut f32,
                arg3: *mut root::std::ios_base_iostate,
                arg4: *const root::std::__c_locale,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt14__convert_to_vIdEvPKcRT_RSt12_Ios_IostateRKP15__locale_struct"]
            pub fn __convert_to_v1(
                arg1: *const ::std::os::raw::c_char,
                arg2: *mut f64,
                arg3: *mut root::std::ios_base_iostate,
                arg4: *const root::std::__c_locale,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt14__convert_to_vIeEvPKcRT_RSt12_Ios_IostateRKP15__locale_struct"]
            pub fn __convert_to_v2(
                arg1: *const ::std::os::raw::c_char,
                arg2: *mut u128,
                arg3: *mut root::std::ios_base_iostate,
                arg4: *const root::std::__c_locale,
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __pad {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct __ctype_abstract_base {
            pub _base: root::std::locale_facet,
        }
        pub type __ctype_abstract_base_char_type<_CharT> = _CharT;
        impl Default for __ctype_abstract_base {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct ctype {
            pub _base: root::std::__ctype_abstract_base,
        }
        pub type ctype_char_type<_CharT> = _CharT;
        pub type ctype_mask = root::std::__ctype_abstract_base;
        impl Default for ctype {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[test]
        fn __bindgen_test_layout_ctype_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::ctype>(),
                576usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::ctype)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::ctype>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::ctype)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_ctype_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::ctype>(),
                1344usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::ctype)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::ctype>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::ctype)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct ctype_byname {
            pub _base: root::std::ctype,
        }
        pub type ctype_byname_mask = root::std::ctype;
        impl Default for ctype_byname {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[test]
        fn __bindgen_test_layout_ctype_byname_open0_char_close0_instantiation()
        {
            assert_eq!(
                ::std::mem::size_of::<root::std::ctype_byname>(),
                576usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::ctype_byname)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::ctype_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::ctype_byname)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_ctype_byname_open0_wchar_t_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::ctype_byname>(),
                1344usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::ctype_byname)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::ctype_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::ctype_byname)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __num_base {
            pub _address: u8,
        }
        pub const __num_base__S_ominus: root::std::__num_base__bindgen_ty_1 = 0;
        pub const __num_base__S_oplus: root::std::__num_base__bindgen_ty_1 = 1;
        pub const __num_base__S_ox: root::std::__num_base__bindgen_ty_1 = 2;
        pub const __num_base__S_oX: root::std::__num_base__bindgen_ty_1 = 3;
        pub const __num_base__S_odigits: root::std::__num_base__bindgen_ty_1 =
            4;
        pub const __num_base__S_odigits_end:
            root::std::__num_base__bindgen_ty_1 = 20;
        pub const __num_base__S_oudigits: root::std::__num_base__bindgen_ty_1 =
            20;
        pub const __num_base__S_oudigits_end:
            root::std::__num_base__bindgen_ty_1 = 36;
        pub const __num_base__S_oe: root::std::__num_base__bindgen_ty_1 = 18;
        pub const __num_base__S_oE: root::std::__num_base__bindgen_ty_1 = 34;
        pub const __num_base__S_oend: root::std::__num_base__bindgen_ty_1 = 36;
        pub type __num_base__bindgen_ty_1 = u32;
        pub const __num_base__S_iminus: root::std::__num_base__bindgen_ty_2 = 0;
        pub const __num_base__S_iplus: root::std::__num_base__bindgen_ty_2 = 1;
        pub const __num_base__S_ix: root::std::__num_base__bindgen_ty_2 = 2;
        pub const __num_base__S_iX: root::std::__num_base__bindgen_ty_2 = 3;
        pub const __num_base__S_izero: root::std::__num_base__bindgen_ty_2 = 4;
        pub const __num_base__S_ie: root::std::__num_base__bindgen_ty_2 = 18;
        pub const __num_base__S_iE: root::std::__num_base__bindgen_ty_2 = 24;
        pub const __num_base__S_iend: root::std::__num_base__bindgen_ty_2 = 26;
        pub type __num_base__bindgen_ty_2 = u32;
        extern "C" {
            #[link_name = "\u{1}_ZNSt10__num_base12_S_atoms_outE"]
            pub static mut __num_base__S_atoms_out:
                *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt10__num_base11_S_atoms_inE"]
            pub static mut __num_base__S_atoms_in:
                *const ::std::os::raw::c_char;
        }
        #[test]
        fn bindgen_test_layout___num_base() {
            assert_eq!(
                ::std::mem::size_of::<__num_base>(),
                1usize,
                concat!("Size of: ", stringify!(__num_base))
            );
            assert_eq!(
                ::std::mem::align_of::<__num_base>(),
                1usize,
                concat!("Alignment of ", stringify!(__num_base))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt10__num_base15_S_format_floatERKSt8ios_basePcc"]
            pub fn __num_base__S_format_float(
                __io: *const root::std::ios_base,
                __fptr: *mut ::std::os::raw::c_char,
                __mod: ::std::os::raw::c_char,
            );
        }
        impl __num_base {
            #[inline]
            pub unsafe fn _S_format_float(
                __io: *const root::std::ios_base,
                __fptr: *mut ::std::os::raw::c_char,
                __mod: ::std::os::raw::c_char,
            ) {
                __num_base__S_format_float(__io, __fptr, __mod)
            }
        }
        #[repr(C)]
        pub struct __numpunct_cache<_CharT> {
            pub _base: root::std::locale_facet,
            pub _M_grouping: *const ::std::os::raw::c_char,
            pub _M_grouping_size: root::std::size_t,
            pub _M_use_grouping: bool,
            pub _M_truename: *const _CharT,
            pub _M_truename_size: root::std::size_t,
            pub _M_falsename: *const _CharT,
            pub _M_falsename_size: root::std::size_t,
            pub _M_decimal_point: _CharT,
            pub _M_thousands_sep: _CharT,
            pub _M_atoms_out: [_CharT; 36usize],
            pub _M_atoms_in: [_CharT; 26usize],
            pub _M_allocated: bool,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        impl<_CharT> Default for __numpunct_cache<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct num_get {
            pub _base: root::std::locale_facet,
        }
        pub type num_get_char_type<_CharT> = _CharT;
        pub type num_get_iter_type<_InIter> = _InIter;
        impl Default for num_get {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct num_put {
            pub _base: root::std::locale_facet,
        }
        pub type num_put_char_type<_CharT> = _CharT;
        pub type num_put_iter_type<_OutIter> = _OutIter;
        impl Default for num_put {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __use_cache {
            pub _address: u8,
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt17__verify_groupingPKcmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn __verify_grouping(
                __grouping: *const ::std::os::raw::c_char,
                __grouping_size: root::std::size_t,
                __grouping_tmp: *const root::std::string,
            ) -> bool;
        }
        #[test]
        fn __bindgen_test_layout_numpunct_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<
                    root::std::numpunct<::std::os::raw::c_char>,
                >(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::numpunct<::std::os::raw::c_char>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<
                    root::std::numpunct<::std::os::raw::c_char>,
                >(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::numpunct<::std::os::raw::c_char>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_numpunct_byname_open0_char_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<
                    root::std::numpunct_byname<::std::os::raw::c_char>,
                >(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(
                        root::std::numpunct_byname<::std::os::raw::c_char>
                    )
                )
            );
            assert_eq!(
                ::std::mem::align_of::<
                    root::std::numpunct_byname<::std::os::raw::c_char>,
                >(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(
                        root::std::numpunct_byname<::std::os::raw::c_char>
                    )
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_num_get_open0_char_istreambuf_iterator_open1_char_char_traits_open2_char_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::num_get>(),
                16usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::num_get)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::num_get>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::num_get)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_num_put_open0_char_ostreambuf_iterator_open1_char_char_traits_open2_char_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::num_put>(),
                16usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::num_put)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::num_put>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::num_put)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_numpunct_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::numpunct<u32>>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::numpunct<u32>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::numpunct<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::numpunct<u32>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_numpunct_byname_open0_wchar_t_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::numpunct_byname<u32>>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::numpunct_byname<u32>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::numpunct_byname<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::numpunct_byname<u32>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_num_get_open0_wchar_t_istreambuf_iterator_open1_wchar_t_char_traits_open2_wchar_t_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::num_get>(),
                16usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::num_get)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::num_get>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::num_get)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_num_put_open0_wchar_t_ostreambuf_iterator_open1_wchar_t_char_traits_open2_wchar_t_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::num_put>(),
                16usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::num_put)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::num_put>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::num_put)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct basic_ios<_CharT> {
            pub _base: root::std::ios_base,
            pub _M_tie: *mut root::std::basic_ostream<_CharT>,
            pub _M_fill: root::std::basic_ios_char_type<_CharT>,
            pub _M_fill_init: bool,
            pub _M_streambuf: *mut root::std::basic_streambuf<_CharT>,
            pub _M_ctype: *const root::std::basic_ios___ctype_type,
            pub _M_num_put: *const root::std::basic_ios___num_put_type,
            pub _M_num_get: *const root::std::basic_ios___num_get_type,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_ios_char_type<_CharT> = _CharT;
        pub type basic_ios_int_type = [u8; 0usize];
        pub type basic_ios_pos_type = [u8; 0usize];
        pub type basic_ios_off_type = [u8; 0usize];
        pub type basic_ios_traits_type<_Traits> = _Traits;
        pub type basic_ios___ctype_type = root::std::ctype;
        pub type basic_ios___num_put_type = root::std::num_put;
        pub type basic_ios___num_get_type = root::std::num_get;
        impl<_CharT> Default for basic_ios<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[test]
        fn __bindgen_test_layout_basic_ios_open0_char_char_traits_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<
                    root::std::basic_ios<::std::os::raw::c_char>,
                >(),
                264usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_ios<::std::os::raw::c_char>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<
                    root::std::basic_ios<::std::os::raw::c_char>,
                >(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_ios<::std::os::raw::c_char>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_ios_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::basic_ios<u32>>(),
                264usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_ios<u32>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::basic_ios<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_ios<u32>)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct basic_ostream<_CharT> {
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_ostream_char_type<_CharT> = _CharT;
        pub type basic_ostream_int_type = [u8; 0usize];
        pub type basic_ostream_pos_type = [u8; 0usize];
        pub type basic_ostream_off_type = [u8; 0usize];
        pub type basic_ostream_traits_type<_Traits> = _Traits;
        pub type basic_ostream___streambuf_type<_CharT> =
            root::std::basic_streambuf<_CharT>;
        pub type basic_ostream___ios_type<_CharT> =
            root::std::basic_ios<_CharT>;
        pub type basic_ostream___ostream_type<_CharT> =
            root::std::basic_ostream<_CharT>;
        pub type basic_ostream___num_put_type = root::std::num_put;
        pub type basic_ostream___ctype_type = root::std::ctype;
        impl<_CharT> Default for basic_ostream<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_convertible_to_basic_ostream_impl {
            pub _address: u8,
        }
        pub type __is_convertible_to_basic_ostream_impl___ostream_type =
            ::std::os::raw::c_void;
        pub type __do_is_convertible_to_basic_ostream_impl =
            root::std::remove_reference;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_convertible_to_basic_ostream {
            pub _address: u8,
        }
        pub type __is_convertible_to_basic_ostream_type = root::std::__not_;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_insertable {
            pub _base: root::std::false_type,
        }
        pub type __rvalue_ostream_type =
            root::std::__is_convertible_to_basic_ostream;
        #[test]
        fn __bindgen_test_layout_basic_ostream_open0_char_char_traits_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<
                    root::std::basic_ostream<::std::os::raw::c_char>,
                >(),
                272usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(
                        root::std::basic_ostream<::std::os::raw::c_char>
                    )
                )
            );
            assert_eq!(
                ::std::mem::align_of::<
                    root::std::basic_ostream<::std::os::raw::c_char>,
                >(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(
                        root::std::basic_ostream<::std::os::raw::c_char>
                    )
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_ostream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::basic_ostream<u32>>(),
                272usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_ostream<u32>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::basic_ostream<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_ostream<u32>)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct basic_istream<_CharT> {
            pub _M_gcount: root::std::streamsize,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_istream_char_type<_CharT> = _CharT;
        pub type basic_istream_int_type = [u8; 0usize];
        pub type basic_istream_pos_type = [u8; 0usize];
        pub type basic_istream_off_type = [u8; 0usize];
        pub type basic_istream_traits_type<_Traits> = _Traits;
        pub type basic_istream___streambuf_type<_CharT> =
            root::std::basic_streambuf<_CharT>;
        pub type basic_istream___ios_type<_CharT> =
            root::std::basic_ios<_CharT>;
        pub type basic_istream___istream_type<_CharT> =
            root::std::basic_istream<_CharT>;
        pub type basic_istream___num_get_type = root::std::num_get;
        pub type basic_istream___ctype_type = root::std::ctype;
        impl<_CharT> Default for basic_istream<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct basic_istream_sentry {
            pub _M_ok: bool,
        }
        pub type basic_istream_sentry___ctype_type =
            root::std::basic_istream___ctype_type;
        pub type basic_istream_sentry___int_type = [u8; 0usize];
        #[repr(C)]
        #[derive(Debug)]
        pub struct basic_iostream<_CharT> {
            pub _base: root::std::basic_istream<_CharT>,
            pub _base_1: root::std::basic_ostream<_CharT>,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_iostream_char_type<_CharT> = _CharT;
        pub type basic_iostream_int_type = [u8; 0usize];
        pub type basic_iostream_pos_type = [u8; 0usize];
        pub type basic_iostream_off_type = [u8; 0usize];
        pub type basic_iostream_traits_type<_Traits> = _Traits;
        pub type basic_iostream___istream_type<_CharT> =
            root::std::basic_istream<_CharT>;
        pub type basic_iostream___ostream_type<_CharT> =
            root::std::basic_ostream<_CharT>;
        impl<_CharT> Default for basic_iostream<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_convertible_to_basic_istream_impl {
            pub _address: u8,
        }
        pub type __is_convertible_to_basic_istream_impl___istream_type =
            ::std::os::raw::c_void;
        pub type __do_is_convertible_to_basic_istream_impl =
            root::std::remove_reference;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_convertible_to_basic_istream {
            pub _address: u8,
        }
        pub type __is_convertible_to_basic_istream_type = root::std::__not_;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_extractable {
            pub _base: root::std::false_type,
        }
        pub type __rvalue_istream_type =
            root::std::__is_convertible_to_basic_istream;
        #[test]
        fn __bindgen_test_layout_basic_istream_open0_char_char_traits_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<
                    root::std::basic_istream<::std::os::raw::c_char>,
                >(),
                280usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(
                        root::std::basic_istream<::std::os::raw::c_char>
                    )
                )
            );
            assert_eq!(
                ::std::mem::align_of::<
                    root::std::basic_istream<::std::os::raw::c_char>,
                >(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(
                        root::std::basic_istream<::std::os::raw::c_char>
                    )
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_iostream_open0_char_char_traits_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<
                    root::std::basic_iostream<::std::os::raw::c_char>,
                >(),
                288usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(
                        root::std::basic_iostream<::std::os::raw::c_char>
                    )
                )
            );
            assert_eq!(
                ::std::mem::align_of::<
                    root::std::basic_iostream<::std::os::raw::c_char>,
                >(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(
                        root::std::basic_iostream<::std::os::raw::c_char>
                    )
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_istream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::basic_istream<u32>>(),
                280usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_istream<u32>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::basic_istream<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_istream<u32>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_iostream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::basic_iostream<u32>>(),
                288usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_iostream<u32>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::basic_iostream<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_iostream<u32>)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt3cin"]
            pub static mut cin: root::std::istream;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4cout"]
            pub static mut cout: root::std::ostream;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4cerr"]
            pub static mut cerr: root::std::ostream;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4clog"]
            pub static mut clog: root::std::ostream;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4wcin"]
            pub static mut wcin: root::std::wistream;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5wcout"]
            pub static mut wcout: root::std::wostream;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5wcerr"]
            pub static mut wcerr: root::std::wostream;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5wclog"]
            pub static mut wclog: root::std::wostream;
        }
        extern "C" {
            #[link_name = "\u{1}_ZStL8__ioinit"]
            pub static mut __ioinit: root::std::ios_base_Init;
        }
        #[test]
        fn __bindgen_test_layout_basic_stringbuf_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<
                    root::std::basic_stringbuf<::std::os::raw::c_char>,
                >(),
                104usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(
                        root::std::basic_stringbuf<::std::os::raw::c_char>
                    )
                )
            );
            assert_eq!(
                ::std::mem::align_of::<
                    root::std::basic_stringbuf<::std::os::raw::c_char>,
                >(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(
                        root::std::basic_stringbuf<::std::os::raw::c_char>
                    )
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_istringstream_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<
                    root::std::basic_istringstream<::std::os::raw::c_char>,
                >(),
                384usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(
                        root::std::basic_istringstream<::std::os::raw::c_char>
                    )
                )
            );
            assert_eq!(
                ::std::mem::align_of::<
                    root::std::basic_istringstream<::std::os::raw::c_char>,
                >(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(
                        root::std::basic_istringstream<::std::os::raw::c_char>
                    )
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_ostringstream_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<
                    root::std::basic_ostringstream<::std::os::raw::c_char>,
                >(),
                376usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(
                        root::std::basic_ostringstream<::std::os::raw::c_char>
                    )
                )
            );
            assert_eq!(
                ::std::mem::align_of::<
                    root::std::basic_ostringstream<::std::os::raw::c_char>,
                >(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(
                        root::std::basic_ostringstream<::std::os::raw::c_char>
                    )
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_stringstream_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<
                    root::std::basic_stringstream<::std::os::raw::c_char>,
                >(),
                392usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(
                        root::std::basic_stringstream<::std::os::raw::c_char>
                    )
                )
            );
            assert_eq!(
                ::std::mem::align_of::<
                    root::std::basic_stringstream<::std::os::raw::c_char>,
                >(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(
                        root::std::basic_stringstream<::std::os::raw::c_char>
                    )
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_stringbuf_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::basic_stringbuf<u32>>(),
                104usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_stringbuf<u32>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::basic_stringbuf<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_stringbuf<u32>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_istringstream_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::basic_istringstream<u32>>(),
                384usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_istringstream<u32>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::basic_istringstream<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_istringstream<u32>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_ostringstream_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::basic_ostringstream<u32>>(),
                376usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_ostringstream<u32>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::basic_ostringstream<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_ostringstream<u32>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_stringstream_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::basic_stringstream<u32>>(),
                392usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_stringstream<u32>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::basic_stringstream<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_stringstream<u32>)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct bad_function_call {
            pub _base: root::std::exception,
        }
        #[test]
        fn bindgen_test_layout_bad_function_call() {
            assert_eq!(
                ::std::mem::size_of::<bad_function_call>(),
                8usize,
                concat!("Size of: ", stringify!(bad_function_call))
            );
            assert_eq!(
                ::std::mem::align_of::<bad_function_call>(),
                8usize,
                concat!("Alignment of ", stringify!(bad_function_call))
            );
        }
        impl Default for bad_function_call {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt17bad_function_callD1Ev"]
            pub fn bad_function_call_bad_function_call_destructor(
                this: *mut root::std::bad_function_call,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt17bad_function_call4whatEv"]
            pub fn bad_function_call_what(
                this: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_location_invariant {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Undefined_class {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub union _Nocopy_types {
            pub _M_object: *mut ::std::os::raw::c_void,
            pub _M_const_object: *const ::std::os::raw::c_void,
            pub _M_function_pointer:
                ::std::option::Option<unsafe extern "C" fn()>,
            pub _M_member_pointer:
                ::std::option::Option<unsafe extern "C" fn()>,
            _bindgen_union_align: [u64; 2usize],
        }
        #[test]
        fn bindgen_test_layout__Nocopy_types() {
            assert_eq!(
                ::std::mem::size_of::<_Nocopy_types>(),
                16usize,
                concat!("Size of: ", stringify!(_Nocopy_types))
            );
            assert_eq!(
                ::std::mem::align_of::<_Nocopy_types>(),
                8usize,
                concat!("Alignment of ", stringify!(_Nocopy_types))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<_Nocopy_types>()))._M_object
                        as *const _ as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Nocopy_types),
                    "::",
                    stringify!(_M_object)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<_Nocopy_types>()))._M_const_object
                        as *const _ as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Nocopy_types),
                    "::",
                    stringify!(_M_const_object)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<_Nocopy_types>()))
                        ._M_function_pointer as *const _
                        as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Nocopy_types),
                    "::",
                    stringify!(_M_function_pointer)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<_Nocopy_types>()))._M_member_pointer
                        as *const _ as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Nocopy_types),
                    "::",
                    stringify!(_M_member_pointer)
                )
            );
        }
        impl Default for _Nocopy_types {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub union _Any_data {
            pub _M_unused: root::std::_Nocopy_types,
            pub _M_pod_data: [::std::os::raw::c_char; 16usize],
            _bindgen_union_align: [u64; 2usize],
        }
        #[test]
        fn bindgen_test_layout__Any_data() {
            assert_eq!(
                ::std::mem::size_of::<_Any_data>(),
                16usize,
                concat!("Size of: ", stringify!(_Any_data))
            );
            assert_eq!(
                ::std::mem::align_of::<_Any_data>(),
                8usize,
                concat!("Alignment of ", stringify!(_Any_data))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<_Any_data>()))._M_unused as *const _
                        as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Any_data),
                    "::",
                    stringify!(_M_unused)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<_Any_data>()))._M_pod_data
                        as *const _ as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Any_data),
                    "::",
                    stringify!(_M_pod_data)
                )
            );
        }
        impl Default for _Any_data {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub const _Manager_operation___get_type_info:
            root::std::_Manager_operation = 0;
        pub const _Manager_operation___get_functor_ptr:
            root::std::_Manager_operation = 1;
        pub const _Manager_operation___clone_functor:
            root::std::_Manager_operation = 2;
        pub const _Manager_operation___destroy_functor:
            root::std::_Manager_operation = 3;
        pub type _Manager_operation = u32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Simple_type_wrapper<_Tp> {
            pub __value: _Tp,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
        }
        impl<_Tp> Default for _Simple_type_wrapper<_Tp> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct function {
            pub _address: u8,
        }
        #[repr(C)]
        pub struct _Function_base {
            pub _M_functor: root::std::_Any_data,
            pub _M_manager: root::std::_Function_base__Manager_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct _Function_base__Base_manager {
            pub _address: u8,
        }
        pub type _Function_base__Base_manager__Local_storage = u8;
        pub type _Function_base__Manager_type = ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut root::std::_Any_data,
                arg2: *const root::std::_Any_data,
                arg3: root::std::_Manager_operation,
            ) -> bool,
        >;
        pub const _Function_base__M_max_size: root::std::size_t = 16;
        pub const _Function_base__M_max_align: root::std::size_t = 8;
        #[test]
        fn bindgen_test_layout__Function_base() {
            assert_eq!(
                ::std::mem::size_of::<_Function_base>(),
                24usize,
                concat!("Size of: ", stringify!(_Function_base))
            );
            assert_eq!(
                ::std::mem::align_of::<_Function_base>(),
                8usize,
                concat!("Alignment of ", stringify!(_Function_base))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<_Function_base>()))._M_functor
                        as *const _ as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Function_base),
                    "::",
                    stringify!(_M_functor)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<_Function_base>()))._M_manager
                        as *const _ as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Function_base),
                    "::",
                    stringify!(_M_manager)
                )
            );
        }
        impl Default for _Function_base {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct _Function_handler {
            pub _address: u8,
        }
        pub type __check_func_return_type = root::std::__or_;
        pub type _Mem_fn_base__Traits = root::std::_Mem_fn_traits;
        pub type _Mem_fn_base__Arity = root::std::_Mem_fn_base__Traits;
        pub type _Mem_fn_base__Varargs = root::std::_Mem_fn_base__Traits;
        pub type _Mem_fn_base_result_type = root::std::_Mem_fn_base__Traits;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct _Mem_fn {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_bind_expression {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct is_placeholder {
            pub _base: u8,
        }
        pub mod placeholders {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            extern "C" {
                #[link_name = "\u{1}_ZNSt12placeholders2_1E"]
                pub static _1: u8;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt12placeholders2_2E"]
                pub static _2: u8;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt12placeholders2_3E"]
                pub static _3: u8;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt12placeholders2_4E"]
                pub static _4: u8;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt12placeholders2_5E"]
                pub static _5: u8;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt12placeholders2_6E"]
                pub static _6: u8;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt12placeholders2_7E"]
                pub static _7: u8;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt12placeholders2_8E"]
                pub static _8: u8;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt12placeholders2_9E"]
                pub static _9: u8;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt12placeholders3_10E"]
                pub static _10: u8;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt12placeholders3_11E"]
                pub static _11: u8;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt12placeholders3_12E"]
                pub static _12: u8;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt12placeholders3_13E"]
                pub static _13: u8;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt12placeholders3_14E"]
                pub static _14: u8;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt12placeholders3_15E"]
                pub static _15: u8;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt12placeholders3_16E"]
                pub static _16: u8;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt12placeholders3_17E"]
                pub static _17: u8;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt12placeholders3_18E"]
                pub static _18: u8;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt12placeholders3_19E"]
                pub static _19: u8;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt12placeholders3_20E"]
                pub static _20: u8;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt12placeholders3_21E"]
                pub static _21: u8;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt12placeholders3_22E"]
                pub static _22: u8;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt12placeholders3_23E"]
                pub static _23: u8;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt12placeholders3_24E"]
                pub static _24: u8;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt12placeholders3_25E"]
                pub static _25: u8;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt12placeholders3_26E"]
                pub static _26: u8;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt12placeholders3_27E"]
                pub static _27: u8;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt12placeholders3_28E"]
                pub static _28: u8;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt12placeholders3_29E"]
                pub static _29: u8;
            }
        }
        pub type _Safe_tuple_element_t = u8;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct _Bind {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct _Bind_result {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct _Bind_check_arity {
            pub _address: u8,
        }
        pub type __is_socketlike = root::std::__or_;
        pub type _Bind_helper___func_type = root::std::decay;
        pub type _Bind_helper_type = root::std::_Bind;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Bindres_helper {
            pub _address: u8,
        }
        pub type _Bindres_helper___functor_type = root::std::decay;
        pub type _Bindres_helper_type = root::std::_Bind_result;
        impl Default for _Bindres_helper {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct _Not_fn<_Fn> {
            pub _M_fn: _Fn,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Fn>>,
        }
        pub type _Not_fn___inv_res_t = root::std::__invoke_result;
        impl<_Fn> Default for _Not_fn<_Fn> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __is_byte_like {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Deque_iterator {
            pub _M_cur: root::std::_Deque_iterator__Elt_pointer,
            pub _M_first: root::std::_Deque_iterator__Elt_pointer,
            pub _M_last: root::std::_Deque_iterator__Elt_pointer,
            pub _M_node: root::std::_Deque_iterator__Map_pointer,
        }
        pub type _Deque_iterator___ptr_to = root::std::pointer_traits;
        pub type _Deque_iterator___iter = root::std::_Deque_iterator;
        pub type _Deque_iterator_iterator = root::std::_Deque_iterator___iter;
        pub type _Deque_iterator_const_iterator =
            root::std::_Deque_iterator___iter;
        pub type _Deque_iterator__Elt_pointer =
            root::std::_Deque_iterator___ptr_to;
        pub type _Deque_iterator__Map_pointer =
            root::std::_Deque_iterator___ptr_to;
        pub type _Deque_iterator_iterator_category =
            root::std::random_access_iterator_tag;
        pub type _Deque_iterator_value_type<_Tp> = _Tp;
        pub type _Deque_iterator_pointer<_Ptr> = _Ptr;
        pub type _Deque_iterator_reference<_Ref> = _Ref;
        pub type _Deque_iterator_size_type = root::std::size_t;
        pub type _Deque_iterator_difference_type = isize;
        pub type _Deque_iterator__Self = root::std::_Deque_iterator;
        impl Default for _Deque_iterator {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        pub struct _Deque_base {
            pub _M_impl: root::std::_Deque_base__Deque_impl,
        }
        pub type _Deque_base__Tp_alloc_type = [u8; 0usize];
        pub type _Deque_base__Alloc_traits = root::__gnu_cxx::__alloc_traits;
        pub type _Deque_base__Ptr = [u8; 0usize];
        pub type _Deque_base__Ptr_const = [u8; 0usize];
        pub type _Deque_base__Map_alloc_type = [u8; 0usize];
        pub type _Deque_base__Map_alloc_traits =
            root::__gnu_cxx::__alloc_traits;
        pub type _Deque_base_allocator_type<_Alloc> = _Alloc;
        pub type _Deque_base_size_type = [u8; 0usize];
        pub type _Deque_base_iterator = root::std::_Deque_iterator;
        pub type _Deque_base_const_iterator = root::std::_Deque_iterator;
        pub type _Deque_base__Map_pointer = [u8; 0usize];
        #[repr(C)]
        pub struct _Deque_base__Deque_impl {
            pub _M_map: root::std::_Deque_base__Map_pointer,
            pub _M_map_size: root::std::size_t,
            pub _M_start: root::std::_Deque_base_iterator,
            pub _M_finish: root::std::_Deque_base_iterator,
        }
        impl Default for _Deque_base__Deque_impl {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub const _Deque_base__S_initial_map_size:
            root::std::_Deque_base__bindgen_ty_1 = 0;
        pub type _Deque_base__bindgen_ty_1 = i32;
        impl Default for _Deque_base {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        pub struct deque {
            pub _base: root::std::_Deque_base,
        }
        pub type deque__Base = root::std::_Deque_base;
        pub type deque__Tp_alloc_type = root::std::deque__Base;
        pub type deque__Alloc_traits = root::std::deque__Base;
        pub type deque__Map_pointer = root::std::deque__Base;
        pub type deque_value_type<_Tp> = _Tp;
        pub type deque_pointer = root::std::deque__Alloc_traits;
        pub type deque_const_pointer = root::std::deque__Alloc_traits;
        pub type deque_reference = root::std::deque__Alloc_traits;
        pub type deque_const_reference = root::std::deque__Alloc_traits;
        pub type deque_iterator = root::std::deque__Base;
        pub type deque_const_iterator = root::std::deque__Base;
        pub type deque_const_reverse_iterator =
            root::std::reverse_iterator<root::std::deque_const_iterator>;
        pub type deque_reverse_iterator =
            root::std::reverse_iterator<root::std::deque_iterator>;
        pub type deque_size_type = root::std::size_t;
        pub type deque_difference_type = isize;
        pub type deque_allocator_type<_Alloc> = _Alloc;
        impl Default for deque {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct stack<_Sequence> {
            pub c: _Sequence,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Sequence>>,
        }
        pub type stack__Uses = u8;
        pub type stack_value_type = [u8; 0usize];
        pub type stack_reference = [u8; 0usize];
        pub type stack_const_reference = [u8; 0usize];
        pub type stack_size_type = [u8; 0usize];
        pub type stack_container_type<_Sequence> = _Sequence;
        impl<_Sequence> Default for stack<_Sequence> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct codecvt_base {
            pub _address: u8,
        }
        pub const codecvt_base_result_ok: root::std::codecvt_base_result = 0;
        pub const codecvt_base_result_partial: root::std::codecvt_base_result =
            1;
        pub const codecvt_base_result_error: root::std::codecvt_base_result = 2;
        pub const codecvt_base_result_noconv: root::std::codecvt_base_result =
            3;
        pub type codecvt_base_result = u32;
        #[test]
        fn bindgen_test_layout_codecvt_base() {
            assert_eq!(
                ::std::mem::size_of::<codecvt_base>(),
                1usize,
                concat!("Size of: ", stringify!(codecvt_base))
            );
            assert_eq!(
                ::std::mem::align_of::<codecvt_base>(),
                1usize,
                concat!("Alignment of ", stringify!(codecvt_base))
            );
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct __codecvt_abstract_base {
            pub _base: root::std::locale_facet,
        }
        pub use self::super::super::root::std::codecvt_base_result as __codecvt_abstract_base_result;
        pub type __codecvt_abstract_base_intern_type<_InternT> = _InternT;
        pub type __codecvt_abstract_base_extern_type<_ExternT> = _ExternT;
        pub type __codecvt_abstract_base_state_type<_StateT> = _StateT;
        impl Default for __codecvt_abstract_base {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct codecvt {
            pub _base: root::std::__codecvt_abstract_base,
            pub _M_c_locale_codecvt: root::std::__c_locale,
        }
        pub use self::super::super::root::std::codecvt_base_result as codecvt_result;
        pub type codecvt_intern_type<_InternT> = _InternT;
        pub type codecvt_extern_type<_ExternT> = _ExternT;
        pub type codecvt_state_type<_StateT> = _StateT;
        impl Default for codecvt {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[test]
        fn __bindgen_test_layout_codecvt_open0_char_char___mbstate_t_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::codecvt>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::codecvt>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_codecvt_open0_wchar_t_char___mbstate_t_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::codecvt>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::codecvt>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_codecvt_open0_char16_t_char___mbstate_t_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::codecvt>(),
                16usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::codecvt>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_codecvt_open0_char32_t_char___mbstate_t_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::codecvt>(),
                16usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::codecvt>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct codecvt_byname {
            pub _base: root::std::codecvt,
        }
        impl Default for codecvt_byname {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[test]
        fn __bindgen_test_layout_codecvt_byname_open0_char16_t_char___mbstate_t_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::codecvt_byname>(),
                16usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::codecvt_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_codecvt_byname_open0_char32_t_char___mbstate_t_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::codecvt_byname>(),
                16usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::codecvt_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_codecvt_byname_open0_char_char___mbstate_t_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::codecvt_byname>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::codecvt_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_codecvt_byname_open0_wchar_t_char___mbstate_t_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::codecvt_byname>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::codecvt_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
        }
        pub type __c_lock = root::__gthread_mutex_t;
        pub type __c_file = root::FILE;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __basic_file {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout___basic_file_open0_char_close0_instantiation()
        {
            assert_eq!(
                ::std::mem::size_of::<root::std::__basic_file>(),
                16usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__basic_file)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__basic_file>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__basic_file)
                )
            );
        }
        #[repr(C)]
        pub struct basic_filebuf<_CharT> {
            pub _base: root::std::basic_streambuf<_CharT>,
            pub _M_lock: root::std::__c_lock,
            pub _M_file: root::std::basic_filebuf___file_type,
            pub _M_mode: root::std::ios_base_openmode,
            pub _M_state_beg: root::std::basic_filebuf___state_type,
            pub _M_state_cur: root::std::basic_filebuf___state_type,
            pub _M_state_last: root::std::basic_filebuf___state_type,
            pub _M_buf: *mut root::std::basic_filebuf_char_type<_CharT>,
            pub _M_buf_size: root::std::size_t,
            pub _M_buf_allocated: bool,
            pub _M_reading: bool,
            pub _M_writing: bool,
            pub _M_pback: root::std::basic_filebuf_char_type<_CharT>,
            pub _M_pback_cur_save:
                *mut root::std::basic_filebuf_char_type<_CharT>,
            pub _M_pback_end_save:
                *mut root::std::basic_filebuf_char_type<_CharT>,
            pub _M_pback_init: bool,
            pub _M_codecvt: *const root::std::basic_filebuf___codecvt_type,
            pub _M_ext_buf: *mut ::std::os::raw::c_char,
            pub _M_ext_buf_size: root::std::streamsize,
            pub _M_ext_next: *const ::std::os::raw::c_char,
            pub _M_ext_end: *mut ::std::os::raw::c_char,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_filebuf___chk_state = root::std::__and_;
        pub type basic_filebuf_char_type<_CharT> = _CharT;
        pub type basic_filebuf_traits_type<_Traits> = _Traits;
        pub type basic_filebuf_int_type = [u8; 0usize];
        pub type basic_filebuf_pos_type = [u8; 0usize];
        pub type basic_filebuf_off_type = [u8; 0usize];
        pub type basic_filebuf___streambuf_type<_CharT> =
            root::std::basic_streambuf<
                root::std::basic_filebuf_char_type<_CharT>,
            >;
        pub type basic_filebuf___filebuf_type<_CharT> =
            root::std::basic_filebuf<
                root::std::basic_filebuf_char_type<_CharT>,
            >;
        pub type basic_filebuf___file_type = root::std::__basic_file;
        pub type basic_filebuf___state_type = [u8; 0usize];
        pub type basic_filebuf___codecvt_type = root::std::codecvt;
        impl<_CharT> Default for basic_filebuf<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        pub struct basic_ifstream<_CharT> {
            pub _base: root::std::basic_istream<_CharT>,
            pub _M_filebuf: root::std::basic_ifstream___filebuf_type<_CharT>,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_ifstream_char_type<_CharT> = _CharT;
        pub type basic_ifstream_traits_type<_Traits> = _Traits;
        pub type basic_ifstream_int_type = [u8; 0usize];
        pub type basic_ifstream_pos_type = [u8; 0usize];
        pub type basic_ifstream_off_type = [u8; 0usize];
        pub type basic_ifstream___filebuf_type<_CharT> =
            root::std::basic_filebuf<
                root::std::basic_ifstream_char_type<_CharT>,
            >;
        pub type basic_ifstream___istream_type<_CharT> =
            root::std::basic_istream<
                root::std::basic_ifstream_char_type<_CharT>,
            >;
        impl<_CharT> Default for basic_ifstream<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        pub struct basic_ofstream<_CharT> {
            pub _base: root::std::basic_ostream<_CharT>,
            pub _M_filebuf: root::std::basic_ofstream___filebuf_type<_CharT>,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_ofstream_char_type<_CharT> = _CharT;
        pub type basic_ofstream_traits_type<_Traits> = _Traits;
        pub type basic_ofstream_int_type = [u8; 0usize];
        pub type basic_ofstream_pos_type = [u8; 0usize];
        pub type basic_ofstream_off_type = [u8; 0usize];
        pub type basic_ofstream___filebuf_type<_CharT> =
            root::std::basic_filebuf<
                root::std::basic_ofstream_char_type<_CharT>,
            >;
        pub type basic_ofstream___ostream_type<_CharT> =
            root::std::basic_ostream<
                root::std::basic_ofstream_char_type<_CharT>,
            >;
        impl<_CharT> Default for basic_ofstream<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        pub struct basic_fstream<_CharT> {
            pub _base: root::std::basic_iostream<_CharT>,
            pub _M_filebuf: root::std::basic_fstream___filebuf_type<_CharT>,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_fstream_char_type<_CharT> = _CharT;
        pub type basic_fstream_traits_type<_Traits> = _Traits;
        pub type basic_fstream_int_type = [u8; 0usize];
        pub type basic_fstream_pos_type = [u8; 0usize];
        pub type basic_fstream_off_type = [u8; 0usize];
        pub type basic_fstream___filebuf_type<_CharT> =
            root::std::basic_filebuf<
                root::std::basic_fstream_char_type<_CharT>,
            >;
        pub type basic_fstream___ios_type<_CharT> =
            root::std::basic_ios<root::std::basic_fstream_char_type<_CharT>>;
        pub type basic_fstream___iostream_type<_CharT> =
            root::std::basic_iostream<
                root::std::basic_fstream_char_type<_CharT>,
            >;
        impl<_CharT> Default for basic_fstream<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[test]
        fn __bindgen_test_layout_basic_filebuf_open0_char_char_traits_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<
                    root::std::basic_filebuf<::std::os::raw::c_char>,
                >(),
                240usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(
                        root::std::basic_filebuf<::std::os::raw::c_char>
                    )
                )
            );
            assert_eq!(
                ::std::mem::align_of::<
                    root::std::basic_filebuf<::std::os::raw::c_char>,
                >(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(
                        root::std::basic_filebuf<::std::os::raw::c_char>
                    )
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_ifstream_open0_char_char_traits_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<
                    root::std::basic_ifstream<::std::os::raw::c_char>,
                >(),
                520usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(
                        root::std::basic_ifstream<::std::os::raw::c_char>
                    )
                )
            );
            assert_eq!(
                ::std::mem::align_of::<
                    root::std::basic_ifstream<::std::os::raw::c_char>,
                >(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(
                        root::std::basic_ifstream<::std::os::raw::c_char>
                    )
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_ofstream_open0_char_char_traits_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<
                    root::std::basic_ofstream<::std::os::raw::c_char>,
                >(),
                512usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(
                        root::std::basic_ofstream<::std::os::raw::c_char>
                    )
                )
            );
            assert_eq!(
                ::std::mem::align_of::<
                    root::std::basic_ofstream<::std::os::raw::c_char>,
                >(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(
                        root::std::basic_ofstream<::std::os::raw::c_char>
                    )
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_fstream_open0_char_char_traits_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<
                    root::std::basic_fstream<::std::os::raw::c_char>,
                >(),
                528usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(
                        root::std::basic_fstream<::std::os::raw::c_char>
                    )
                )
            );
            assert_eq!(
                ::std::mem::align_of::<
                    root::std::basic_fstream<::std::os::raw::c_char>,
                >(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(
                        root::std::basic_fstream<::std::os::raw::c_char>
                    )
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_filebuf_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::basic_filebuf<u32>>(),
                240usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_filebuf<u32>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::basic_filebuf<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_filebuf<u32>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_ifstream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::basic_ifstream<u32>>(),
                520usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_ifstream<u32>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::basic_ifstream<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_ifstream<u32>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_ofstream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::basic_ofstream<u32>>(),
                512usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_ofstream<u32>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::basic_ofstream<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_ofstream<u32>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_fstream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::basic_fstream<u32>>(),
                528usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_fstream<u32>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::basic_fstream<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_fstream<u32>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_atomic_open0_bool__close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::atomic<bool>>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::atomic<bool>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::atomic<bool>>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::atomic<bool>)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct atomic<_Tp> {
            pub _M_i: _Tp,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
        }
        impl<_Tp> Default for atomic<_Tp> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[test]
        fn __bindgen_test_layout_atomic_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::atomic<::std::os::raw::c_char>>(
                ),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::atomic<::std::os::raw::c_char>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::atomic<::std::os::raw::c_char>>(
                ),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::atomic<::std::os::raw::c_char>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_atomic_open0_signed_char_close0_instantiation()
        {
            assert_eq!(
                ::std::mem::size_of::<root::std::atomic<::std::os::raw::c_schar>>(
                ),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::atomic<::std::os::raw::c_schar>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<
                    root::std::atomic<::std::os::raw::c_schar>,
                >(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::atomic<::std::os::raw::c_schar>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_atomic_open0_unsigned_char_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::atomic<::std::os::raw::c_uchar>>(
                ),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::atomic<::std::os::raw::c_uchar>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<
                    root::std::atomic<::std::os::raw::c_uchar>,
                >(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::atomic<::std::os::raw::c_uchar>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_atomic_open0_short_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::atomic<::std::os::raw::c_short>>(
                ),
                2usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::atomic<::std::os::raw::c_short>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<
                    root::std::atomic<::std::os::raw::c_short>,
                >(),
                2usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::atomic<::std::os::raw::c_short>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_atomic_open0_unsigned_short_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<
                    root::std::atomic<::std::os::raw::c_ushort>,
                >(),
                2usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::atomic<::std::os::raw::c_ushort>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<
                    root::std::atomic<::std::os::raw::c_ushort>,
                >(),
                2usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::atomic<::std::os::raw::c_ushort>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_atomic_open0_int_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::atomic<::std::os::raw::c_int>>(
                ),
                4usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::atomic<::std::os::raw::c_int>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::atomic<::std::os::raw::c_int>>(
                ),
                4usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::atomic<::std::os::raw::c_int>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_atomic_open0_unsigned_int_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::atomic<::std::os::raw::c_uint>>(
                ),
                4usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::atomic<::std::os::raw::c_uint>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::atomic<::std::os::raw::c_uint>>(
                ),
                4usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::atomic<::std::os::raw::c_uint>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_atomic_open0_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::atomic<::std::os::raw::c_long>>(
                ),
                8usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::atomic<::std::os::raw::c_long>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::atomic<::std::os::raw::c_long>>(
                ),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::atomic<::std::os::raw::c_long>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_atomic_open0_unsigned_long_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::atomic<::std::os::raw::c_ulong>>(
                ),
                8usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::atomic<::std::os::raw::c_ulong>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<
                    root::std::atomic<::std::os::raw::c_ulong>,
                >(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::atomic<::std::os::raw::c_ulong>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_atomic_open0_long_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<
                    root::std::atomic<::std::os::raw::c_longlong>,
                >(),
                8usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::atomic<::std::os::raw::c_longlong>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<
                    root::std::atomic<::std::os::raw::c_longlong>,
                >(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::atomic<::std::os::raw::c_longlong>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_atomic_open0_unsigned_long_long_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<
                    root::std::atomic<::std::os::raw::c_ulonglong>,
                >(),
                8usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::atomic<::std::os::raw::c_ulonglong>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<
                    root::std::atomic<::std::os::raw::c_ulonglong>,
                >(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::atomic<::std::os::raw::c_ulonglong>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_atomic_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::atomic<u32>>(),
                4usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::atomic<u32>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::atomic<u32>>(),
                4usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::atomic<u32>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_atomic_open0_char16_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::atomic<u16>>(),
                2usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::atomic<u16>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::atomic<u16>>(),
                2usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::atomic<u16>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_atomic_open0_char32_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::atomic<u32>>(),
                4usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::atomic<u32>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::atomic<u32>>(),
                4usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::atomic<u32>)
                )
            );
        }
        pub type atomic_bool = root::std::atomic<bool>;
        pub type atomic_char = root::std::atomic<::std::os::raw::c_char>;
        pub type atomic_schar = root::std::atomic<::std::os::raw::c_schar>;
        pub type atomic_uchar = root::std::atomic<::std::os::raw::c_uchar>;
        pub type atomic_short = root::std::atomic<::std::os::raw::c_short>;
        pub type atomic_ushort = root::std::atomic<::std::os::raw::c_ushort>;
        pub type atomic_int = root::std::atomic<::std::os::raw::c_int>;
        pub type atomic_uint = root::std::atomic<::std::os::raw::c_uint>;
        pub type atomic_long = root::std::atomic<::std::os::raw::c_long>;
        pub type atomic_ulong = root::std::atomic<::std::os::raw::c_ulong>;
        pub type atomic_llong = root::std::atomic<::std::os::raw::c_longlong>;
        pub type atomic_ullong = root::std::atomic<::std::os::raw::c_ulonglong>;
        pub type atomic_wchar_t = root::std::atomic<u32>;
        pub type atomic_char16_t = root::std::atomic<u16>;
        pub type atomic_char32_t = root::std::atomic<u32>;
        pub type atomic_int8_t = root::std::atomic<i8>;
        pub type atomic_uint8_t = root::std::atomic<u8>;
        pub type atomic_int16_t = root::std::atomic<i16>;
        pub type atomic_uint16_t = root::std::atomic<u16>;
        pub type atomic_int32_t = root::std::atomic<i32>;
        pub type atomic_uint32_t = root::std::atomic<u32>;
        pub type atomic_int64_t = root::std::atomic<i64>;
        pub type atomic_uint64_t = root::std::atomic<u64>;
        pub type atomic_int_least8_t = root::std::atomic<root::int_least8_t>;
        pub type atomic_uint_least8_t = root::std::atomic<root::uint_least8_t>;
        pub type atomic_int_least16_t = root::std::atomic<root::int_least16_t>;
        pub type atomic_uint_least16_t =
            root::std::atomic<root::uint_least16_t>;
        pub type atomic_int_least32_t = root::std::atomic<root::int_least32_t>;
        pub type atomic_uint_least32_t =
            root::std::atomic<root::uint_least32_t>;
        pub type atomic_int_least64_t = root::std::atomic<root::int_least64_t>;
        pub type atomic_uint_least64_t =
            root::std::atomic<root::uint_least64_t>;
        pub type atomic_int_fast8_t = root::std::atomic<root::int_fast8_t>;
        pub type atomic_uint_fast8_t = root::std::atomic<root::uint_fast8_t>;
        pub type atomic_int_fast16_t = root::std::atomic<root::int_fast16_t>;
        pub type atomic_uint_fast16_t = root::std::atomic<root::uint_fast16_t>;
        pub type atomic_int_fast32_t = root::std::atomic<root::int_fast32_t>;
        pub type atomic_uint_fast32_t = root::std::atomic<root::uint_fast32_t>;
        pub type atomic_int_fast64_t = root::std::atomic<root::int_fast64_t>;
        pub type atomic_uint_fast64_t = root::std::atomic<root::uint_fast64_t>;
        pub type atomic_intptr_t = root::std::atomic<isize>;
        pub type atomic_uintptr_t = root::std::atomic<usize>;
        pub type atomic_size_t = root::std::atomic<root::std::size_t>;
        pub type atomic_ptrdiff_t = root::std::atomic<isize>;
        pub type atomic_intmax_t = root::std::atomic<root::intmax_t>;
        pub type atomic_uintmax_t = root::std::atomic<root::uintmax_t>;
        #[test]
        fn __bindgen_test_layout_allocator_open0_void_close0_instantiation_1() {
            assert_eq!(
                ::std::mem::size_of::<root::std::allocator>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::allocator)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::allocator>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::allocator)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_1()
        {
            assert_eq!(
                ::std::mem::size_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_1(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_char_traits_open0_char16_t_close0_instantiation_1(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_char_traits_open0_char32_t_close0_instantiation_1(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_ctype_open0_char_close0_instantiation_1() {
            assert_eq!(
                ::std::mem::size_of::<root::std::ctype>(),
                576usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::ctype)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::ctype>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::ctype)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_ctype_open0_wchar_t_close0_instantiation_1() {
            assert_eq!(
                ::std::mem::size_of::<root::std::ctype>(),
                1344usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::ctype)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::ctype>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::ctype)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_codecvt_open0_char_char___mbstate_t_close0_instantiation_1(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::codecvt>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::codecvt>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_codecvt_open0_wchar_t_char___mbstate_t_close0_instantiation_1(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::codecvt>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::codecvt>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_ctype_byname_open0_char_close0_instantiation_1(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::ctype_byname>(),
                576usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::ctype_byname)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::ctype_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::ctype_byname)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_ctype_byname_open0_wchar_t_close0_instantiation_1(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::ctype_byname>(),
                1344usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::ctype_byname)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::ctype_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::ctype_byname)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_codecvt_byname_open0_char16_t_char___mbstate_t_close0_instantiation_1(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::codecvt_byname>(),
                16usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::codecvt_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_codecvt_byname_open0_char32_t_char___mbstate_t_close0_instantiation_1(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::codecvt_byname>(),
                16usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::codecvt_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
        }
    }
    pub mod __gnu_cxx {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub type __conditional_type___type<_Iftrue> = _Iftrue;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __add_unsigned {
            pub _address: u8,
        }
        pub type __add_unsigned___if_type = u8;
        pub type __add_unsigned___type =
            root::__gnu_cxx::__add_unsigned___if_type;
        #[test]
        fn __bindgen_test_layout___add_unsigned_open0_char_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___add_unsigned_open0_signed_char_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___add_unsigned_open0_short_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___add_unsigned_open0_int_close0_instantiation()
        {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___add_unsigned_open0_long_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___add_unsigned_open0_long_long_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __remove_unsigned {
            pub _address: u8,
        }
        pub type __remove_unsigned___if_type = u8;
        pub type __remove_unsigned___type =
            root::__gnu_cxx::__remove_unsigned___if_type;
        #[test]
        fn __bindgen_test_layout___remove_unsigned_open0_char_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___remove_unsigned_open0_unsigned_char_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___remove_unsigned_open0_unsigned_short_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___remove_unsigned_open0_unsigned_int_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___remove_unsigned_open0_unsigned_long_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___remove_unsigned_open0_unsigned_long_long_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
        }
        pub type __promote___type = f64;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __promote_2 {
            pub _address: u8,
        }
        pub type __promote_2___type<_Tp2> = _Tp2;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __promote_3 {
            pub _address: u8,
        }
        pub type __promote_3___type<_Tp2> = _Tp2;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __promote_4 {
            pub _address: u8,
        }
        pub type __promote_4___type<_Tp2> = _Tp2;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __numeric_traits_integer {
            pub _address: u8,
        }
        extern "C" {
            pub static __is_signed: bool;
        }
        extern "C" {
            pub static __digits: ::std::os::raw::c_int;
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __numeric_traits_floating {
            pub _address: u8,
        }
        extern "C" {
            pub static __max_digits10: ::std::os::raw::c_int;
        }
        extern "C" {
            pub static __digits10: ::std::os::raw::c_int;
        }
        extern "C" {
            pub static __max_exponent10: ::std::os::raw::c_int;
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __numeric_traits {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __normal_iterator<_Iterator> {
            pub _M_current: _Iterator,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
        }
        pub type __normal_iterator___traits_type = root::std::iterator_traits;
        pub type __normal_iterator_iterator_type<_Iterator> = _Iterator;
        pub type __normal_iterator_iterator_category =
            root::__gnu_cxx::__normal_iterator___traits_type;
        pub type __normal_iterator_value_type =
            root::__gnu_cxx::__normal_iterator___traits_type;
        pub type __normal_iterator_difference_type =
            root::__gnu_cxx::__normal_iterator___traits_type;
        pub type __normal_iterator_reference =
            root::__gnu_cxx::__normal_iterator___traits_type;
        pub type __normal_iterator_pointer =
            root::__gnu_cxx::__normal_iterator___traits_type;
        impl<_Iterator> Default for __normal_iterator<_Iterator> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub mod __ops {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone)]
            pub struct _Iter_less_iter {
                pub _address: u8,
            }
            #[test]
            fn bindgen_test_layout__Iter_less_iter() {
                assert_eq!(
                    ::std::mem::size_of::<_Iter_less_iter>(),
                    1usize,
                    concat!("Size of: ", stringify!(_Iter_less_iter))
                );
                assert_eq!(
                    ::std::mem::align_of::<_Iter_less_iter>(),
                    1usize,
                    concat!("Alignment of ", stringify!(_Iter_less_iter))
                );
            }
            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone)]
            pub struct _Iter_less_val {
                pub _address: u8,
            }
            #[test]
            fn bindgen_test_layout__Iter_less_val() {
                assert_eq!(
                    ::std::mem::size_of::<_Iter_less_val>(),
                    1usize,
                    concat!("Size of: ", stringify!(_Iter_less_val))
                );
                assert_eq!(
                    ::std::mem::align_of::<_Iter_less_val>(),
                    1usize,
                    concat!("Alignment of ", stringify!(_Iter_less_val))
                );
            }
            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone)]
            pub struct _Val_less_iter {
                pub _address: u8,
            }
            #[test]
            fn bindgen_test_layout__Val_less_iter() {
                assert_eq!(
                    ::std::mem::size_of::<_Val_less_iter>(),
                    1usize,
                    concat!("Size of: ", stringify!(_Val_less_iter))
                );
                assert_eq!(
                    ::std::mem::align_of::<_Val_less_iter>(),
                    1usize,
                    concat!("Alignment of ", stringify!(_Val_less_iter))
                );
            }
            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone)]
            pub struct _Iter_equal_to_iter {
                pub _address: u8,
            }
            #[test]
            fn bindgen_test_layout__Iter_equal_to_iter() {
                assert_eq!(
                    ::std::mem::size_of::<_Iter_equal_to_iter>(),
                    1usize,
                    concat!("Size of: ", stringify!(_Iter_equal_to_iter))
                );
                assert_eq!(
                    ::std::mem::align_of::<_Iter_equal_to_iter>(),
                    1usize,
                    concat!("Alignment of ", stringify!(_Iter_equal_to_iter))
                );
            }
            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone)]
            pub struct _Iter_equal_to_val {
                pub _address: u8,
            }
            #[test]
            fn bindgen_test_layout__Iter_equal_to_val() {
                assert_eq!(
                    ::std::mem::size_of::<_Iter_equal_to_val>(),
                    1usize,
                    concat!("Size of: ", stringify!(_Iter_equal_to_val))
                );
                assert_eq!(
                    ::std::mem::align_of::<_Iter_equal_to_val>(),
                    1usize,
                    concat!("Alignment of ", stringify!(_Iter_equal_to_val))
                );
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_comp_iter<_Compare> {
                pub _M_comp: _Compare,
                pub _phantom_0: ::std::marker::PhantomData<
                    ::std::cell::UnsafeCell<_Compare>,
                >,
            }
            impl<_Compare> Default for _Iter_comp_iter<_Compare> {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_comp_val<_Compare> {
                pub _M_comp: _Compare,
                pub _phantom_0: ::std::marker::PhantomData<
                    ::std::cell::UnsafeCell<_Compare>,
                >,
            }
            impl<_Compare> Default for _Iter_comp_val<_Compare> {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Val_comp_iter<_Compare> {
                pub _M_comp: _Compare,
                pub _phantom_0: ::std::marker::PhantomData<
                    ::std::cell::UnsafeCell<_Compare>,
                >,
            }
            impl<_Compare> Default for _Val_comp_iter<_Compare> {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_equals_val<_Value> {
                pub _M_value: *mut _Value,
                pub _phantom_0:
                    ::std::marker::PhantomData<::std::cell::UnsafeCell<_Value>>,
            }
            impl<_Value> Default for _Iter_equals_val<_Value> {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_equals_iter<_Iterator1> {
                pub _M_it1: _Iterator1,
                pub _phantom_0: ::std::marker::PhantomData<
                    ::std::cell::UnsafeCell<_Iterator1>,
                >,
            }
            impl<_Iterator1> Default for _Iter_equals_iter<_Iterator1> {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_pred<_Predicate> {
                pub _M_pred: _Predicate,
                pub _phantom_0: ::std::marker::PhantomData<
                    ::std::cell::UnsafeCell<_Predicate>,
                >,
            }
            impl<_Predicate> Default for _Iter_pred<_Predicate> {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_comp_to_val<_Compare, _Value> {
                pub _M_comp: _Compare,
                pub _M_value: *mut _Value,
                pub _phantom_0: ::std::marker::PhantomData<
                    ::std::cell::UnsafeCell<_Compare>,
                >,
                pub _phantom_1:
                    ::std::marker::PhantomData<::std::cell::UnsafeCell<_Value>>,
            }
            impl<_Compare, _Value> Default for _Iter_comp_to_val<_Compare, _Value> {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_comp_to_iter<_Compare, _Iterator1> {
                pub _M_comp: _Compare,
                pub _M_it1: _Iterator1,
                pub _phantom_0: ::std::marker::PhantomData<
                    ::std::cell::UnsafeCell<_Compare>,
                >,
                pub _phantom_1: ::std::marker::PhantomData<
                    ::std::cell::UnsafeCell<_Iterator1>,
                >,
            }
            impl<_Compare, _Iterator1> Default
                for _Iter_comp_to_iter<_Compare, _Iterator1>
            {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_negate<_Predicate> {
                pub _M_pred: _Predicate,
                pub _phantom_0: ::std::marker::PhantomData<
                    ::std::cell::UnsafeCell<_Predicate>,
                >,
            }
            impl<_Predicate> Default for _Iter_negate<_Predicate> {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZN9__gnu_cxx27__verbose_terminate_handlerEv"]
            pub fn __verbose_terminate_handler();
        }
        #[repr(C)]
        #[derive(Debug, Default)]
        pub struct new_allocator {
            pub _address: u8,
        }
        pub type new_allocator_size_type = root::std::size_t;
        pub type new_allocator_difference_type = isize;
        pub type new_allocator_pointer<_Tp> = *mut _Tp;
        pub type new_allocator_const_pointer<_Tp> = *const _Tp;
        pub type new_allocator_reference<_Tp> = *mut _Tp;
        pub type new_allocator_const_reference<_Tp> = *const _Tp;
        pub type new_allocator_value_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct new_allocator_rebind {
            pub _address: u8,
        }
        pub type new_allocator_rebind_other = root::__gnu_cxx::new_allocator;
        pub type new_allocator_propagate_on_container_move_assignment =
            root::std::true_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __alloc_traits {
            pub _address: u8,
        }
        pub type __alloc_traits_allocator_type<_Alloc> = _Alloc;
        pub type __alloc_traits__Base_type = root::std::allocator_traits;
        pub type __alloc_traits_value_type =
            root::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_pointer =
            root::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_const_pointer =
            root::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_size_type =
            root::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_difference_type =
            root::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_reference =
            *mut root::__gnu_cxx::__alloc_traits_value_type;
        pub type __alloc_traits_const_reference =
            *const root::__gnu_cxx::__alloc_traits_value_type;
        pub type __alloc_traits___is_custom_pointer = root::std::__and_;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __alloc_traits_rebind {
            pub _address: u8,
        }
        pub type __alloc_traits_rebind_other =
            root::__gnu_cxx::__alloc_traits__Base_type;
        impl Default for __alloc_traits {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __aligned_membuf {
            pub _M_storage: *mut ::std::os::raw::c_uchar,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __aligned_membuf__Tp2<_Tp> {
            pub _M_t: _Tp,
            pub _phantom_0:
                ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
        }
        impl<_Tp> Default for __aligned_membuf__Tp2<_Tp> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl Default for __aligned_membuf {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct __aligned_buffer {
            pub _M_storage: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct _Char_types {
            pub _address: u8,
        }
        pub type _Char_types_int_type = ::std::os::raw::c_ulong;
        pub type _Char_types_pos_type = root::std::streampos;
        pub type _Char_types_off_type = root::std::streamoff;
        pub type _Char_types_state_type = root::mbstate_t;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone)]
        pub struct char_traits {
            pub _address: u8,
        }
        pub type char_traits_char_type<_CharT> = _CharT;
        pub type char_traits_int_type = root::__gnu_cxx::_Char_types;
        pub type char_traits_pos_type = root::__gnu_cxx::_Char_types;
        pub type char_traits_off_type = root::__gnu_cxx::_Char_types;
        pub type char_traits_state_type = root::__gnu_cxx::_Char_types;
        extern "C" {
            pub fn __uselocale(arg1: root::locale_t) -> root::locale_t;
        }
        pub const _Lock_policy__S_single: root::__gnu_cxx::_Lock_policy = 0;
        pub const _Lock_policy__S_mutex: root::__gnu_cxx::_Lock_policy = 1;
        pub const _Lock_policy__S_atomic: root::__gnu_cxx::_Lock_policy = 2;
        pub type _Lock_policy = u32;
        extern "C" {
            #[link_name = "\u{1}_ZN9__gnu_cxxL21__default_lock_policyE"]
            pub static __default_lock_policy: root::__gnu_cxx::_Lock_policy;
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct __concurrence_lock_error {
            pub _base: root::std::exception,
        }
        #[test]
        fn bindgen_test_layout___concurrence_lock_error() {
            assert_eq!(
                ::std::mem::size_of::<__concurrence_lock_error>(),
                8usize,
                concat!("Size of: ", stringify!(__concurrence_lock_error))
            );
            assert_eq!(
                ::std::mem::align_of::<__concurrence_lock_error>(),
                8usize,
                concat!("Alignment of ", stringify!(__concurrence_lock_error))
            );
        }
        impl Default for __concurrence_lock_error {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct __concurrence_unlock_error {
            pub _base: root::std::exception,
        }
        #[test]
        fn bindgen_test_layout___concurrence_unlock_error() {
            assert_eq!(
                ::std::mem::size_of::<__concurrence_unlock_error>(),
                8usize,
                concat!("Size of: ", stringify!(__concurrence_unlock_error))
            );
            assert_eq!(
                ::std::mem::align_of::<__concurrence_unlock_error>(),
                8usize,
                concat!(
                    "Alignment of ",
                    stringify!(__concurrence_unlock_error)
                )
            );
        }
        impl Default for __concurrence_unlock_error {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct __concurrence_broadcast_error {
            pub _base: root::std::exception,
        }
        #[test]
        fn bindgen_test_layout___concurrence_broadcast_error() {
            assert_eq!(
                ::std::mem::size_of::<__concurrence_broadcast_error>(),
                8usize,
                concat!("Size of: ", stringify!(__concurrence_broadcast_error))
            );
            assert_eq!(
                ::std::mem::align_of::<__concurrence_broadcast_error>(),
                8usize,
                concat!(
                    "Alignment of ",
                    stringify!(__concurrence_broadcast_error)
                )
            );
        }
        impl Default for __concurrence_broadcast_error {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct __concurrence_wait_error {
            pub _base: root::std::exception,
        }
        #[test]
        fn bindgen_test_layout___concurrence_wait_error() {
            assert_eq!(
                ::std::mem::size_of::<__concurrence_wait_error>(),
                8usize,
                concat!("Size of: ", stringify!(__concurrence_wait_error))
            );
            assert_eq!(
                ::std::mem::align_of::<__concurrence_wait_error>(),
                8usize,
                concat!("Alignment of ", stringify!(__concurrence_wait_error))
            );
        }
        impl Default for __concurrence_wait_error {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct __mutex {
            pub _M_mutex: root::__gthread_mutex_t,
        }
        #[test]
        fn bindgen_test_layout___mutex() {
            assert_eq!(
                ::std::mem::size_of::<__mutex>(),
                40usize,
                concat!("Size of: ", stringify!(__mutex))
            );
            assert_eq!(
                ::std::mem::align_of::<__mutex>(),
                8usize,
                concat!("Alignment of ", stringify!(__mutex))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<__mutex>()))._M_mutex as *const _
                        as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__mutex),
                    "::",
                    stringify!(_M_mutex)
                )
            );
        }
        impl Default for __mutex {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct __recursive_mutex {
            pub _M_mutex: root::__gthread_recursive_mutex_t,
        }
        #[test]
        fn bindgen_test_layout___recursive_mutex() {
            assert_eq!(
                ::std::mem::size_of::<__recursive_mutex>(),
                40usize,
                concat!("Size of: ", stringify!(__recursive_mutex))
            );
            assert_eq!(
                ::std::mem::align_of::<__recursive_mutex>(),
                8usize,
                concat!("Alignment of ", stringify!(__recursive_mutex))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<__recursive_mutex>()))._M_mutex
                        as *const _ as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__recursive_mutex),
                    "::",
                    stringify!(_M_mutex)
                )
            );
        }
        impl Default for __recursive_mutex {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct __scoped_lock {
            pub _M_device: *mut root::__gnu_cxx::__scoped_lock___mutex_type,
        }
        pub type __scoped_lock___mutex_type = root::__gnu_cxx::__mutex;
        #[test]
        fn bindgen_test_layout___scoped_lock() {
            assert_eq!(
                ::std::mem::size_of::<__scoped_lock>(),
                8usize,
                concat!("Size of: ", stringify!(__scoped_lock))
            );
            assert_eq!(
                ::std::mem::align_of::<__scoped_lock>(),
                8usize,
                concat!("Alignment of ", stringify!(__scoped_lock))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<__scoped_lock>()))._M_device
                        as *const _ as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__scoped_lock),
                    "::",
                    stringify!(_M_device)
                )
            );
        }
        impl Default for __scoped_lock {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct __cond {
            pub _M_cond: root::__gthread_cond_t,
        }
        #[test]
        fn bindgen_test_layout___cond() {
            assert_eq!(
                ::std::mem::size_of::<__cond>(),
                48usize,
                concat!("Size of: ", stringify!(__cond))
            );
            assert_eq!(
                ::std::mem::align_of::<__cond>(),
                8usize,
                concat!("Alignment of ", stringify!(__cond))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<__cond>()))._M_cond as *const _
                        as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__cond),
                    "::",
                    stringify!(_M_cond)
                )
            );
        }
        impl Default for __cond {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
    }
    pub mod __gnu_debug {
        #[allow(unused_imports)]
        use self::super::super::root;
    }
    pub type size_t = ::std::os::raw::c_ulong;
    #[repr(C)]
    #[repr(align(16))]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct max_align_t {
        pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
        pub __bindgen_padding_0: u64,
        pub __clang_max_align_nonce2: u128,
    }
    #[test]
    fn bindgen_test_layout_max_align_t() {
        assert_eq!(
            ::std::mem::size_of::<max_align_t>(),
            32usize,
            concat!("Size of: ", stringify!(max_align_t))
        );
        assert_eq!(
            ::std::mem::align_of::<max_align_t>(),
            16usize,
            concat!("Alignment of ", stringify!(max_align_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(max_align_t),
                "::",
                stringify!(__clang_max_align_nonce1)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2
                    as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(max_align_t),
                "::",
                stringify!(__clang_max_align_nonce2)
            )
        );
    }
    pub mod __cxxabiv1 {
        #[allow(unused_imports)]
        use self::super::super::root;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __cxa_refcounted_exception {
            _unused: [u8; 0],
        }
        extern "C" {
            pub fn __cxa_allocate_exception(
                arg1: root::size_t,
            ) -> *mut ::std::os::raw::c_void;
        }
        extern "C" {
            pub fn __cxa_free_exception(arg1: *mut ::std::os::raw::c_void);
        }
        extern "C" {
            pub fn __cxa_init_primary_exception(
                object: *mut ::std::os::raw::c_void,
                tinfo: *mut root::std::type_info,
                dest: ::std::option::Option<
                    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
                >,
            ) -> *mut root::__cxxabiv1::__cxa_refcounted_exception;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __class_type_info {
            _unused: [u8; 0],
        }
        #[repr(C)]
        pub struct __forced_unwind__bindgen_vtable(::std::os::raw::c_void);
        #[repr(C)]
        #[derive(Debug)]
        pub struct __forced_unwind {
            pub vtable_: *const __forced_unwind__bindgen_vtable,
        }
        #[test]
        fn bindgen_test_layout___forced_unwind() {
            assert_eq!(
                ::std::mem::size_of::<__forced_unwind>(),
                8usize,
                concat!("Size of: ", stringify!(__forced_unwind))
            );
            assert_eq!(
                ::std::mem::align_of::<__forced_unwind>(),
                8usize,
                concat!("Alignment of ", stringify!(__forced_unwind))
            );
        }
        impl Default for __forced_unwind {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
    }
    pub type _Float32 = f32;
    pub type _Float64 = f64;
    pub type _Float32x = f64;
    pub type _Float64x = u128;
    pub type va_list = root::__builtin_va_list;
    pub type __gnuc_va_list = root::__builtin_va_list;
    pub type wint_t = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __mbstate_t {
        pub __count: ::std::os::raw::c_int,
        pub __value: root::__mbstate_t__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __mbstate_t__bindgen_ty_1 {
        pub __wch: ::std::os::raw::c_uint,
        pub __wchb: [::std::os::raw::c_char; 4usize],
        _bindgen_union_align: u32,
    }
    #[test]
    fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
            4usize,
            concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
            4usize,
            concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t__bindgen_ty_1),
                "::",
                stringify!(__wch)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t__bindgen_ty_1),
                "::",
                stringify!(__wchb)
            )
        );
    }
    impl Default for __mbstate_t__bindgen_ty_1 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[test]
    fn bindgen_test_layout___mbstate_t() {
        assert_eq!(
            ::std::mem::size_of::<__mbstate_t>(),
            8usize,
            concat!("Size of: ", stringify!(__mbstate_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__mbstate_t>(),
            4usize,
            concat!("Alignment of ", stringify!(__mbstate_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t),
                "::",
                stringify!(__count)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _
                    as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t),
                "::",
                stringify!(__value)
            )
        );
    }
    impl Default for __mbstate_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type mbstate_t = root::__mbstate_t;
    pub type __FILE = root::_IO_FILE;
    pub type FILE = root::_IO_FILE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __locale_struct {
        pub __locales: [*mut root::__locale_data; 13usize],
        pub __ctype_b: *const ::std::os::raw::c_ushort,
        pub __ctype_tolower: *const ::std::os::raw::c_int,
        pub __ctype_toupper: *const ::std::os::raw::c_int,
        pub __names: [*const ::std::os::raw::c_char; 13usize],
    }
    #[test]
    fn bindgen_test_layout___locale_struct() {
        assert_eq!(
            ::std::mem::size_of::<__locale_struct>(),
            232usize,
            concat!("Size of: ", stringify!(__locale_struct))
        );
        assert_eq!(
            ::std::mem::align_of::<__locale_struct>(),
            8usize,
            concat!("Alignment of ", stringify!(__locale_struct))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__locale_struct>())).__locales
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__locale_struct),
                "::",
                stringify!(__locales)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__locale_struct>())).__ctype_b
                    as *const _ as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(__locale_struct),
                "::",
                stringify!(__ctype_b)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower
                    as *const _ as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(__locale_struct),
                "::",
                stringify!(__ctype_tolower)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper
                    as *const _ as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(__locale_struct),
                "::",
                stringify!(__ctype_toupper)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__locale_struct>())).__names as *const _
                    as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(__locale_struct),
                "::",
                stringify!(__names)
            )
        );
    }
    impl Default for __locale_struct {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type __locale_t = *mut root::__locale_struct;
    pub type locale_t = root::__locale_t;
    extern "C" {
        pub fn wcscpy(__dest: *mut u32, __src: *const u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcsncpy(
            __dest: *mut u32,
            __src: *const u32,
            __n: root::size_t,
        ) -> *mut u32;
    }
    extern "C" {
        pub fn wcscat(__dest: *mut u32, __src: *const u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcsncat(
            __dest: *mut u32,
            __src: *const u32,
            __n: root::size_t,
        ) -> *mut u32;
    }
    extern "C" {
        pub fn wcscmp(
            __s1: *const u32,
            __s2: *const u32,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcsncmp(
            __s1: *const u32,
            __s2: *const u32,
            __n: root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcscasecmp(
            __s1: *const u32,
            __s2: *const u32,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcsncasecmp(
            __s1: *const u32,
            __s2: *const u32,
            __n: root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcscasecmp_l(
            __s1: *const u32,
            __s2: *const u32,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcsncasecmp_l(
            __s1: *const u32,
            __s2: *const u32,
            __n: root::size_t,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcscoll(
            __s1: *const u32,
            __s2: *const u32,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcsxfrm(
            __s1: *mut u32,
            __s2: *const u32,
            __n: root::size_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn wcscoll_l(
            __s1: *const u32,
            __s2: *const u32,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcsxfrm_l(
            __s1: *mut u32,
            __s2: *const u32,
            __n: root::size_t,
            __loc: root::locale_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn wcsdup(__s: *const u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcschr(__wcs: *const u32, __wc: u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcsrchr(__wcs: *const u32, __wc: u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcschrnul(__s: *const u32, __wc: u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcscspn(__wcs: *const u32, __reject: *const u32)
            -> root::size_t;
    }
    extern "C" {
        pub fn wcsspn(__wcs: *const u32, __accept: *const u32) -> root::size_t;
    }
    extern "C" {
        pub fn wcspbrk(__wcs: *const u32, __accept: *const u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcsstr(__haystack: *const u32, __needle: *const u32)
            -> *mut u32;
    }
    extern "C" {
        pub fn wcstok(
            __s: *mut u32,
            __delim: *const u32,
            __ptr: *mut *mut u32,
        ) -> *mut u32;
    }
    extern "C" {
        pub fn wcslen(__s: *const u32) -> root::size_t;
    }
    extern "C" {
        pub fn wcswcs(__haystack: *const u32, __needle: *const u32)
            -> *mut u32;
    }
    extern "C" {
        pub fn wcsnlen(__s: *const u32, __maxlen: root::size_t)
            -> root::size_t;
    }
    extern "C" {
        pub fn wmemchr(
            __s: *const u32,
            __c: u32,
            __n: root::size_t,
        ) -> *mut u32;
    }
    extern "C" {
        pub fn wmemcmp(
            __s1: *const u32,
            __s2: *const u32,
            __n: root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wmemcpy(
            __s1: *mut u32,
            __s2: *const u32,
            __n: root::size_t,
        ) -> *mut u32;
    }
    extern "C" {
        pub fn wmemmove(
            __s1: *mut u32,
            __s2: *const u32,
            __n: root::size_t,
        ) -> *mut u32;
    }
    extern "C" {
        pub fn wmemset(__s: *mut u32, __c: u32, __n: root::size_t) -> *mut u32;
    }
    extern "C" {
        pub fn wmempcpy(
            __s1: *mut u32,
            __s2: *const u32,
            __n: root::size_t,
        ) -> *mut u32;
    }
    extern "C" {
        pub fn btowc(__c: ::std::os::raw::c_int) -> root::wint_t;
    }
    extern "C" {
        pub fn wctob(__c: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mbsinit(__ps: *const root::mbstate_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mbrtowc(
            __pwc: *mut u32,
            __s: *const ::std::os::raw::c_char,
            __n: root::size_t,
            __p: *mut root::mbstate_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn wcrtomb(
            __s: *mut ::std::os::raw::c_char,
            __wc: u32,
            __ps: *mut root::mbstate_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn __mbrlen(
            __s: *const ::std::os::raw::c_char,
            __n: root::size_t,
            __ps: *mut root::mbstate_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn mbrlen(
            __s: *const ::std::os::raw::c_char,
            __n: root::size_t,
            __ps: *mut root::mbstate_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn mbsrtowcs(
            __dst: *mut u32,
            __src: *mut *const ::std::os::raw::c_char,
            __len: root::size_t,
            __ps: *mut root::mbstate_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn wcsrtombs(
            __dst: *mut ::std::os::raw::c_char,
            __src: *mut *const u32,
            __len: root::size_t,
            __ps: *mut root::mbstate_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn mbsnrtowcs(
            __dst: *mut u32,
            __src: *mut *const ::std::os::raw::c_char,
            __nmc: root::size_t,
            __len: root::size_t,
            __ps: *mut root::mbstate_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn wcsnrtombs(
            __dst: *mut ::std::os::raw::c_char,
            __src: *mut *const u32,
            __nwc: root::size_t,
            __len: root::size_t,
            __ps: *mut root::mbstate_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn wcwidth(__c: u32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcswidth(
            __s: *const u32,
            __n: root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcstod(__nptr: *const u32, __endptr: *mut *mut u32) -> f64;
    }
    extern "C" {
        pub fn wcstof(__nptr: *const u32, __endptr: *mut *mut u32) -> f32;
    }
    extern "C" {
        pub fn wcstold(__nptr: *const u32, __endptr: *mut *mut u32) -> u128;
    }
    extern "C" {
        pub fn wcstof32(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
        ) -> root::_Float32;
    }
    extern "C" {
        pub fn wcstof64(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
        ) -> root::_Float64;
    }
    extern "C" {
        pub fn wcstof32x(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
        ) -> root::_Float32x;
    }
    extern "C" {
        pub fn wcstof64x(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
        ) -> root::_Float64x;
    }
    extern "C" {
        pub fn wcstol(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn wcstoul(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn wcstoll(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn wcstoull(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn wcstoq(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn wcstouq(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn wcstol_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::std::os::raw::c_int,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn wcstoul_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::std::os::raw::c_int,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn wcstoll_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::std::os::raw::c_int,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn wcstoull_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::std::os::raw::c_int,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn wcstod_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __loc: root::locale_t,
        ) -> f64;
    }
    extern "C" {
        pub fn wcstof_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __loc: root::locale_t,
        ) -> f32;
    }
    extern "C" {
        pub fn wcstold_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __loc: root::locale_t,
        ) -> u128;
    }
    extern "C" {
        pub fn wcstof32_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __loc: root::locale_t,
        ) -> root::_Float32;
    }
    extern "C" {
        pub fn wcstof64_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __loc: root::locale_t,
        ) -> root::_Float64;
    }
    extern "C" {
        pub fn wcstof32x_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __loc: root::locale_t,
        ) -> root::_Float32x;
    }
    extern "C" {
        pub fn wcstof64x_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __loc: root::locale_t,
        ) -> root::_Float64x;
    }
    extern "C" {
        pub fn wcpcpy(__dest: *mut u32, __src: *const u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcpncpy(
            __dest: *mut u32,
            __src: *const u32,
            __n: root::size_t,
        ) -> *mut u32;
    }
    extern "C" {
        pub fn open_wmemstream(
            __bufloc: *mut *mut u32,
            __sizeloc: *mut root::size_t,
        ) -> *mut root::__FILE;
    }
    extern "C" {
        pub fn fwide(
            __fp: *mut root::__FILE,
            __mode: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fwprintf(
            __stream: *mut root::__FILE,
            __format: *const u32,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wprintf(__format: *const u32, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn swprintf(
            __s: *mut u32,
            __n: root::size_t,
            __format: *const u32,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vfwprintf(
            __s: *mut root::__FILE,
            __format: *const u32,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vwprintf(
            __format: *const u32,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vswprintf(
            __s: *mut u32,
            __n: root::size_t,
            __format: *const u32,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fwscanf(
            __stream: *mut root::__FILE,
            __format: *const u32,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wscanf(__format: *const u32, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn swscanf(
            __s: *const u32,
            __format: *const u32,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vfwscanf(
            __s: *mut root::__FILE,
            __format: *const u32,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vwscanf(
            __format: *const u32,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vswscanf(
            __s: *const u32,
            __format: *const u32,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fgetwc(__stream: *mut root::__FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn getwc(__stream: *mut root::__FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn getwchar() -> root::wint_t;
    }
    extern "C" {
        pub fn fputwc(__wc: u32, __stream: *mut root::__FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn putwc(__wc: u32, __stream: *mut root::__FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn putwchar(__wc: u32) -> root::wint_t;
    }
    extern "C" {
        pub fn fgetws(
            __ws: *mut u32,
            __n: ::std::os::raw::c_int,
            __stream: *mut root::__FILE,
        ) -> *mut u32;
    }
    extern "C" {
        pub fn fputws(
            __ws: *const u32,
            __stream: *mut root::__FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ungetwc(
            __wc: root::wint_t,
            __stream: *mut root::__FILE,
        ) -> root::wint_t;
    }
    extern "C" {
        pub fn getwc_unlocked(__stream: *mut root::__FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn getwchar_unlocked() -> root::wint_t;
    }
    extern "C" {
        pub fn fgetwc_unlocked(__stream: *mut root::__FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn fputwc_unlocked(
            __wc: u32,
            __stream: *mut root::__FILE,
        ) -> root::wint_t;
    }
    extern "C" {
        pub fn putwc_unlocked(
            __wc: u32,
            __stream: *mut root::__FILE,
        ) -> root::wint_t;
    }
    extern "C" {
        pub fn putwchar_unlocked(__wc: u32) -> root::wint_t;
    }
    extern "C" {
        pub fn fgetws_unlocked(
            __ws: *mut u32,
            __n: ::std::os::raw::c_int,
            __stream: *mut root::__FILE,
        ) -> *mut u32;
    }
    extern "C" {
        pub fn fputws_unlocked(
            __ws: *const u32,
            __stream: *mut root::__FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcsftime(
            __s: *mut u32,
            __maxsize: root::size_t,
            __format: *const u32,
            __tp: *const root::tm,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn wcsftime_l(
            __s: *mut u32,
            __maxsize: root::size_t,
            __format: *const u32,
            __tp: *const root::tm,
            __loc: root::locale_t,
        ) -> root::size_t;
    }
    pub type __u_char = ::std::os::raw::c_uchar;
    pub type __u_short = ::std::os::raw::c_ushort;
    pub type __u_int = ::std::os::raw::c_uint;
    pub type __u_long = ::std::os::raw::c_ulong;
    pub type __int8_t = ::std::os::raw::c_schar;
    pub type __uint8_t = ::std::os::raw::c_uchar;
    pub type __int16_t = ::std::os::raw::c_short;
    pub type __uint16_t = ::std::os::raw::c_ushort;
    pub type __int32_t = ::std::os::raw::c_int;
    pub type __uint32_t = ::std::os::raw::c_uint;
    pub type __int64_t = ::std::os::raw::c_long;
    pub type __uint64_t = ::std::os::raw::c_ulong;
    pub type __quad_t = ::std::os::raw::c_long;
    pub type __u_quad_t = ::std::os::raw::c_ulong;
    pub type __intmax_t = ::std::os::raw::c_long;
    pub type __uintmax_t = ::std::os::raw::c_ulong;
    pub type __dev_t = ::std::os::raw::c_ulong;
    pub type __uid_t = ::std::os::raw::c_uint;
    pub type __gid_t = ::std::os::raw::c_uint;
    pub type __ino_t = ::std::os::raw::c_ulong;
    pub type __ino64_t = ::std::os::raw::c_ulong;
    pub type __mode_t = ::std::os::raw::c_uint;
    pub type __nlink_t = ::std::os::raw::c_ulong;
    pub type __off_t = ::std::os::raw::c_long;
    pub type __off64_t = ::std::os::raw::c_long;
    pub type __pid_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct __fsid_t {
        pub __val: [::std::os::raw::c_int; 2usize],
    }
    #[test]
    fn bindgen_test_layout___fsid_t() {
        assert_eq!(
            ::std::mem::size_of::<__fsid_t>(),
            8usize,
            concat!("Size of: ", stringify!(__fsid_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__fsid_t>(),
            4usize,
            concat!("Alignment of ", stringify!(__fsid_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__fsid_t),
                "::",
                stringify!(__val)
            )
        );
    }
    pub type __clock_t = ::std::os::raw::c_long;
    pub type __rlim_t = ::std::os::raw::c_ulong;
    pub type __rlim64_t = ::std::os::raw::c_ulong;
    pub type __id_t = ::std::os::raw::c_uint;
    pub type __time_t = ::std::os::raw::c_long;
    pub type __useconds_t = ::std::os::raw::c_uint;
    pub type __suseconds_t = ::std::os::raw::c_long;
    pub type __daddr_t = ::std::os::raw::c_int;
    pub type __key_t = ::std::os::raw::c_int;
    pub type __clockid_t = ::std::os::raw::c_int;
    pub type __timer_t = *mut ::std::os::raw::c_void;
    pub type __blksize_t = ::std::os::raw::c_long;
    pub type __blkcnt_t = ::std::os::raw::c_long;
    pub type __blkcnt64_t = ::std::os::raw::c_long;
    pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
    pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
    pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
    pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
    pub type __fsword_t = ::std::os::raw::c_long;
    pub type __ssize_t = ::std::os::raw::c_long;
    pub type __syscall_slong_t = ::std::os::raw::c_long;
    pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
    pub type __loff_t = root::__off64_t;
    pub type __caddr_t = *mut ::std::os::raw::c_char;
    pub type __intptr_t = ::std::os::raw::c_long;
    pub type __socklen_t = ::std::os::raw::c_uint;
    pub type __sig_atomic_t = ::std::os::raw::c_int;
    pub type int_least8_t = ::std::os::raw::c_schar;
    pub type int_least16_t = ::std::os::raw::c_short;
    pub type int_least32_t = ::std::os::raw::c_int;
    pub type int_least64_t = ::std::os::raw::c_long;
    pub type uint_least8_t = ::std::os::raw::c_uchar;
    pub type uint_least16_t = ::std::os::raw::c_ushort;
    pub type uint_least32_t = ::std::os::raw::c_uint;
    pub type uint_least64_t = ::std::os::raw::c_ulong;
    pub type int_fast8_t = ::std::os::raw::c_schar;
    pub type int_fast16_t = ::std::os::raw::c_long;
    pub type int_fast32_t = ::std::os::raw::c_long;
    pub type int_fast64_t = ::std::os::raw::c_long;
    pub type uint_fast8_t = ::std::os::raw::c_uchar;
    pub type uint_fast16_t = ::std::os::raw::c_ulong;
    pub type uint_fast32_t = ::std::os::raw::c_ulong;
    pub type uint_fast64_t = ::std::os::raw::c_ulong;
    pub type intmax_t = root::__intmax_t;
    pub type uintmax_t = root::__uintmax_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lconv {
        pub decimal_point: *mut ::std::os::raw::c_char,
        pub thousands_sep: *mut ::std::os::raw::c_char,
        pub grouping: *mut ::std::os::raw::c_char,
        pub int_curr_symbol: *mut ::std::os::raw::c_char,
        pub currency_symbol: *mut ::std::os::raw::c_char,
        pub mon_decimal_point: *mut ::std::os::raw::c_char,
        pub mon_thousands_sep: *mut ::std::os::raw::c_char,
        pub mon_grouping: *mut ::std::os::raw::c_char,
        pub positive_sign: *mut ::std::os::raw::c_char,
        pub negative_sign: *mut ::std::os::raw::c_char,
        pub int_frac_digits: ::std::os::raw::c_char,
        pub frac_digits: ::std::os::raw::c_char,
        pub p_cs_precedes: ::std::os::raw::c_char,
        pub p_sep_by_space: ::std::os::raw::c_char,
        pub n_cs_precedes: ::std::os::raw::c_char,
        pub n_sep_by_space: ::std::os::raw::c_char,
        pub p_sign_posn: ::std::os::raw::c_char,
        pub n_sign_posn: ::std::os::raw::c_char,
        pub int_p_cs_precedes: ::std::os::raw::c_char,
        pub int_p_sep_by_space: ::std::os::raw::c_char,
        pub int_n_cs_precedes: ::std::os::raw::c_char,
        pub int_n_sep_by_space: ::std::os::raw::c_char,
        pub int_p_sign_posn: ::std::os::raw::c_char,
        pub int_n_sign_posn: ::std::os::raw::c_char,
    }
    #[test]
    fn bindgen_test_layout_lconv() {
        assert_eq!(
            ::std::mem::size_of::<lconv>(),
            96usize,
            concat!("Size of: ", stringify!(lconv))
        );
        assert_eq!(
            ::std::mem::align_of::<lconv>(),
            8usize,
            concat!("Alignment of ", stringify!(lconv))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<lconv>())).decimal_point as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(decimal_point)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<lconv>())).thousands_sep as *const _
                    as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(thousands_sep)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<lconv>())).grouping as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(grouping)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<lconv>())).int_curr_symbol as *const _
                    as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(int_curr_symbol)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<lconv>())).currency_symbol as *const _
                    as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(currency_symbol)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<lconv>())).mon_decimal_point as *const _
                    as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(mon_decimal_point)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<lconv>())).mon_thousands_sep as *const _
                    as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(mon_thousands_sep)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<lconv>())).mon_grouping as *const _
                    as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(mon_grouping)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<lconv>())).positive_sign as *const _
                    as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(positive_sign)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<lconv>())).negative_sign as *const _
                    as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(negative_sign)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<lconv>())).int_frac_digits as *const _
                    as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(int_frac_digits)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<lconv>())).frac_digits as *const _
                    as usize
            },
            81usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(frac_digits)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<lconv>())).p_cs_precedes as *const _
                    as usize
            },
            82usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(p_cs_precedes)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<lconv>())).p_sep_by_space as *const _
                    as usize
            },
            83usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(p_sep_by_space)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<lconv>())).n_cs_precedes as *const _
                    as usize
            },
            84usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(n_cs_precedes)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<lconv>())).n_sep_by_space as *const _
                    as usize
            },
            85usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(n_sep_by_space)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<lconv>())).p_sign_posn as *const _
                    as usize
            },
            86usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(p_sign_posn)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<lconv>())).n_sign_posn as *const _
                    as usize
            },
            87usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(n_sign_posn)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<lconv>())).int_p_cs_precedes as *const _
                    as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(int_p_cs_precedes)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<lconv>())).int_p_sep_by_space as *const _
                    as usize
            },
            89usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(int_p_sep_by_space)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<lconv>())).int_n_cs_precedes as *const _
                    as usize
            },
            90usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(int_n_cs_precedes)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<lconv>())).int_n_sep_by_space as *const _
                    as usize
            },
            91usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(int_n_sep_by_space)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<lconv>())).int_p_sign_posn as *const _
                    as usize
            },
            92usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(int_p_sign_posn)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<lconv>())).int_n_sign_posn as *const _
                    as usize
            },
            93usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(int_n_sign_posn)
            )
        );
    }
    impl Default for lconv {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        pub fn setlocale(
            __category: ::std::os::raw::c_int,
            __locale: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn localeconv() -> *mut root::lconv;
    }
    extern "C" {
        pub fn newlocale(
            __category_mask: ::std::os::raw::c_int,
            __locale: *const ::std::os::raw::c_char,
            __base: root::locale_t,
        ) -> root::locale_t;
    }
    extern "C" {
        pub fn duplocale(__dataset: root::locale_t) -> root::locale_t;
    }
    extern "C" {
        pub fn freelocale(__dataset: root::locale_t);
    }
    extern "C" {
        pub fn uselocale(__dataset: root::locale_t) -> root::locale_t;
    }
    pub const _ISupper: root::_bindgen_ty_32 = 256;
    pub const _ISlower: root::_bindgen_ty_32 = 512;
    pub const _ISalpha: root::_bindgen_ty_32 = 1024;
    pub const _ISdigit: root::_bindgen_ty_32 = 2048;
    pub const _ISxdigit: root::_bindgen_ty_32 = 4096;
    pub const _ISspace: root::_bindgen_ty_32 = 8192;
    pub const _ISprint: root::_bindgen_ty_32 = 16384;
    pub const _ISgraph: root::_bindgen_ty_32 = 32768;
    pub const _ISblank: root::_bindgen_ty_32 = 1;
    pub const _IScntrl: root::_bindgen_ty_32 = 2;
    pub const _ISpunct: root::_bindgen_ty_32 = 4;
    pub const _ISalnum: root::_bindgen_ty_32 = 8;
    pub type _bindgen_ty_32 = u32;
    extern "C" {
        pub fn __ctype_b_loc() -> *mut *const ::std::os::raw::c_ushort;
    }
    extern "C" {
        pub fn __ctype_tolower_loc() -> *mut *const root::__int32_t;
    }
    extern "C" {
        pub fn __ctype_toupper_loc() -> *mut *const root::__int32_t;
    }
    extern "C" {
        pub fn isalnum(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isalpha(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iscntrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn islower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isgraph(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isprint(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ispunct(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isspace(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isxdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn tolower(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn toupper(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isblank(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isctype(
            __c: ::std::os::raw::c_int,
            __mask: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn toascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _toupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _tolower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isalnum_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isalpha_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iscntrl_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isdigit_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn islower_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isgraph_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isprint_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ispunct_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isspace_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isupper_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isxdigit_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isblank_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __tolower_l(
            __c: ::std::os::raw::c_int,
            __l: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn tolower_l(
            __c: ::std::os::raw::c_int,
            __l: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __toupper_l(
            __c: ::std::os::raw::c_int,
            __l: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn toupper_l(
            __c: ::std::os::raw::c_int,
            __l: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    pub type time_t = root::__time_t;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct timespec {
        pub tv_sec: root::__time_t,
        pub tv_nsec: root::__syscall_slong_t,
    }
    #[test]
    fn bindgen_test_layout_timespec() {
        assert_eq!(
            ::std::mem::size_of::<timespec>(),
            16usize,
            concat!("Size of: ", stringify!(timespec))
        );
        assert_eq!(
            ::std::mem::align_of::<timespec>(),
            8usize,
            concat!("Alignment of ", stringify!(timespec))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(timespec),
                "::",
                stringify!(tv_sec)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _
                    as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(timespec),
                "::",
                stringify!(tv_nsec)
            )
        );
    }
    pub type pid_t = root::__pid_t;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct sched_param {
        pub sched_priority: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_sched_param() {
        assert_eq!(
            ::std::mem::size_of::<sched_param>(),
            4usize,
            concat!("Size of: ", stringify!(sched_param))
        );
        assert_eq!(
            ::std::mem::align_of::<sched_param>(),
            4usize,
            concat!("Alignment of ", stringify!(sched_param))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<sched_param>())).sched_priority
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sched_param),
                "::",
                stringify!(sched_priority)
            )
        );
    }
    extern "C" {
        pub fn clone(
            __fn: ::std::option::Option<
                unsafe extern "C" fn(
                    __arg: *mut ::std::os::raw::c_void,
                ) -> ::std::os::raw::c_int,
            >,
            __child_stack: *mut ::std::os::raw::c_void,
            __flags: ::std::os::raw::c_int,
            __arg: *mut ::std::os::raw::c_void,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn unshare(__flags: ::std::os::raw::c_int)
            -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_getcpu() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setns(
            __fd: ::std::os::raw::c_int,
            __nstype: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    pub type __cpu_mask = ::std::os::raw::c_ulong;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct cpu_set_t {
        pub __bits: [root::__cpu_mask; 16usize],
    }
    #[test]
    fn bindgen_test_layout_cpu_set_t() {
        assert_eq!(
            ::std::mem::size_of::<cpu_set_t>(),
            128usize,
            concat!("Size of: ", stringify!(cpu_set_t))
        );
        assert_eq!(
            ::std::mem::align_of::<cpu_set_t>(),
            8usize,
            concat!("Alignment of ", stringify!(cpu_set_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<cpu_set_t>())).__bits as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cpu_set_t),
                "::",
                stringify!(__bits)
            )
        );
    }
    extern "C" {
        pub fn __sched_cpucount(
            __setsize: root::size_t,
            __setp: *const root::cpu_set_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __sched_cpualloc(__count: root::size_t) -> *mut root::cpu_set_t;
    }
    extern "C" {
        pub fn __sched_cpufree(__set: *mut root::cpu_set_t);
    }
    extern "C" {
        pub fn sched_setparam(
            __pid: root::__pid_t,
            __param: *const root::sched_param,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_getparam(
            __pid: root::__pid_t,
            __param: *mut root::sched_param,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_setscheduler(
            __pid: root::__pid_t,
            __policy: ::std::os::raw::c_int,
            __param: *const root::sched_param,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_getscheduler(
            __pid: root::__pid_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_yield() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_get_priority_max(
            __algorithm: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_get_priority_min(
            __algorithm: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_rr_get_interval(
            __pid: root::__pid_t,
            __t: *mut root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_setaffinity(
            __pid: root::__pid_t,
            __cpusetsize: root::size_t,
            __cpuset: *const root::cpu_set_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_getaffinity(
            __pid: root::__pid_t,
            __cpusetsize: root::size_t,
            __cpuset: *mut root::cpu_set_t,
        ) -> ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct timeval {
        pub tv_sec: root::__time_t,
        pub tv_usec: root::__suseconds_t,
    }
    #[test]
    fn bindgen_test_layout_timeval() {
        assert_eq!(
            ::std::mem::size_of::<timeval>(),
            16usize,
            concat!("Size of: ", stringify!(timeval))
        );
        assert_eq!(
            ::std::mem::align_of::<timeval>(),
            8usize,
            concat!("Alignment of ", stringify!(timeval))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(timeval),
                "::",
                stringify!(tv_sec)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(timeval),
                "::",
                stringify!(tv_usec)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct timex {
        pub modes: ::std::os::raw::c_uint,
        pub offset: root::__syscall_slong_t,
        pub freq: root::__syscall_slong_t,
        pub maxerror: root::__syscall_slong_t,
        pub esterror: root::__syscall_slong_t,
        pub status: ::std::os::raw::c_int,
        pub constant: root::__syscall_slong_t,
        pub precision: root::__syscall_slong_t,
        pub tolerance: root::__syscall_slong_t,
        pub time: root::timeval,
        pub tick: root::__syscall_slong_t,
        pub ppsfreq: root::__syscall_slong_t,
        pub jitter: root::__syscall_slong_t,
        pub shift: ::std::os::raw::c_int,
        pub stabil: root::__syscall_slong_t,
        pub jitcnt: root::__syscall_slong_t,
        pub calcnt: root::__syscall_slong_t,
        pub errcnt: root::__syscall_slong_t,
        pub stbcnt: root::__syscall_slong_t,
        pub tai: ::std::os::raw::c_int,
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 44usize], u8>,
    }
    #[test]
    fn bindgen_test_layout_timex() {
        assert_eq!(
            ::std::mem::size_of::<timex>(),
            208usize,
            concat!("Size of: ", stringify!(timex))
        );
        assert_eq!(
            ::std::mem::align_of::<timex>(),
            8usize,
            concat!("Alignment of ", stringify!(timex))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<timex>())).modes as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(modes)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<timex>())).offset as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(offset)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<timex>())).freq as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(freq)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<timex>())).maxerror as *const _ as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(maxerror)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<timex>())).esterror as *const _ as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(esterror)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<timex>())).status as *const _ as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(status)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<timex>())).constant as *const _ as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(constant)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<timex>())).precision as *const _ as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(precision)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<timex>())).tolerance as *const _ as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(tolerance)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<timex>())).time as *const _ as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(time)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<timex>())).tick as *const _ as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(tick)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<timex>())).ppsfreq as *const _ as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(ppsfreq)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<timex>())).jitter as *const _ as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(jitter)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<timex>())).shift as *const _ as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(shift)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<timex>())).stabil as *const _ as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(stabil)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<timex>())).jitcnt as *const _ as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(jitcnt)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<timex>())).calcnt as *const _ as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(calcnt)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<timex>())).errcnt as *const _ as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(errcnt)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<timex>())).stbcnt as *const _ as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(stbcnt)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<timex>())).tai as *const _ as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(tai)
            )
        );
    }
    impl Default for timex {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        pub fn clock_adjtime(
            __clock_id: root::__clockid_t,
            __utx: *mut root::timex,
        ) -> ::std::os::raw::c_int;
    }
    pub type clock_t = root::__clock_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tm {
        pub tm_sec: ::std::os::raw::c_int,
        pub tm_min: ::std::os::raw::c_int,
        pub tm_hour: ::std::os::raw::c_int,
        pub tm_mday: ::std::os::raw::c_int,
        pub tm_mon: ::std::os::raw::c_int,
        pub tm_year: ::std::os::raw::c_int,
        pub tm_wday: ::std::os::raw::c_int,
        pub tm_yday: ::std::os::raw::c_int,
        pub tm_isdst: ::std::os::raw::c_int,
        pub tm_gmtoff: ::std::os::raw::c_long,
        pub tm_zone: *const ::std::os::raw::c_char,
    }
    #[test]
    fn bindgen_test_layout_tm() {
        assert_eq!(
            ::std::mem::size_of::<tm>(),
            56usize,
            concat!("Size of: ", stringify!(tm))
        );
        assert_eq!(
            ::std::mem::align_of::<tm>(),
            8usize,
            concat!("Alignment of ", stringify!(tm))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_sec)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_min)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_hour)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_mday)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_mon)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_year)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_wday)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_yday)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_isdst)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_gmtoff)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_zone)
            )
        );
    }
    impl Default for tm {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type clockid_t = root::__clockid_t;
    pub type timer_t = root::__timer_t;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct itimerspec {
        pub it_interval: root::timespec,
        pub it_value: root::timespec,
    }
    #[test]
    fn bindgen_test_layout_itimerspec() {
        assert_eq!(
            ::std::mem::size_of::<itimerspec>(),
            32usize,
            concat!("Size of: ", stringify!(itimerspec))
        );
        assert_eq!(
            ::std::mem::align_of::<itimerspec>(),
            8usize,
            concat!("Alignment of ", stringify!(itimerspec))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<itimerspec>())).it_interval as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(itimerspec),
                "::",
                stringify!(it_interval)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<itimerspec>())).it_value as *const _
                    as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(itimerspec),
                "::",
                stringify!(it_value)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct sigevent {
        _unused: [u8; 0],
    }
    extern "C" {
        pub fn clock() -> root::clock_t;
    }
    extern "C" {
        pub fn time(__timer: *mut root::time_t) -> root::time_t;
    }
    extern "C" {
        pub fn difftime(__time1: root::time_t, __time0: root::time_t) -> f64;
    }
    extern "C" {
        pub fn mktime(__tp: *mut root::tm) -> root::time_t;
    }
    extern "C" {
        pub fn strftime(
            __s: *mut ::std::os::raw::c_char,
            __maxsize: root::size_t,
            __format: *const ::std::os::raw::c_char,
            __tp: *const root::tm,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn strptime(
            __s: *const ::std::os::raw::c_char,
            __fmt: *const ::std::os::raw::c_char,
            __tp: *mut root::tm,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strftime_l(
            __s: *mut ::std::os::raw::c_char,
            __maxsize: root::size_t,
            __format: *const ::std::os::raw::c_char,
            __tp: *const root::tm,
            __loc: root::locale_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn strptime_l(
            __s: *const ::std::os::raw::c_char,
            __fmt: *const ::std::os::raw::c_char,
            __tp: *mut root::tm,
            __loc: root::locale_t,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn gmtime(__timer: *const root::time_t) -> *mut root::tm;
    }
    extern "C" {
        pub fn localtime(__timer: *const root::time_t) -> *mut root::tm;
    }
    extern "C" {
        pub fn gmtime_r(
            __timer: *const root::time_t,
            __tp: *mut root::tm,
        ) -> *mut root::tm;
    }
    extern "C" {
        pub fn localtime_r(
            __timer: *const root::time_t,
            __tp: *mut root::tm,
        ) -> *mut root::tm;
    }
    extern "C" {
        pub fn asctime(__tp: *const root::tm) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn ctime(
            __timer: *const root::time_t,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn asctime_r(
            __tp: *const root::tm,
            __buf: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn ctime_r(
            __timer: *const root::time_t,
            __buf: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
    }
    extern "C" {
        pub static mut __daylight: ::std::os::raw::c_int;
    }
    extern "C" {
        pub static mut __timezone: ::std::os::raw::c_long;
    }
    extern "C" {
        pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
    }
    extern "C" {
        pub fn tzset();
    }
    extern "C" {
        pub static mut daylight: ::std::os::raw::c_int;
    }
    extern "C" {
        pub static mut timezone: ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn stime(__when: *const root::time_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn timegm(__tp: *mut root::tm) -> root::time_t;
    }
    extern "C" {
        pub fn timelocal(__tp: *mut root::tm) -> root::time_t;
    }
    extern "C" {
        pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn nanosleep(
            __requested_time: *const root::timespec,
            __remaining: *mut root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clock_getres(
            __clock_id: root::clockid_t,
            __res: *mut root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clock_gettime(
            __clock_id: root::clockid_t,
            __tp: *mut root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clock_settime(
            __clock_id: root::clockid_t,
            __tp: *const root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clock_nanosleep(
            __clock_id: root::clockid_t,
            __flags: ::std::os::raw::c_int,
            __req: *const root::timespec,
            __rem: *mut root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clock_getcpuclockid(
            __pid: root::pid_t,
            __clock_id: *mut root::clockid_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn timer_create(
            __clock_id: root::clockid_t,
            __evp: *mut root::sigevent,
            __timerid: *mut root::timer_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn timer_delete(__timerid: root::timer_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn timer_settime(
            __timerid: root::timer_t,
            __flags: ::std::os::raw::c_int,
            __value: *const root::itimerspec,
            __ovalue: *mut root::itimerspec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn timer_gettime(
            __timerid: root::timer_t,
            __value: *mut root::itimerspec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn timer_getoverrun(
            __timerid: root::timer_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn timespec_get(
            __ts: *mut root::timespec,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub static mut getdate_err: ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getdate(
            __string: *const ::std::os::raw::c_char,
        ) -> *mut root::tm;
    }
    extern "C" {
        pub fn getdate_r(
            __string: *const ::std::os::raw::c_char,
            __resbufp: *mut root::tm,
        ) -> ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct __pthread_rwlock_arch_t {
        pub __readers: ::std::os::raw::c_uint,
        pub __writers: ::std::os::raw::c_uint,
        pub __wrphase_futex: ::std::os::raw::c_uint,
        pub __writers_futex: ::std::os::raw::c_uint,
        pub __pad3: ::std::os::raw::c_uint,
        pub __pad4: ::std::os::raw::c_uint,
        pub __cur_writer: ::std::os::raw::c_int,
        pub __shared: ::std::os::raw::c_int,
        pub __rwelision: ::std::os::raw::c_schar,
        pub __pad1: [::std::os::raw::c_uchar; 7usize],
        pub __pad2: ::std::os::raw::c_ulong,
        pub __flags: ::std::os::raw::c_uint,
    }
    #[test]
    fn bindgen_test_layout___pthread_rwlock_arch_t() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
            56usize,
            concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__readers)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers
                    as *const _ as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__writers)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>()))
                    .__wrphase_futex as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__wrphase_futex)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>()))
                    .__writers_futex as *const _ as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__writers_futex)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3
                    as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad3)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4
                    as *const _ as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad4)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer
                    as *const _ as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__cur_writer)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared
                    as *const _ as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__shared)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision
                    as *const _ as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__rwelision)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1
                    as *const _ as usize
            },
            33usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad1)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2
                    as *const _ as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad2)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags
                    as *const _ as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__flags)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_internal_list {
        pub __prev: *mut root::__pthread_internal_list,
        pub __next: *mut root::__pthread_internal_list,
    }
    #[test]
    fn bindgen_test_layout___pthread_internal_list() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_internal_list>(),
            16usize,
            concat!("Size of: ", stringify!(__pthread_internal_list))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_internal_list>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_internal_list))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_internal_list>())).__prev
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_internal_list),
                "::",
                stringify!(__prev)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_internal_list>())).__next
                    as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_internal_list),
                "::",
                stringify!(__next)
            )
        );
    }
    impl Default for __pthread_internal_list {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type __pthread_list_t = root::__pthread_internal_list;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_mutex_s {
        pub __lock: ::std::os::raw::c_int,
        pub __count: ::std::os::raw::c_uint,
        pub __owner: ::std::os::raw::c_int,
        pub __nusers: ::std::os::raw::c_uint,
        pub __kind: ::std::os::raw::c_int,
        pub __spins: ::std::os::raw::c_short,
        pub __elision: ::std::os::raw::c_short,
        pub __list: root::__pthread_list_t,
    }
    #[test]
    fn bindgen_test_layout___pthread_mutex_s() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_mutex_s>(),
            40usize,
            concat!("Size of: ", stringify!(__pthread_mutex_s))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_mutex_s>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_mutex_s))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__lock)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_mutex_s>())).__count
                    as *const _ as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__count)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner
                    as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__owner)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers
                    as *const _ as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__nusers)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _
                    as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__kind)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins
                    as *const _ as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__spins)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision
                    as *const _ as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__elision)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _
                    as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__list)
            )
        );
    }
    impl Default for __pthread_mutex_s {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __pthread_cond_s {
        pub __bindgen_anon_1: root::__pthread_cond_s__bindgen_ty_1,
        pub __bindgen_anon_2: root::__pthread_cond_s__bindgen_ty_2,
        pub __g_refs: [::std::os::raw::c_uint; 2usize],
        pub __g_size: [::std::os::raw::c_uint; 2usize],
        pub __g1_orig_size: ::std::os::raw::c_uint,
        pub __wrefs: ::std::os::raw::c_uint,
        pub __g_signals: [::std::os::raw::c_uint; 2usize],
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __pthread_cond_s__bindgen_ty_1 {
        pub __wseq: ::std::os::raw::c_ulonglong,
        pub __wseq32: root::__pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
        _bindgen_union_align: u64,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
        pub __low: ::std::os::raw::c_uint,
        pub __high: ::std::os::raw::c_uint,
    }
    #[test]
    fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(
            ),
            8usize,
            concat!(
                "Size of: ",
                stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(
            ),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<
                    __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
                >()))
                .__low as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(__low)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<
                    __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
                >()))
                .__high as *const _ as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(__high)
            )
        );
    }
    #[test]
    fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(__pthread_cond_s__bindgen_ty_1)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>()))
                    .__wseq as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_1),
                "::",
                stringify!(__wseq)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>()))
                    .__wseq32 as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_1),
                "::",
                stringify!(__wseq32)
            )
        );
    }
    impl Default for __pthread_cond_s__bindgen_ty_1 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __pthread_cond_s__bindgen_ty_2 {
        pub __g1_start: ::std::os::raw::c_ulonglong,
        pub __g1_start32: root::__pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
        _bindgen_union_align: u64,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
        pub __low: ::std::os::raw::c_uint,
        pub __high: ::std::os::raw::c_uint,
    }
    #[test]
    fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(
            ),
            8usize,
            concat!(
                "Size of: ",
                stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(
            ),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<
                    __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
                >()))
                .__low as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
                "::",
                stringify!(__low)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<
                    __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
                >()))
                .__high as *const _ as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
                "::",
                stringify!(__high)
            )
        );
    }
    #[test]
    fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
            8usize,
            concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(__pthread_cond_s__bindgen_ty_2)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>()))
                    .__g1_start as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_2),
                "::",
                stringify!(__g1_start)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>()))
                    .__g1_start32 as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_2),
                "::",
                stringify!(__g1_start32)
            )
        );
    }
    impl Default for __pthread_cond_s__bindgen_ty_2 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[test]
    fn bindgen_test_layout___pthread_cond_s() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_cond_s>(),
            48usize,
            concat!("Size of: ", stringify!(__pthread_cond_s))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_cond_s>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_cond_s))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs
                    as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g_refs)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size
                    as *const _ as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g_size)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size
                    as *const _ as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g1_orig_size)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _
                    as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__wrefs)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals
                    as *const _ as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g_signals)
            )
        );
    }
    impl Default for __pthread_cond_s {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type pthread_t = ::std::os::raw::c_ulong;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_mutexattr_t {
        pub __size: [::std::os::raw::c_char; 4usize],
        pub __align: ::std::os::raw::c_int,
        _bindgen_union_align: u32,
    }
    #[test]
    fn bindgen_test_layout_pthread_mutexattr_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_mutexattr_t>(),
            4usize,
            concat!("Size of: ", stringify!(pthread_mutexattr_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_mutexattr_t>(),
            4usize,
            concat!("Alignment of ", stringify!(pthread_mutexattr_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutexattr_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutexattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_mutexattr_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_condattr_t {
        pub __size: [::std::os::raw::c_char; 4usize],
        pub __align: ::std::os::raw::c_int,
        _bindgen_union_align: u32,
    }
    #[test]
    fn bindgen_test_layout_pthread_condattr_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_condattr_t>(),
            4usize,
            concat!("Size of: ", stringify!(pthread_condattr_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_condattr_t>(),
            4usize,
            concat!("Alignment of ", stringify!(pthread_condattr_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<pthread_condattr_t>())).__size
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_condattr_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<pthread_condattr_t>())).__align
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_condattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_condattr_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type pthread_key_t = ::std::os::raw::c_uint;
    pub type pthread_once_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_attr_t {
        pub __size: [::std::os::raw::c_char; 56usize],
        pub __align: ::std::os::raw::c_long,
        _bindgen_union_align: [u64; 7usize],
    }
    #[test]
    fn bindgen_test_layout_pthread_attr_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_attr_t>(),
            56usize,
            concat!("Size of: ", stringify!(pthread_attr_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_attr_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_attr_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_attr_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_attr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_attr_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_mutex_t {
        pub __data: root::__pthread_mutex_s,
        pub __size: [::std::os::raw::c_char; 40usize],
        pub __align: ::std::os::raw::c_long,
        _bindgen_union_align: [u64; 5usize],
    }
    #[test]
    fn bindgen_test_layout_pthread_mutex_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_mutex_t>(),
            40usize,
            concat!("Size of: ", stringify!(pthread_mutex_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_mutex_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_mutex_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutex_t),
                "::",
                stringify!(__data)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutex_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutex_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_mutex_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_cond_t {
        pub __data: root::__pthread_cond_s,
        pub __size: [::std::os::raw::c_char; 48usize],
        pub __align: ::std::os::raw::c_longlong,
        _bindgen_union_align: [u64; 6usize],
    }
    #[test]
    fn bindgen_test_layout_pthread_cond_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_cond_t>(),
            48usize,
            concat!("Size of: ", stringify!(pthread_cond_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_cond_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_cond_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_cond_t),
                "::",
                stringify!(__data)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_cond_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_cond_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_cond_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_rwlock_t {
        pub __data: root::__pthread_rwlock_arch_t,
        pub __size: [::std::os::raw::c_char; 56usize],
        pub __align: ::std::os::raw::c_long,
        _bindgen_union_align: [u64; 7usize],
    }
    #[test]
    fn bindgen_test_layout_pthread_rwlock_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_rwlock_t>(),
            56usize,
            concat!("Size of: ", stringify!(pthread_rwlock_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_rwlock_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_rwlock_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlock_t),
                "::",
                stringify!(__data)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlock_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlock_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_rwlock_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_rwlockattr_t {
        pub __size: [::std::os::raw::c_char; 8usize],
        pub __align: ::std::os::raw::c_long,
        _bindgen_union_align: u64,
    }
    #[test]
    fn bindgen_test_layout_pthread_rwlockattr_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_rwlockattr_t>(),
            8usize,
            concat!("Size of: ", stringify!(pthread_rwlockattr_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_rwlockattr_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlockattr_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlockattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_rwlockattr_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type pthread_spinlock_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_barrier_t {
        pub __size: [::std::os::raw::c_char; 32usize],
        pub __align: ::std::os::raw::c_long,
        _bindgen_union_align: [u64; 4usize],
    }
    #[test]
    fn bindgen_test_layout_pthread_barrier_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_barrier_t>(),
            32usize,
            concat!("Size of: ", stringify!(pthread_barrier_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_barrier_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_barrier_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrier_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<pthread_barrier_t>())).__align
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrier_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_barrier_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_barrierattr_t {
        pub __size: [::std::os::raw::c_char; 4usize],
        pub __align: ::std::os::raw::c_int,
        _bindgen_union_align: u32,
    }
    #[test]
    fn bindgen_test_layout_pthread_barrierattr_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_barrierattr_t>(),
            4usize,
            concat!("Size of: ", stringify!(pthread_barrierattr_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_barrierattr_t>(),
            4usize,
            concat!("Alignment of ", stringify!(pthread_barrierattr_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrierattr_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrierattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_barrierattr_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
    pub const PTHREAD_CREATE_JOINABLE: root::_bindgen_ty_33 = 0;
    pub const PTHREAD_CREATE_DETACHED: root::_bindgen_ty_33 = 1;
    pub type _bindgen_ty_33 = u32;
    pub const PTHREAD_MUTEX_TIMED_NP: root::_bindgen_ty_34 = 0;
    pub const PTHREAD_MUTEX_RECURSIVE_NP: root::_bindgen_ty_34 = 1;
    pub const PTHREAD_MUTEX_ERRORCHECK_NP: root::_bindgen_ty_34 = 2;
    pub const PTHREAD_MUTEX_ADAPTIVE_NP: root::_bindgen_ty_34 = 3;
    pub const PTHREAD_MUTEX_NORMAL: root::_bindgen_ty_34 = 0;
    pub const PTHREAD_MUTEX_RECURSIVE: root::_bindgen_ty_34 = 1;
    pub const PTHREAD_MUTEX_ERRORCHECK: root::_bindgen_ty_34 = 2;
    pub const PTHREAD_MUTEX_DEFAULT: root::_bindgen_ty_34 = 0;
    pub const PTHREAD_MUTEX_FAST_NP: root::_bindgen_ty_34 = 0;
    pub type _bindgen_ty_34 = u32;
    pub const PTHREAD_MUTEX_STALLED: root::_bindgen_ty_35 = 0;
    pub const PTHREAD_MUTEX_STALLED_NP: root::_bindgen_ty_35 = 0;
    pub const PTHREAD_MUTEX_ROBUST: root::_bindgen_ty_35 = 1;
    pub const PTHREAD_MUTEX_ROBUST_NP: root::_bindgen_ty_35 = 1;
    pub type _bindgen_ty_35 = u32;
    pub const PTHREAD_PRIO_NONE: root::_bindgen_ty_36 = 0;
    pub const PTHREAD_PRIO_INHERIT: root::_bindgen_ty_36 = 1;
    pub const PTHREAD_PRIO_PROTECT: root::_bindgen_ty_36 = 2;
    pub type _bindgen_ty_36 = u32;
    pub const PTHREAD_RWLOCK_PREFER_READER_NP: root::_bindgen_ty_37 = 0;
    pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: root::_bindgen_ty_37 = 1;
    pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP:
        root::_bindgen_ty_37 = 2;
    pub const PTHREAD_RWLOCK_DEFAULT_NP: root::_bindgen_ty_37 = 0;
    pub type _bindgen_ty_37 = u32;
    pub const PTHREAD_INHERIT_SCHED: root::_bindgen_ty_38 = 0;
    pub const PTHREAD_EXPLICIT_SCHED: root::_bindgen_ty_38 = 1;
    pub type _bindgen_ty_38 = u32;
    pub const PTHREAD_SCOPE_SYSTEM: root::_bindgen_ty_39 = 0;
    pub const PTHREAD_SCOPE_PROCESS: root::_bindgen_ty_39 = 1;
    pub type _bindgen_ty_39 = u32;
    pub const PTHREAD_PROCESS_PRIVATE: root::_bindgen_ty_40 = 0;
    pub const PTHREAD_PROCESS_SHARED: root::_bindgen_ty_40 = 1;
    pub type _bindgen_ty_40 = u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _pthread_cleanup_buffer {
        pub __routine: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
        pub __arg: *mut ::std::os::raw::c_void,
        pub __canceltype: ::std::os::raw::c_int,
        pub __prev: *mut root::_pthread_cleanup_buffer,
    }
    #[test]
    fn bindgen_test_layout__pthread_cleanup_buffer() {
        assert_eq!(
            ::std::mem::size_of::<_pthread_cleanup_buffer>(),
            32usize,
            concat!("Size of: ", stringify!(_pthread_cleanup_buffer))
        );
        assert_eq!(
            ::std::mem::align_of::<_pthread_cleanup_buffer>(),
            8usize,
            concat!("Alignment of ", stringify!(_pthread_cleanup_buffer))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__routine
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_pthread_cleanup_buffer),
                "::",
                stringify!(__routine)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__arg
                    as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_pthread_cleanup_buffer),
                "::",
                stringify!(__arg)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__canceltype
                    as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_pthread_cleanup_buffer),
                "::",
                stringify!(__canceltype)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__prev
                    as *const _ as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_pthread_cleanup_buffer),
                "::",
                stringify!(__prev)
            )
        );
    }
    impl Default for _pthread_cleanup_buffer {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub const PTHREAD_CANCEL_ENABLE: root::_bindgen_ty_41 = 0;
    pub const PTHREAD_CANCEL_DISABLE: root::_bindgen_ty_41 = 1;
    pub type _bindgen_ty_41 = u32;
    pub const PTHREAD_CANCEL_DEFERRED: root::_bindgen_ty_42 = 0;
    pub const PTHREAD_CANCEL_ASYNCHRONOUS: root::_bindgen_ty_42 = 1;
    pub type _bindgen_ty_42 = u32;
    extern "C" {
        pub fn pthread_create(
            __newthread: *mut root::pthread_t,
            __attr: *const root::pthread_attr_t,
            __start_routine: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut ::std::os::raw::c_void,
                )
                    -> *mut ::std::os::raw::c_void,
            >,
            __arg: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_exit(__retval: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn pthread_join(
            __th: root::pthread_t,
            __thread_return: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_tryjoin_np(
            __th: root::pthread_t,
            __thread_return: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_timedjoin_np(
            __th: root::pthread_t,
            __thread_return: *mut *mut ::std::os::raw::c_void,
            __abstime: *const root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_detach(__th: root::pthread_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_self() -> root::pthread_t;
    }
    extern "C" {
        pub fn pthread_equal(
            __thread1: root::pthread_t,
            __thread2: root::pthread_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_init(
            __attr: *mut root::pthread_attr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_destroy(
            __attr: *mut root::pthread_attr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getdetachstate(
            __attr: *const root::pthread_attr_t,
            __detachstate: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setdetachstate(
            __attr: *mut root::pthread_attr_t,
            __detachstate: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getguardsize(
            __attr: *const root::pthread_attr_t,
            __guardsize: *mut root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setguardsize(
            __attr: *mut root::pthread_attr_t,
            __guardsize: root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getschedparam(
            __attr: *const root::pthread_attr_t,
            __param: *mut root::sched_param,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setschedparam(
            __attr: *mut root::pthread_attr_t,
            __param: *const root::sched_param,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getschedpolicy(
            __attr: *const root::pthread_attr_t,
            __policy: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setschedpolicy(
            __attr: *mut root::pthread_attr_t,
            __policy: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getinheritsched(
            __attr: *const root::pthread_attr_t,
            __inherit: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setinheritsched(
            __attr: *mut root::pthread_attr_t,
            __inherit: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getscope(
            __attr: *const root::pthread_attr_t,
            __scope: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setscope(
            __attr: *mut root::pthread_attr_t,
            __scope: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getstackaddr(
            __attr: *const root::pthread_attr_t,
            __stackaddr: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setstackaddr(
            __attr: *mut root::pthread_attr_t,
            __stackaddr: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getstacksize(
            __attr: *const root::pthread_attr_t,
            __stacksize: *mut root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setstacksize(
            __attr: *mut root::pthread_attr_t,
            __stacksize: root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getstack(
            __attr: *const root::pthread_attr_t,
            __stackaddr: *mut *mut ::std::os::raw::c_void,
            __stacksize: *mut root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setstack(
            __attr: *mut root::pthread_attr_t,
            __stackaddr: *mut ::std::os::raw::c_void,
            __stacksize: root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setaffinity_np(
            __attr: *mut root::pthread_attr_t,
            __cpusetsize: root::size_t,
            __cpuset: *const root::cpu_set_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getaffinity_np(
            __attr: *const root::pthread_attr_t,
            __cpusetsize: root::size_t,
            __cpuset: *mut root::cpu_set_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getattr_default_np(
            __attr: *mut root::pthread_attr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setattr_default_np(
            __attr: *const root::pthread_attr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getattr_np(
            __th: root::pthread_t,
            __attr: *mut root::pthread_attr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setschedparam(
            __target_thread: root::pthread_t,
            __policy: ::std::os::raw::c_int,
            __param: *const root::sched_param,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getschedparam(
            __target_thread: root::pthread_t,
            __policy: *mut ::std::os::raw::c_int,
            __param: *mut root::sched_param,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setschedprio(
            __target_thread: root::pthread_t,
            __prio: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getname_np(
            __target_thread: root::pthread_t,
            __buf: *mut ::std::os::raw::c_char,
            __buflen: root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setname_np(
            __target_thread: root::pthread_t,
            __name: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getconcurrency() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setconcurrency(
            __level: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_yield() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setaffinity_np(
            __th: root::pthread_t,
            __cpusetsize: root::size_t,
            __cpuset: *const root::cpu_set_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getaffinity_np(
            __th: root::pthread_t,
            __cpusetsize: root::size_t,
            __cpuset: *mut root::cpu_set_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_once(
            __once_control: *mut root::pthread_once_t,
            __init_routine: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setcancelstate(
            __state: ::std::os::raw::c_int,
            __oldstate: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setcanceltype(
            __type: ::std::os::raw::c_int,
            __oldtype: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cancel(__th: root::pthread_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_testcancel();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_unwind_buf_t {
        pub __cancel_jmp_buf:
            [root::__pthread_unwind_buf_t__bindgen_ty_1; 1usize],
        pub __pad: [*mut ::std::os::raw::c_void; 4usize],
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct __pthread_unwind_buf_t__bindgen_ty_1 {
        pub __cancel_jmp_buf: root::__jmp_buf,
        pub __mask_was_saved: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout___pthread_unwind_buf_t__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_unwind_buf_t__bindgen_ty_1>(),
            72usize,
            concat!(
                "Size of: ",
                stringify!(__pthread_unwind_buf_t__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_unwind_buf_t__bindgen_ty_1>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(__pthread_unwind_buf_t__bindgen_ty_1)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_unwind_buf_t__bindgen_ty_1>()))
                    .__cancel_jmp_buf as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_unwind_buf_t__bindgen_ty_1),
                "::",
                stringify!(__cancel_jmp_buf)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_unwind_buf_t__bindgen_ty_1>()))
                    .__mask_was_saved as *const _ as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_unwind_buf_t__bindgen_ty_1),
                "::",
                stringify!(__mask_was_saved)
            )
        );
    }
    #[test]
    fn bindgen_test_layout___pthread_unwind_buf_t() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_unwind_buf_t>(),
            104usize,
            concat!("Size of: ", stringify!(__pthread_unwind_buf_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_unwind_buf_t>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_unwind_buf_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_unwind_buf_t>()))
                    .__cancel_jmp_buf as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_unwind_buf_t),
                "::",
                stringify!(__cancel_jmp_buf)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_unwind_buf_t>())).__pad
                    as *const _ as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_unwind_buf_t),
                "::",
                stringify!(__pad)
            )
        );
    }
    impl Default for __pthread_unwind_buf_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_cleanup_frame {
        pub __cancel_routine: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
        pub __cancel_arg: *mut ::std::os::raw::c_void,
        pub __do_it: ::std::os::raw::c_int,
        pub __cancel_type: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout___pthread_cleanup_frame() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_cleanup_frame>(),
            24usize,
            concat!("Size of: ", stringify!(__pthread_cleanup_frame))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_cleanup_frame>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_cleanup_frame))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cleanup_frame>()))
                    .__cancel_routine as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cleanup_frame),
                "::",
                stringify!(__cancel_routine)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__cancel_arg
                    as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cleanup_frame),
                "::",
                stringify!(__cancel_arg)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__do_it
                    as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cleanup_frame),
                "::",
                stringify!(__do_it)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cleanup_frame>()))
                    .__cancel_type as *const _ as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cleanup_frame),
                "::",
                stringify!(__cancel_type)
            )
        );
    }
    impl Default for __pthread_cleanup_frame {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct __pthread_cleanup_class {
        pub __cancel_routine: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
        pub __cancel_arg: *mut ::std::os::raw::c_void,
        pub __do_it: ::std::os::raw::c_int,
        pub __cancel_type: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout___pthread_cleanup_class() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_cleanup_class>(),
            24usize,
            concat!("Size of: ", stringify!(__pthread_cleanup_class))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_cleanup_class>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_cleanup_class))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cleanup_class>()))
                    .__cancel_routine as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cleanup_class),
                "::",
                stringify!(__cancel_routine)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cleanup_class>())).__cancel_arg
                    as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cleanup_class),
                "::",
                stringify!(__cancel_arg)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cleanup_class>())).__do_it
                    as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cleanup_class),
                "::",
                stringify!(__do_it)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cleanup_class>()))
                    .__cancel_type as *const _ as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cleanup_class),
                "::",
                stringify!(__cancel_type)
            )
        );
    }
    impl Default for __pthread_cleanup_class {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __jmp_buf_tag {
        _unused: [u8; 0],
    }
    extern "C" {
        pub fn __sigsetjmp(
            __env: *mut root::__jmp_buf_tag,
            __savemask: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_init(
            __mutex: *mut root::pthread_mutex_t,
            __mutexattr: *const root::pthread_mutexattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_destroy(
            __mutex: *mut root::pthread_mutex_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_trylock(
            __mutex: *mut root::pthread_mutex_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_lock(
            __mutex: *mut root::pthread_mutex_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_timedlock(
            __mutex: *mut root::pthread_mutex_t,
            __abstime: *const root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_unlock(
            __mutex: *mut root::pthread_mutex_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_getprioceiling(
            __mutex: *const root::pthread_mutex_t,
            __prioceiling: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_setprioceiling(
            __mutex: *mut root::pthread_mutex_t,
            __prioceiling: ::std::os::raw::c_int,
            __old_ceiling: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_consistent(
            __mutex: *mut root::pthread_mutex_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_consistent_np(
            __mutex: *mut root::pthread_mutex_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_init(
            __attr: *mut root::pthread_mutexattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_destroy(
            __attr: *mut root::pthread_mutexattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_getpshared(
            __attr: *const root::pthread_mutexattr_t,
            __pshared: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_setpshared(
            __attr: *mut root::pthread_mutexattr_t,
            __pshared: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_gettype(
            __attr: *const root::pthread_mutexattr_t,
            __kind: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_settype(
            __attr: *mut root::pthread_mutexattr_t,
            __kind: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_getprotocol(
            __attr: *const root::pthread_mutexattr_t,
            __protocol: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_setprotocol(
            __attr: *mut root::pthread_mutexattr_t,
            __protocol: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_getprioceiling(
            __attr: *const root::pthread_mutexattr_t,
            __prioceiling: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_setprioceiling(
            __attr: *mut root::pthread_mutexattr_t,
            __prioceiling: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_getrobust(
            __attr: *const root::pthread_mutexattr_t,
            __robustness: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_getrobust_np(
            __attr: *const root::pthread_mutexattr_t,
            __robustness: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_setrobust(
            __attr: *mut root::pthread_mutexattr_t,
            __robustness: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_setrobust_np(
            __attr: *mut root::pthread_mutexattr_t,
            __robustness: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_init(
            __rwlock: *mut root::pthread_rwlock_t,
            __attr: *const root::pthread_rwlockattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_destroy(
            __rwlock: *mut root::pthread_rwlock_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_rdlock(
            __rwlock: *mut root::pthread_rwlock_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_tryrdlock(
            __rwlock: *mut root::pthread_rwlock_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_timedrdlock(
            __rwlock: *mut root::pthread_rwlock_t,
            __abstime: *const root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_wrlock(
            __rwlock: *mut root::pthread_rwlock_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_trywrlock(
            __rwlock: *mut root::pthread_rwlock_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_timedwrlock(
            __rwlock: *mut root::pthread_rwlock_t,
            __abstime: *const root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_unlock(
            __rwlock: *mut root::pthread_rwlock_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_init(
            __attr: *mut root::pthread_rwlockattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_destroy(
            __attr: *mut root::pthread_rwlockattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_getpshared(
            __attr: *const root::pthread_rwlockattr_t,
            __pshared: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_setpshared(
            __attr: *mut root::pthread_rwlockattr_t,
            __pshared: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_getkind_np(
            __attr: *const root::pthread_rwlockattr_t,
            __pref: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_setkind_np(
            __attr: *mut root::pthread_rwlockattr_t,
            __pref: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cond_init(
            __cond: *mut root::pthread_cond_t,
            __cond_attr: *const root::pthread_condattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cond_destroy(
            __cond: *mut root::pthread_cond_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cond_signal(
            __cond: *mut root::pthread_cond_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cond_broadcast(
            __cond: *mut root::pthread_cond_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cond_wait(
            __cond: *mut root::pthread_cond_t,
            __mutex: *mut root::pthread_mutex_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cond_timedwait(
            __cond: *mut root::pthread_cond_t,
            __mutex: *mut root::pthread_mutex_t,
            __abstime: *const root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_condattr_init(
            __attr: *mut root::pthread_condattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_condattr_destroy(
            __attr: *mut root::pthread_condattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_condattr_getpshared(
            __attr: *const root::pthread_condattr_t,
            __pshared: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_condattr_setpshared(
            __attr: *mut root::pthread_condattr_t,
            __pshared: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_condattr_getclock(
            __attr: *const root::pthread_condattr_t,
            __clock_id: *mut root::__clockid_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_condattr_setclock(
            __attr: *mut root::pthread_condattr_t,
            __clock_id: root::__clockid_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_spin_init(
            __lock: *mut root::pthread_spinlock_t,
            __pshared: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_spin_destroy(
            __lock: *mut root::pthread_spinlock_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_spin_lock(
            __lock: *mut root::pthread_spinlock_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_spin_trylock(
            __lock: *mut root::pthread_spinlock_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_spin_unlock(
            __lock: *mut root::pthread_spinlock_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_barrier_init(
            __barrier: *mut root::pthread_barrier_t,
            __attr: *const root::pthread_barrierattr_t,
            __count: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_barrier_destroy(
            __barrier: *mut root::pthread_barrier_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_barrier_wait(
            __barrier: *mut root::pthread_barrier_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_barrierattr_init(
            __attr: *mut root::pthread_barrierattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_barrierattr_destroy(
            __attr: *mut root::pthread_barrierattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_barrierattr_getpshared(
            __attr: *const root::pthread_barrierattr_t,
            __pshared: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_barrierattr_setpshared(
            __attr: *mut root::pthread_barrierattr_t,
            __pshared: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_key_create(
            __key: *mut root::pthread_key_t,
            __destr_function: ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
            >,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_key_delete(
            __key: root::pthread_key_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getspecific(
            __key: root::pthread_key_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn pthread_setspecific(
            __key: root::pthread_key_t,
            __pointer: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getcpuclockid(
            __thread_id: root::pthread_t,
            __clock_id: *mut root::__clockid_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_atfork(
            __prepare: ::std::option::Option<unsafe extern "C" fn()>,
            __parent: ::std::option::Option<unsafe extern "C" fn()>,
            __child: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int;
    }
    pub type __gthread_t = root::pthread_t;
    pub type __gthread_key_t = root::pthread_key_t;
    pub type __gthread_once_t = root::pthread_once_t;
    pub type __gthread_mutex_t = root::pthread_mutex_t;
    pub type __gthread_recursive_mutex_t = root::pthread_mutex_t;
    pub type __gthread_cond_t = root::pthread_cond_t;
    pub type __gthread_time_t = root::timespec;
    pub type _Atomic_word = ::std::os::raw::c_int;
    pub const idtype_t_P_ALL: root::idtype_t = 0;
    pub const idtype_t_P_PID: root::idtype_t = 1;
    pub const idtype_t_P_PGID: root::idtype_t = 2;
    pub type idtype_t = u32;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct div_t {
        pub quot: ::std::os::raw::c_int,
        pub rem: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_div_t() {
        assert_eq!(
            ::std::mem::size_of::<div_t>(),
            8usize,
            concat!("Size of: ", stringify!(div_t))
        );
        assert_eq!(
            ::std::mem::align_of::<div_t>(),
            4usize,
            concat!("Alignment of ", stringify!(div_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(div_t),
                "::",
                stringify!(quot)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(div_t),
                "::",
                stringify!(rem)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct ldiv_t {
        pub quot: ::std::os::raw::c_long,
        pub rem: ::std::os::raw::c_long,
    }
    #[test]
    fn bindgen_test_layout_ldiv_t() {
        assert_eq!(
            ::std::mem::size_of::<ldiv_t>(),
            16usize,
            concat!("Size of: ", stringify!(ldiv_t))
        );
        assert_eq!(
            ::std::mem::align_of::<ldiv_t>(),
            8usize,
            concat!("Alignment of ", stringify!(ldiv_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ldiv_t),
                "::",
                stringify!(quot)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ldiv_t),
                "::",
                stringify!(rem)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct lldiv_t {
        pub quot: ::std::os::raw::c_longlong,
        pub rem: ::std::os::raw::c_longlong,
    }
    #[test]
    fn bindgen_test_layout_lldiv_t() {
        assert_eq!(
            ::std::mem::size_of::<lldiv_t>(),
            16usize,
            concat!("Size of: ", stringify!(lldiv_t))
        );
        assert_eq!(
            ::std::mem::align_of::<lldiv_t>(),
            8usize,
            concat!("Alignment of ", stringify!(lldiv_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(lldiv_t),
                "::",
                stringify!(quot)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(lldiv_t),
                "::",
                stringify!(rem)
            )
        );
    }
    extern "C" {
        pub fn __ctype_get_mb_cur_max() -> root::size_t;
    }
    extern "C" {
        pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
    }
    extern "C" {
        pub fn atoi(
            __nptr: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn atol(
            __nptr: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn atoll(
            __nptr: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtod(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> f64;
    }
    extern "C" {
        pub fn strtof(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> f32;
    }
    extern "C" {
        pub fn strtold(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> u128;
    }
    extern "C" {
        pub fn strtof32(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> root::_Float32;
    }
    extern "C" {
        pub fn strtof64(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> root::_Float64;
    }
    extern "C" {
        pub fn strtof32x(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> root::_Float32x;
    }
    extern "C" {
        pub fn strtof64x(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> root::_Float64x;
    }
    extern "C" {
        pub fn strtol(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn strtoul(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn strtoq(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtouq(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn strtoll(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtoull(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn strfromd(
            __dest: *mut ::std::os::raw::c_char,
            __size: root::size_t,
            __format: *const ::std::os::raw::c_char,
            __f: f64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strfromf(
            __dest: *mut ::std::os::raw::c_char,
            __size: root::size_t,
            __format: *const ::std::os::raw::c_char,
            __f: f32,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strfroml(
            __dest: *mut ::std::os::raw::c_char,
            __size: root::size_t,
            __format: *const ::std::os::raw::c_char,
            __f: u128,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strfromf32(
            __dest: *mut ::std::os::raw::c_char,
            __size: root::size_t,
            __format: *const ::std::os::raw::c_char,
            __f: root::_Float32,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strfromf64(
            __dest: *mut ::std::os::raw::c_char,
            __size: root::size_t,
            __format: *const ::std::os::raw::c_char,
            __f: root::_Float64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strfromf32x(
            __dest: *mut ::std::os::raw::c_char,
            __size: root::size_t,
            __format: *const ::std::os::raw::c_char,
            __f: root::_Float32x,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strfromf64x(
            __dest: *mut ::std::os::raw::c_char,
            __size: root::size_t,
            __format: *const ::std::os::raw::c_char,
            __f: root::_Float64x,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strtol_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn strtoul_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn strtoll_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtoull_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn strtod_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> f64;
    }
    extern "C" {
        pub fn strtof_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> f32;
    }
    extern "C" {
        pub fn strtold_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> u128;
    }
    extern "C" {
        pub fn strtof32_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> root::_Float32;
    }
    extern "C" {
        pub fn strtof64_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> root::_Float64;
    }
    extern "C" {
        pub fn strtof32x_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> root::_Float32x;
    }
    extern "C" {
        pub fn strtof64x_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> root::_Float64x;
    }
    extern "C" {
        pub fn l64a(__n: ::std::os::raw::c_long)
            -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn a64l(
            __s: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_long;
    }
    pub type u_char = root::__u_char;
    pub type u_short = root::__u_short;
    pub type u_int = root::__u_int;
    pub type u_long = root::__u_long;
    pub type quad_t = root::__quad_t;
    pub type u_quad_t = root::__u_quad_t;
    pub type fsid_t = root::__fsid_t;
    pub type loff_t = root::__loff_t;
    pub type ino_t = root::__ino_t;
    pub type ino64_t = root::__ino64_t;
    pub type dev_t = root::__dev_t;
    pub type gid_t = root::__gid_t;
    pub type mode_t = root::__mode_t;
    pub type nlink_t = root::__nlink_t;
    pub type uid_t = root::__uid_t;
    pub type off_t = root::__off_t;
    pub type off64_t = root::__off64_t;
    pub type id_t = root::__id_t;
    pub type ssize_t = root::__ssize_t;
    pub type daddr_t = root::__daddr_t;
    pub type caddr_t = root::__caddr_t;
    pub type key_t = root::__key_t;
    pub type useconds_t = root::__useconds_t;
    pub type suseconds_t = root::__suseconds_t;
    pub type ulong = ::std::os::raw::c_ulong;
    pub type ushort = ::std::os::raw::c_ushort;
    pub type uint = ::std::os::raw::c_uint;
    pub type u_int8_t = ::std::os::raw::c_uchar;
    pub type u_int16_t = ::std::os::raw::c_ushort;
    pub type u_int32_t = ::std::os::raw::c_uint;
    pub type u_int64_t = ::std::os::raw::c_ulong;
    pub type register_t = ::std::os::raw::c_long;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct __sigset_t {
        pub __val: [::std::os::raw::c_ulong; 16usize],
    }
    #[test]
    fn bindgen_test_layout___sigset_t() {
        assert_eq!(
            ::std::mem::size_of::<__sigset_t>(),
            128usize,
            concat!("Size of: ", stringify!(__sigset_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__sigset_t>(),
            8usize,
            concat!("Alignment of ", stringify!(__sigset_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__sigset_t>())).__val as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__sigset_t),
                "::",
                stringify!(__val)
            )
        );
    }
    pub type sigset_t = root::__sigset_t;
    pub type __fd_mask = ::std::os::raw::c_long;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct fd_set {
        pub fds_bits: [root::__fd_mask; 16usize],
    }
    #[test]
    fn bindgen_test_layout_fd_set() {
        assert_eq!(
            ::std::mem::size_of::<fd_set>(),
            128usize,
            concat!("Size of: ", stringify!(fd_set))
        );
        assert_eq!(
            ::std::mem::align_of::<fd_set>(),
            8usize,
            concat!("Alignment of ", stringify!(fd_set))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<fd_set>())).fds_bits as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(fd_set),
                "::",
                stringify!(fds_bits)
            )
        );
    }
    pub type fd_mask = root::__fd_mask;
    extern "C" {
        pub fn select(
            __nfds: ::std::os::raw::c_int,
            __readfds: *mut root::fd_set,
            __writefds: *mut root::fd_set,
            __exceptfds: *mut root::fd_set,
            __timeout: *mut root::timeval,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pselect(
            __nfds: ::std::os::raw::c_int,
            __readfds: *mut root::fd_set,
            __writefds: *mut root::fd_set,
            __exceptfds: *mut root::fd_set,
            __timeout: *const root::timespec,
            __sigmask: *const root::__sigset_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn gnu_dev_major(__dev: root::__dev_t) -> ::std::os::raw::c_uint;
    }
    extern "C" {
        pub fn gnu_dev_minor(__dev: root::__dev_t) -> ::std::os::raw::c_uint;
    }
    extern "C" {
        pub fn gnu_dev_makedev(
            __major: ::std::os::raw::c_uint,
            __minor: ::std::os::raw::c_uint,
        ) -> root::__dev_t;
    }
    pub type blksize_t = root::__blksize_t;
    pub type blkcnt_t = root::__blkcnt_t;
    pub type fsblkcnt_t = root::__fsblkcnt_t;
    pub type fsfilcnt_t = root::__fsfilcnt_t;
    pub type blkcnt64_t = root::__blkcnt64_t;
    pub type fsblkcnt64_t = root::__fsblkcnt64_t;
    pub type fsfilcnt64_t = root::__fsfilcnt64_t;
    extern "C" {
        pub fn random() -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn srandom(__seed: ::std::os::raw::c_uint);
    }
    extern "C" {
        pub fn initstate(
            __seed: ::std::os::raw::c_uint,
            __statebuf: *mut ::std::os::raw::c_char,
            __statelen: root::size_t,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn setstate(
            __statebuf: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct random_data {
        pub fptr: *mut i32,
        pub rptr: *mut i32,
        pub state: *mut i32,
        pub rand_type: ::std::os::raw::c_int,
        pub rand_deg: ::std::os::raw::c_int,
        pub rand_sep: ::std::os::raw::c_int,
        pub end_ptr: *mut i32,
    }
    #[test]
    fn bindgen_test_layout_random_data() {
        assert_eq!(
            ::std::mem::size_of::<random_data>(),
            48usize,
            concat!("Size of: ", stringify!(random_data))
        );
        assert_eq!(
            ::std::mem::align_of::<random_data>(),
            8usize,
            concat!("Alignment of ", stringify!(random_data))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<random_data>())).fptr as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(fptr)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<random_data>())).rptr as *const _
                    as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(rptr)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<random_data>())).state as *const _
                    as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(state)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<random_data>())).rand_type as *const _
                    as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(rand_type)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<random_data>())).rand_deg as *const _
                    as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(rand_deg)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<random_data>())).rand_sep as *const _
                    as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(rand_sep)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<random_data>())).end_ptr as *const _
                    as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(end_ptr)
            )
        );
    }
    impl Default for random_data {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        pub fn random_r(
            __buf: *mut root::random_data,
            __result: *mut i32,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn srandom_r(
            __seed: ::std::os::raw::c_uint,
            __buf: *mut root::random_data,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn initstate_r(
            __seed: ::std::os::raw::c_uint,
            __statebuf: *mut ::std::os::raw::c_char,
            __statelen: root::size_t,
            __buf: *mut root::random_data,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setstate_r(
            __statebuf: *mut ::std::os::raw::c_char,
            __buf: *mut root::random_data,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn rand() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn srand(__seed: ::std::os::raw::c_uint);
    }
    extern "C" {
        pub fn rand_r(
            __seed: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn drand48() -> f64;
    }
    extern "C" {
        pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
    }
    extern "C" {
        pub fn lrand48() -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn nrand48(
            __xsubi: *mut ::std::os::raw::c_ushort,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn mrand48() -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn jrand48(
            __xsubi: *mut ::std::os::raw::c_ushort,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn srand48(__seedval: ::std::os::raw::c_long);
    }
    extern "C" {
        pub fn seed48(
            __seed16v: *mut ::std::os::raw::c_ushort,
        ) -> *mut ::std::os::raw::c_ushort;
    }
    extern "C" {
        pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct drand48_data {
        pub __x: [::std::os::raw::c_ushort; 3usize],
        pub __old_x: [::std::os::raw::c_ushort; 3usize],
        pub __c: ::std::os::raw::c_ushort,
        pub __init: ::std::os::raw::c_ushort,
        pub __a: ::std::os::raw::c_ulonglong,
    }
    #[test]
    fn bindgen_test_layout_drand48_data() {
        assert_eq!(
            ::std::mem::size_of::<drand48_data>(),
            24usize,
            concat!("Size of: ", stringify!(drand48_data))
        );
        assert_eq!(
            ::std::mem::align_of::<drand48_data>(),
            8usize,
            concat!("Alignment of ", stringify!(drand48_data))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<drand48_data>())).__x as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__x)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _
                    as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__old_x)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<drand48_data>())).__c as *const _
                    as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__c)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<drand48_data>())).__init as *const _
                    as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__init)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<drand48_data>())).__a as *const _
                    as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__a)
            )
        );
    }
    extern "C" {
        pub fn drand48_r(
            __buffer: *mut root::drand48_data,
            __result: *mut f64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn erand48_r(
            __xsubi: *mut ::std::os::raw::c_ushort,
            __buffer: *mut root::drand48_data,
            __result: *mut f64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn lrand48_r(
            __buffer: *mut root::drand48_data,
            __result: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn nrand48_r(
            __xsubi: *mut ::std::os::raw::c_ushort,
            __buffer: *mut root::drand48_data,
            __result: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mrand48_r(
            __buffer: *mut root::drand48_data,
            __result: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn jrand48_r(
            __xsubi: *mut ::std::os::raw::c_ushort,
            __buffer: *mut root::drand48_data,
            __result: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn srand48_r(
            __seedval: ::std::os::raw::c_long,
            __buffer: *mut root::drand48_data,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn seed48_r(
            __seed16v: *mut ::std::os::raw::c_ushort,
            __buffer: *mut root::drand48_data,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn lcong48_r(
            __param: *mut ::std::os::raw::c_ushort,
            __buffer: *mut root::drand48_data,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn malloc(__size: root::size_t) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn calloc(
            __nmemb: root::size_t,
            __size: root::size_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn realloc(
            __ptr: *mut ::std::os::raw::c_void,
            __size: root::size_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn reallocarray(
            __ptr: *mut ::std::os::raw::c_void,
            __nmemb: root::size_t,
            __size: root::size_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn free(__ptr: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn alloca(__size: root::size_t) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn valloc(__size: root::size_t) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn posix_memalign(
            __memptr: *mut *mut ::std::os::raw::c_void,
            __alignment: root::size_t,
            __size: root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn aligned_alloc(
            __alignment: root::size_t,
            __size: root::size_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn abort();
    }
    extern "C" {
        pub fn atexit(
            __func: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn at_quick_exit(
            __func: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn on_exit(
            __func: ::std::option::Option<
                unsafe extern "C" fn(
                    __status: ::std::os::raw::c_int,
                    __arg: *mut ::std::os::raw::c_void,
                ),
            >,
            __arg: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn exit(__status: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn quick_exit(__status: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn _Exit(__status: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn getenv(
            __name: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn secure_getenv(
            __name: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn putenv(
            __string: *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setenv(
            __name: *const ::std::os::raw::c_char,
            __value: *const ::std::os::raw::c_char,
            __replace: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn unsetenv(
            __name: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clearenv() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mktemp(
            __template: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn mkstemp(
            __template: *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkstemp64(
            __template: *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkstemps(
            __template: *mut ::std::os::raw::c_char,
            __suffixlen: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkstemps64(
            __template: *mut ::std::os::raw::c_char,
            __suffixlen: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkdtemp(
            __template: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn mkostemp(
            __template: *mut ::std::os::raw::c_char,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkostemp64(
            __template: *mut ::std::os::raw::c_char,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkostemps(
            __template: *mut ::std::os::raw::c_char,
            __suffixlen: ::std::os::raw::c_int,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkostemps64(
            __template: *mut ::std::os::raw::c_char,
            __suffixlen: ::std::os::raw::c_int,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn system(
            __command: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn canonicalize_file_name(
            __name: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn realpath(
            __name: *const ::std::os::raw::c_char,
            __resolved: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    pub type __compar_fn_t = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
    pub type comparison_fn_t = root::__compar_fn_t;
    pub type __compar_d_fn_t = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_void,
            arg3: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
    extern "C" {
        pub fn bsearch(
            __key: *const ::std::os::raw::c_void,
            __base: *const ::std::os::raw::c_void,
            __nmemb: root::size_t,
            __size: root::size_t,
            __compar: root::__compar_fn_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn qsort(
            __base: *mut ::std::os::raw::c_void,
            __nmemb: root::size_t,
            __size: root::size_t,
            __compar: root::__compar_fn_t,
        );
    }
    extern "C" {
        pub fn qsort_r(
            __base: *mut ::std::os::raw::c_void,
            __nmemb: root::size_t,
            __size: root::size_t,
            __compar: root::__compar_d_fn_t,
            __arg: *mut ::std::os::raw::c_void,
        );
    }
    extern "C" {
        pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn llabs(
            __x: ::std::os::raw::c_longlong,
        ) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn div(
            __numer: ::std::os::raw::c_int,
            __denom: ::std::os::raw::c_int,
        ) -> root::div_t;
    }
    extern "C" {
        pub fn ldiv(
            __numer: ::std::os::raw::c_long,
            __denom: ::std::os::raw::c_long,
        ) -> root::ldiv_t;
    }
    extern "C" {
        pub fn lldiv(
            __numer: ::std::os::raw::c_longlong,
            __denom: ::std::os::raw::c_longlong,
        ) -> root::lldiv_t;
    }
    extern "C" {
        pub fn ecvt(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn fcvt(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn gcvt(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn qecvt(
            __value: u128,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn qfcvt(
            __value: u128,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn qgcvt(
            __value: u128,
            __ndigit: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn ecvt_r(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fcvt_r(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn qecvt_r(
            __value: u128,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn qfcvt_r(
            __value: u128,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mblen(
            __s: *const ::std::os::raw::c_char,
            __n: root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mbtowc(
            __pwc: *mut u32,
            __s: *const ::std::os::raw::c_char,
            __n: root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wctomb(
            __s: *mut ::std::os::raw::c_char,
            __wchar: u32,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mbstowcs(
            __pwcs: *mut u32,
            __s: *const ::std::os::raw::c_char,
            __n: root::size_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn wcstombs(
            __s: *mut ::std::os::raw::c_char,
            __pwcs: *const u32,
            __n: root::size_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn rpmatch(
            __response: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getsubopt(
            __optionp: *mut *mut ::std::os::raw::c_char,
            __tokens: *const *mut ::std::os::raw::c_char,
            __valuep: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setkey(__key: *const ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn posix_openpt(
            __oflag: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn grantpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn unlockpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ptsname(
            __fd: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn ptsname_r(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __buflen: root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getpt() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getloadavg(
            __loadavg: *mut f64,
            __nelem: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _G_fpos_t {
        pub __pos: root::__off_t,
        pub __state: root::__mbstate_t,
    }
    #[test]
    fn bindgen_test_layout__G_fpos_t() {
        assert_eq!(
            ::std::mem::size_of::<_G_fpos_t>(),
            16usize,
            concat!("Size of: ", stringify!(_G_fpos_t))
        );
        assert_eq!(
            ::std::mem::align_of::<_G_fpos_t>(),
            8usize,
            concat!("Alignment of ", stringify!(_G_fpos_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos_t),
                "::",
                stringify!(__pos)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _
                    as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos_t),
                "::",
                stringify!(__state)
            )
        );
    }
    impl Default for _G_fpos_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _G_fpos64_t {
        pub __pos: root::__off64_t,
        pub __state: root::__mbstate_t,
    }
    #[test]
    fn bindgen_test_layout__G_fpos64_t() {
        assert_eq!(
            ::std::mem::size_of::<_G_fpos64_t>(),
            16usize,
            concat!("Size of: ", stringify!(_G_fpos64_t))
        );
        assert_eq!(
            ::std::mem::align_of::<_G_fpos64_t>(),
            8usize,
            concat!("Alignment of ", stringify!(_G_fpos64_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos64_t),
                "::",
                stringify!(__pos)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _
                    as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos64_t),
                "::",
                stringify!(__state)
            )
        );
    }
    impl Default for _G_fpos64_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_jump_t {
        _unused: [u8; 0],
    }
    pub type _IO_lock_t = ::std::os::raw::c_void;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_marker {
        pub _next: *mut root::_IO_marker,
        pub _sbuf: *mut root::_IO_FILE,
        pub _pos: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout__IO_marker() {
        assert_eq!(
            ::std::mem::size_of::<_IO_marker>(),
            24usize,
            concat!("Size of: ", stringify!(_IO_marker))
        );
        assert_eq!(
            ::std::mem::align_of::<_IO_marker>(),
            8usize,
            concat!("Alignment of ", stringify!(_IO_marker))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_marker>()))._next as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_marker),
                "::",
                stringify!(_next)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_marker>()))._sbuf as *const _
                    as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_marker),
                "::",
                stringify!(_sbuf)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_marker>()))._pos as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_marker),
                "::",
                stringify!(_pos)
            )
        );
    }
    impl Default for _IO_marker {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub const __codecvt_result___codecvt_ok: root::__codecvt_result = 0;
    pub const __codecvt_result___codecvt_partial: root::__codecvt_result = 1;
    pub const __codecvt_result___codecvt_error: root::__codecvt_result = 2;
    pub const __codecvt_result___codecvt_noconv: root::__codecvt_result = 3;
    pub type __codecvt_result = u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_FILE {
        pub _flags: ::std::os::raw::c_int,
        pub _IO_read_ptr: *mut ::std::os::raw::c_char,
        pub _IO_read_end: *mut ::std::os::raw::c_char,
        pub _IO_read_base: *mut ::std::os::raw::c_char,
        pub _IO_write_base: *mut ::std::os::raw::c_char,
        pub _IO_write_ptr: *mut ::std::os::raw::c_char,
        pub _IO_write_end: *mut ::std::os::raw::c_char,
        pub _IO_buf_base: *mut ::std::os::raw::c_char,
        pub _IO_buf_end: *mut ::std::os::raw::c_char,
        pub _IO_save_base: *mut ::std::os::raw::c_char,
        pub _IO_backup_base: *mut ::std::os::raw::c_char,
        pub _IO_save_end: *mut ::std::os::raw::c_char,
        pub _markers: *mut root::_IO_marker,
        pub _chain: *mut root::_IO_FILE,
        pub _fileno: ::std::os::raw::c_int,
        pub _flags2: ::std::os::raw::c_int,
        pub _old_offset: root::__off_t,
        pub _cur_column: ::std::os::raw::c_ushort,
        pub _vtable_offset: ::std::os::raw::c_schar,
        pub _shortbuf: [::std::os::raw::c_char; 1usize],
        pub _lock: *mut root::_IO_lock_t,
        pub _offset: root::__off64_t,
        pub __pad1: *mut ::std::os::raw::c_void,
        pub __pad2: *mut ::std::os::raw::c_void,
        pub __pad3: *mut ::std::os::raw::c_void,
        pub __pad4: *mut ::std::os::raw::c_void,
        pub __pad5: root::size_t,
        pub _mode: ::std::os::raw::c_int,
        pub _unused2: [::std::os::raw::c_char; 20usize],
    }
    #[test]
    fn bindgen_test_layout__IO_FILE() {
        assert_eq!(
            ::std::mem::size_of::<_IO_FILE>(),
            216usize,
            concat!("Size of: ", stringify!(_IO_FILE))
        );
        assert_eq!(
            ::std::mem::align_of::<_IO_FILE>(),
            8usize,
            concat!("Alignment of ", stringify!(_IO_FILE))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_flags)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _
                    as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_ptr)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _
                    as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_end)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _
                    as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_base)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _
                    as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_base)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _
                    as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_ptr)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _
                    as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_end)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _
                    as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_buf_base)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _
                    as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_buf_end)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _
                    as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_save_base)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _
                    as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_backup_base)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _
                    as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_save_end)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _
                    as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_markers)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_chain)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _
                    as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_fileno)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _
                    as usize
            },
            116usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_flags2)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _
                    as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_old_offset)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _
                    as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_cur_column)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _
                    as usize
            },
            130usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_vtable_offset)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _
                    as usize
            },
            131usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_shortbuf)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_lock)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _
                    as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_offset)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_FILE>())).__pad1 as *const _ as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(__pad1)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_FILE>())).__pad2 as *const _ as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(__pad2)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_FILE>())).__pad3 as *const _ as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(__pad3)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_FILE>())).__pad4 as *const _ as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(__pad4)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(__pad5)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_mode)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _
                    as usize
            },
            196usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_unused2)
            )
        );
    }
    impl Default for _IO_FILE {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_FILE_plus {
        _unused: [u8; 0],
    }
    extern "C" {
        pub static mut _IO_2_1_stdin_: root::_IO_FILE_plus;
    }
    extern "C" {
        pub static mut _IO_2_1_stdout_: root::_IO_FILE_plus;
    }
    extern "C" {
        pub static mut _IO_2_1_stderr_: root::_IO_FILE_plus;
    }
    pub type __io_read_fn = ::std::option::Option<
        unsafe extern "C" fn(
            __cookie: *mut ::std::os::raw::c_void,
            __buf: *mut ::std::os::raw::c_char,
            __nbytes: root::size_t,
        ) -> root::__ssize_t,
    >;
    pub type __io_write_fn = ::std::option::Option<
        unsafe extern "C" fn(
            __cookie: *mut ::std::os::raw::c_void,
            __buf: *const ::std::os::raw::c_char,
            __n: root::size_t,
        ) -> root::__ssize_t,
    >;
    pub type __io_seek_fn = ::std::option::Option<
        unsafe extern "C" fn(
            __cookie: *mut ::std::os::raw::c_void,
            __pos: *mut root::__off64_t,
            __w: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
    pub type __io_close_fn = ::std::option::Option<
        unsafe extern "C" fn(
            __cookie: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
    pub type cookie_read_function_t = root::__io_read_fn;
    pub type cookie_write_function_t = root::__io_write_fn;
    pub type cookie_seek_function_t = root::__io_seek_fn;
    pub type cookie_close_function_t = root::__io_close_fn;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _IO_cookie_io_functions_t {
        pub read: root::__io_read_fn,
        pub write: root::__io_write_fn,
        pub seek: root::__io_seek_fn,
        pub close: root::__io_close_fn,
    }
    #[test]
    fn bindgen_test_layout__IO_cookie_io_functions_t() {
        assert_eq!(
            ::std::mem::size_of::<_IO_cookie_io_functions_t>(),
            32usize,
            concat!("Size of: ", stringify!(_IO_cookie_io_functions_t))
        );
        assert_eq!(
            ::std::mem::align_of::<_IO_cookie_io_functions_t>(),
            8usize,
            concat!("Alignment of ", stringify!(_IO_cookie_io_functions_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).read
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_cookie_io_functions_t),
                "::",
                stringify!(read)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).write
                    as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_cookie_io_functions_t),
                "::",
                stringify!(write)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).seek
                    as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_cookie_io_functions_t),
                "::",
                stringify!(seek)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).close
                    as *const _ as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_cookie_io_functions_t),
                "::",
                stringify!(close)
            )
        );
    }
    pub type cookie_io_functions_t = root::_IO_cookie_io_functions_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_cookie_file {
        _unused: [u8; 0],
    }
    extern "C" {
        pub fn _IO_cookie_init(
            __cfile: *mut root::_IO_cookie_file,
            __read_write: ::std::os::raw::c_int,
            __cookie: *mut ::std::os::raw::c_void,
            __fns: root::_IO_cookie_io_functions_t,
        );
    }
    extern "C" {
        pub fn __underflow(arg1: *mut root::_IO_FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __uflow(arg1: *mut root::_IO_FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __overflow(
            arg1: *mut root::_IO_FILE,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _IO_getc(__fp: *mut root::_IO_FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _IO_putc(
            __c: ::std::os::raw::c_int,
            __fp: *mut root::_IO_FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _IO_feof(__fp: *mut root::_IO_FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _IO_ferror(__fp: *mut root::_IO_FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _IO_peekc_locked(
            __fp: *mut root::_IO_FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _IO_flockfile(arg1: *mut root::_IO_FILE);
    }
    extern "C" {
        pub fn _IO_funlockfile(arg1: *mut root::_IO_FILE);
    }
    extern "C" {
        pub fn _IO_ftrylockfile(
            arg1: *mut root::_IO_FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _IO_vfscanf(
            arg1: *mut root::_IO_FILE,
            arg2: *const ::std::os::raw::c_char,
            arg3: *mut root::__va_list_tag,
            arg4: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _IO_vfprintf(
            arg1: *mut root::_IO_FILE,
            arg2: *const ::std::os::raw::c_char,
            arg3: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _IO_padn(
            arg1: *mut root::_IO_FILE,
            arg2: ::std::os::raw::c_int,
            arg3: root::__ssize_t,
        ) -> root::__ssize_t;
    }
    extern "C" {
        pub fn _IO_sgetn(
            arg1: *mut root::_IO_FILE,
            arg2: *mut ::std::os::raw::c_void,
            arg3: root::size_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn _IO_seekoff(
            arg1: *mut root::_IO_FILE,
            arg2: root::__off64_t,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::os::raw::c_int,
        ) -> root::__off64_t;
    }
    extern "C" {
        pub fn _IO_seekpos(
            arg1: *mut root::_IO_FILE,
            arg2: root::__off64_t,
            arg3: ::std::os::raw::c_int,
        ) -> root::__off64_t;
    }
    extern "C" {
        pub fn _IO_free_backup_area(arg1: *mut root::_IO_FILE);
    }
    pub type fpos_t = root::_G_fpos_t;
    pub type fpos64_t = root::_G_fpos64_t;
    extern "C" {
        pub static mut stdin: *mut root::_IO_FILE;
    }
    extern "C" {
        pub static mut stdout: *mut root::_IO_FILE;
    }
    extern "C" {
        pub static mut stderr: *mut root::_IO_FILE;
    }
    extern "C" {
        pub fn remove(
            __filename: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn rename(
            __old: *const ::std::os::raw::c_char,
            __new: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn renameat(
            __oldfd: ::std::os::raw::c_int,
            __old: *const ::std::os::raw::c_char,
            __newfd: ::std::os::raw::c_int,
            __new: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn tmpfile() -> *mut root::FILE;
    }
    extern "C" {
        pub fn tmpfile64() -> *mut root::FILE;
    }
    extern "C" {
        pub fn tmpnam(
            __s: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn tmpnam_r(
            __s: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn tempnam(
            __dir: *const ::std::os::raw::c_char,
            __pfx: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn fclose(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fflush(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fflush_unlocked(
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fcloseall() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fopen(
            __filename: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn freopen(
            __filename: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
            __stream: *mut root::FILE,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn fopen64(
            __filename: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn freopen64(
            __filename: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
            __stream: *mut root::FILE,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn fdopen(
            __fd: ::std::os::raw::c_int,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn fopencookie(
            __magic_cookie: *mut ::std::os::raw::c_void,
            __modes: *const ::std::os::raw::c_char,
            __io_funcs: root::_IO_cookie_io_functions_t,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn fmemopen(
            __s: *mut ::std::os::raw::c_void,
            __len: root::size_t,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn open_memstream(
            __bufloc: *mut *mut ::std::os::raw::c_char,
            __sizeloc: *mut root::size_t,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn setbuf(
            __stream: *mut root::FILE,
            __buf: *mut ::std::os::raw::c_char,
        );
    }
    extern "C" {
        pub fn setvbuf(
            __stream: *mut root::FILE,
            __buf: *mut ::std::os::raw::c_char,
            __modes: ::std::os::raw::c_int,
            __n: root::size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setbuffer(
            __stream: *mut root::FILE,
            __buf: *mut ::std::os::raw::c_char,
            __size: root::size_t,
        );
    }
    extern "C" {
        pub fn setlinebuf(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn fprintf(
            __stream: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn printf(
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sprintf(
            __s: *mut ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vfprintf(
            __s: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vprintf(
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vsprintf(
            __s: *mut ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn snprintf(
            __s: *mut ::std::os::raw::c_char,
            __maxlen: root::size_t,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vsnprintf(
            __s: *mut ::std::os::raw::c_char,
            __maxlen: root::size_t,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vasprintf(
            __ptr: *mut *mut ::std::os::raw::c_char,
            __f: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __asprintf(
            __ptr: *mut *mut ::std::os::raw::c_char,
            __fmt: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn asprintf(
            __ptr: *mut *mut ::std::os::raw::c_char,
            __fmt: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vdprintf(
            __fd: ::std::os::raw::c_int,
            __fmt: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn dprintf(
            __fd: ::std::os::raw::c_int,
            __fmt: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fscanf(
            __stream: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn scanf(
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sscanf(
            __s: *const ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vfscanf(
            __s: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vscanf(
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vsscanf(
            __s: *const ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fgetc(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getc(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getchar() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getc_unlocked(
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getchar_unlocked() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fgetc_unlocked(
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fputc(
            __c: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putc(
            __c: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fputc_unlocked(
            __c: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putc_unlocked(
            __c: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putchar_unlocked(
            __c: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getw(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putw(
            __w: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fgets(
            __s: *mut ::std::os::raw::c_char,
            __n: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn fgets_unlocked(
            __s: *mut ::std::os::raw::c_char,
            __n: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn __getdelim(
            __lineptr: *mut *mut ::std::os::raw::c_char,
            __n: *mut root::size_t,
            __delimiter: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> root::__ssize_t;
    }
    extern "C" {
        pub fn getdelim(
            __lineptr: *mut *mut ::std::os::raw::c_char,
            __n: *mut root::size_t,
            __delimiter: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> root::__ssize_t;
    }
    extern "C" {
        pub fn getline(
            __lineptr: *mut *mut ::std::os::raw::c_char,
            __n: *mut root::size_t,
            __stream: *mut root::FILE,
        ) -> root::__ssize_t;
    }
    extern "C" {
        pub fn fputs(
            __s: *const ::std::os::raw::c_char,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn puts(
            __s: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ungetc(
            __c: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fread(
            __ptr: *mut ::std::os::raw::c_void,
            __size: root::size_t,
            __n: root::size_t,
            __stream: *mut root::FILE,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn fwrite(
            __ptr: *const ::std::os::raw::c_void,
            __size: root::size_t,
            __n: root::size_t,
            __s: *mut root::FILE,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn fputs_unlocked(
            __s: *const ::std::os::raw::c_char,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fread_unlocked(
            __ptr: *mut ::std::os::raw::c_void,
            __size: root::size_t,
            __n: root::size_t,
            __stream: *mut root::FILE,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn fwrite_unlocked(
            __ptr: *const ::std::os::raw::c_void,
            __size: root::size_t,
            __n: root::size_t,
            __stream: *mut root::FILE,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn fseek(
            __stream: *mut root::FILE,
            __off: ::std::os::raw::c_long,
            __whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ftell(__stream: *mut root::FILE) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn rewind(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn fseeko(
            __stream: *mut root::FILE,
            __off: root::__off_t,
            __whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ftello(__stream: *mut root::FILE) -> root::__off_t;
    }
    extern "C" {
        pub fn fgetpos(
            __stream: *mut root::FILE,
            __pos: *mut root::fpos_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fsetpos(
            __stream: *mut root::FILE,
            __pos: *const root::fpos_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fseeko64(
            __stream: *mut root::FILE,
            __off: root::__off64_t,
            __whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ftello64(__stream: *mut root::FILE) -> root::__off64_t;
    }
    extern "C" {
        pub fn fgetpos64(
            __stream: *mut root::FILE,
            __pos: *mut root::fpos64_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fsetpos64(
            __stream: *mut root::FILE,
            __pos: *const root::fpos64_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clearerr(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn feof(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ferror(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clearerr_unlocked(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn feof_unlocked(
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ferror_unlocked(
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn perror(__s: *const ::std::os::raw::c_char);
    }
    extern "C" {
        pub static mut sys_nerr: ::std::os::raw::c_int;
    }
    extern "C" {
        pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
    }
    extern "C" {
        pub static mut _sys_nerr: ::std::os::raw::c_int;
    }
    extern "C" {
        pub static mut _sys_errlist: [*const ::std::os::raw::c_char; 0usize];
    }
    extern "C" {
        pub fn fileno(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fileno_unlocked(
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn popen(
            __command: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn pclose(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ctermid(
            __s: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn cuserid(
            __s: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct obstack {
        _unused: [u8; 0],
    }
    extern "C" {
        pub fn obstack_printf(
            __obstack: *mut root::obstack,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn obstack_vprintf(
            __obstack: *mut root::obstack,
            __format: *const ::std::os::raw::c_char,
            __args: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn flockfile(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn ftrylockfile(__stream: *mut root::FILE)
            -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn funlockfile(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn __errno_location() -> *mut ::std::os::raw::c_int;
    }
    extern "C" {
        pub static mut program_invocation_name: *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub static mut program_invocation_short_name:
            *mut ::std::os::raw::c_char;
    }
    pub type error_t = ::std::os::raw::c_int;
    pub type wctype_t = ::std::os::raw::c_ulong;
    pub const __ISwupper: root::_bindgen_ty_46 = 0;
    pub const __ISwlower: root::_bindgen_ty_46 = 1;
    pub const __ISwalpha: root::_bindgen_ty_46 = 2;
    pub const __ISwdigit: root::_bindgen_ty_46 = 3;
    pub const __ISwxdigit: root::_bindgen_ty_46 = 4;
    pub const __ISwspace: root::_bindgen_ty_46 = 5;
    pub const __ISwprint: root::_bindgen_ty_46 = 6;
    pub const __ISwgraph: root::_bindgen_ty_46 = 7;
    pub const __ISwblank: root::_bindgen_ty_46 = 8;
    pub const __ISwcntrl: root::_bindgen_ty_46 = 9;
    pub const __ISwpunct: root::_bindgen_ty_46 = 10;
    pub const __ISwalnum: root::_bindgen_ty_46 = 11;
    pub const _ISwupper: root::_bindgen_ty_46 = 16777216;
    pub const _ISwlower: root::_bindgen_ty_46 = 33554432;
    pub const _ISwalpha: root::_bindgen_ty_46 = 67108864;
    pub const _ISwdigit: root::_bindgen_ty_46 = 134217728;
    pub const _ISwxdigit: root::_bindgen_ty_46 = 268435456;
    pub const _ISwspace: root::_bindgen_ty_46 = 536870912;
    pub const _ISwprint: root::_bindgen_ty_46 = 1073741824;
    pub const _ISwgraph: root::_bindgen_ty_46 = -2147483648;
    pub const _ISwblank: root::_bindgen_ty_46 = 65536;
    pub const _ISwcntrl: root::_bindgen_ty_46 = 131072;
    pub const _ISwpunct: root::_bindgen_ty_46 = 262144;
    pub const _ISwalnum: root::_bindgen_ty_46 = 524288;
    pub type _bindgen_ty_46 = i32;
    extern "C" {
        pub fn iswalnum(__wc: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswalpha(__wc: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswcntrl(__wc: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswdigit(__wc: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswgraph(__wc: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswlower(__wc: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswprint(__wc: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswpunct(__wc: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswspace(__wc: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswupper(__wc: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswxdigit(__wc: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswblank(__wc: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wctype(
            __property: *const ::std::os::raw::c_char,
        ) -> root::wctype_t;
    }
    extern "C" {
        pub fn iswctype(
            __wc: root::wint_t,
            __desc: root::wctype_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn towlower(__wc: root::wint_t) -> root::wint_t;
    }
    extern "C" {
        pub fn towupper(__wc: root::wint_t) -> root::wint_t;
    }
    pub type wctrans_t = *const root::__int32_t;
    extern "C" {
        pub fn wctrans(
            __property: *const ::std::os::raw::c_char,
        ) -> root::wctrans_t;
    }
    extern "C" {
        pub fn towctrans(
            __wc: root::wint_t,
            __desc: root::wctrans_t,
        ) -> root::wint_t;
    }
    extern "C" {
        pub fn iswalnum_l(
            __wc: root::wint_t,
            __locale: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswalpha_l(
            __wc: root::wint_t,
            __locale: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswcntrl_l(
            __wc: root::wint_t,
            __locale: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswdigit_l(
            __wc: root::wint_t,
            __locale: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswgraph_l(
            __wc: root::wint_t,
            __locale: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswlower_l(
            __wc: root::wint_t,
            __locale: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswprint_l(
            __wc: root::wint_t,
            __locale: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswpunct_l(
            __wc: root::wint_t,
            __locale: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswspace_l(
            __wc: root::wint_t,
            __locale: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswupper_l(
            __wc: root::wint_t,
            __locale: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswxdigit_l(
            __wc: root::wint_t,
            __locale: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswblank_l(
            __wc: root::wint_t,
            __locale: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wctype_l(
            __property: *const ::std::os::raw::c_char,
            __locale: root::locale_t,
        ) -> root::wctype_t;
    }
    extern "C" {
        pub fn iswctype_l(
            __wc: root::wint_t,
            __desc: root::wctype_t,
            __locale: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn towlower_l(
            __wc: root::wint_t,
            __locale: root::locale_t,
        ) -> root::wint_t;
    }
    extern "C" {
        pub fn towupper_l(
            __wc: root::wint_t,
            __locale: root::locale_t,
        ) -> root::wint_t;
    }
    extern "C" {
        pub fn wctrans_l(
            __property: *const ::std::os::raw::c_char,
            __locale: root::locale_t,
        ) -> root::wctrans_t;
    }
    extern "C" {
        pub fn towctrans_l(
            __wc: root::wint_t,
            __desc: root::wctrans_t,
            __locale: root::locale_t,
        ) -> root::wint_t;
    }
    #[cfg(feature = "frontend")]
    #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "frontend")))]
    extern "C" {
        #[link_name = "\u{1}_Z12parseCLIArgsB5cxx11iPPc"]
        pub fn parseCLIArgs(
            argc: ::std::os::raw::c_int,
            argv: *mut *mut ::std::os::raw::c_char,
        ) -> root::std::vector;
    }
    #[cfg(feature = "grader")]
    #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "grader")))]
    extern "C" {
        pub static mut tests: root::std::vector;
    }
    #[cfg(feature = "grader")]
    #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "grader")))]
    extern "C" {
        pub static mut verify_count: u32;
    }
    #[cfg(feature = "grader")]
    #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "grader")))]
    extern "C" {
        pub static mut verify_valid: u32;
    }
    #[repr(C)]
    #[cfg(feature = "grader")]
    #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "grader")))]
    pub struct BufferedPrinter {
        pub _base: root::lc3::utils::IPrinter,
        pub display_buffer: root::std::vector,
        pub print_output: bool,
    }
    #[test]
    #[cfg(feature = "grader")]
    #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "grader")))]
    fn bindgen_test_layout_BufferedPrinter() {
        assert_eq!(
            ::std::mem::size_of::<BufferedPrinter>(),
            40usize,
            concat!("Size of: ", stringify!(BufferedPrinter))
        );
        assert_eq!(
            ::std::mem::align_of::<BufferedPrinter>(),
            8usize,
            concat!("Alignment of ", stringify!(BufferedPrinter))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<BufferedPrinter>())).display_buffer
                    as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(BufferedPrinter),
                "::",
                stringify!(display_buffer)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<BufferedPrinter>())).print_output
                    as *const _ as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(BufferedPrinter),
                "::",
                stringify!(print_output)
            )
        );
    }
    #[cfg(feature = "grader")]
    #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "grader")))]
    impl Default for BufferedPrinter {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[cfg(feature = "grader")]
    #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "grader")))]
    extern "C" {
        #[link_name = "\u{1}_ZN15BufferedPrinter5printERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn BufferedPrinter_print(
            this: *mut ::std::os::raw::c_void,
            string: *const root::std::string,
        );
    }
    #[cfg(feature = "grader")]
    #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "grader")))]
    extern "C" {
        #[link_name = "\u{1}_ZN15BufferedPrinter7newlineEv"]
        pub fn BufferedPrinter_newline(this: *mut ::std::os::raw::c_void);
    }
    #[repr(C)]
    #[cfg(feature = "grader")]
    #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "grader")))]
    pub struct StringInputter {
        pub _base: root::lc3::utils::IInputter,
        pub source: root::std::string,
        pub pos: u32,
        pub inst_delay: u32,
    }
    #[test]
    #[cfg(feature = "grader")]
    #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "grader")))]
    fn bindgen_test_layout_StringInputter() {
        assert_eq!(
            ::std::mem::size_of::<StringInputter>(),
            48usize,
            concat!("Size of: ", stringify!(StringInputter))
        );
        assert_eq!(
            ::std::mem::align_of::<StringInputter>(),
            8usize,
            concat!("Alignment of ", stringify!(StringInputter))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<StringInputter>())).source as *const _
                    as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(StringInputter),
                "::",
                stringify!(source)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<StringInputter>())).pos as *const _
                    as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(StringInputter),
                "::",
                stringify!(pos)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<StringInputter>())).inst_delay
                    as *const _ as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(StringInputter),
                "::",
                stringify!(inst_delay)
            )
        );
    }
    #[cfg(feature = "grader")]
    #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "grader")))]
    extern "C" {
        #[link_name = "\u{1}_ZN14StringInputter14setStringAfterERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj"]
        pub fn StringInputter_setStringAfter(
            this: *mut root::StringInputter,
            source: *const root::std::string,
            inst_count: u32,
        );
    }
    #[cfg(feature = "grader")]
    #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "grader")))]
    impl Default for StringInputter {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[cfg(feature = "grader")]
    #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "grader")))]
    impl StringInputter {
        #[inline]
        pub unsafe fn setStringAfter(
            &mut self,
            source: *const root::std::string,
            inst_count: u32,
        ) {
            StringInputter_setStringAfter(self, source, inst_count)
        }
    }
    #[cfg(feature = "grader")]
    #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "grader")))]
    extern "C" {
        #[link_name = "\u{1}_ZN14StringInputter7getCharERc"]
        pub fn StringInputter_getChar(
            this: *mut ::std::os::raw::c_void,
            c: *mut ::std::os::raw::c_char,
        ) -> bool;
    }
    #[repr(C)]
    #[cfg(feature = "grader")]
    #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "grader")))]
    pub struct TestCase {
        pub name: root::std::string,
        pub test_func: [u64; 4usize],
        pub points: u32,
        pub randomize: bool,
    }
    #[test]
    #[cfg(feature = "grader")]
    #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "grader")))]
    fn bindgen_test_layout_TestCase() {
        assert_eq!(
            ::std::mem::size_of::<TestCase>(),
            72usize,
            concat!("Size of: ", stringify!(TestCase))
        );
        assert_eq!(
            ::std::mem::align_of::<TestCase>(),
            8usize,
            concat!("Alignment of ", stringify!(TestCase))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<TestCase>())).name as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TestCase),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<TestCase>())).test_func as *const _
                    as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(TestCase),
                "::",
                stringify!(test_func)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<TestCase>())).points as *const _ as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(TestCase),
                "::",
                stringify!(points)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<TestCase>())).randomize as *const _
                    as usize
            },
            68usize,
            concat!(
                "Offset of field: ",
                stringify!(TestCase),
                "::",
                stringify!(randomize)
            )
        );
    }
    #[cfg(feature = "grader")]
    #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "grader")))]
    impl Default for TestCase {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[cfg(feature = "grader")]
    #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "grader")))]
    extern "C" {
        #[link_name = "\u{1}_Z13outputCompareRKN3lc35utils8IPrinterENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"]
        pub fn outputCompare(
            printer: *const root::lc3::utils::IPrinter,
            check: root::std::string,
            substr: bool,
        ) -> bool;
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_1 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_2 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_3 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_4 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_5 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_6 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_7 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_8 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_9 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_10 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_11 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_12 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_13 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_14 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_15 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_16 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_17 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_18 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_19 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_20 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_21 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_22 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_23 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_24 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_25 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_26 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_27 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_28 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_29 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_30 {
        pub _address: u8,
    }
    #[test]
    fn __bindgen_test_layout_iterator_open0_output_iterator_tag_void_void_void_void_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_iterator_open0_output_iterator_tag_void_void_void_void_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_iterator_open0_output_iterator_tag_void_void_void_void_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_31 {
        pub _address: u8,
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::std::basic_string<::std::os::raw::c_char>,
            >(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<::std::os::raw::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::std::basic_string<::std::os::raw::c_char>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<::std::os::raw::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_string<u32>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_string<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char16_t_char_traits_open1_char16_t_close1_allocator_open1_char16_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_string<u16>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<u16>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_string<u16>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<u16>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char16_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char16_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char32_t_char_traits_open1_char32_t_close1_allocator_open1_char32_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_string<u32>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_string<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char32_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char32_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    pub type __builtin_va_list = [root::__va_list_tag; 1usize];
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __va_list_tag {
        pub gp_offset: ::std::os::raw::c_uint,
        pub fp_offset: ::std::os::raw::c_uint,
        pub overflow_arg_area: *mut ::std::os::raw::c_void,
        pub reg_save_area: *mut ::std::os::raw::c_void,
    }
    #[test]
    fn bindgen_test_layout___va_list_tag() {
        assert_eq!(
            ::std::mem::size_of::<__va_list_tag>(),
            24usize,
            concat!("Size of: ", stringify!(__va_list_tag))
        );
        assert_eq!(
            ::std::mem::align_of::<__va_list_tag>(),
            8usize,
            concat!("Alignment of ", stringify!(__va_list_tag))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(gp_offset)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _
                    as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(fp_offset)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area
                    as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(overflow_arg_area)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area
                    as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(reg_save_area)
            )
        );
    }
    impl Default for __va_list_tag {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct __locale_data {
        pub _address: u8,
    }
    #[test]
    fn __bindgen_test_layout_basic_ios_open0_char_char_traits_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_ios<::std::os::raw::c_char>>(
            ),
            264usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_ios<::std::os::raw::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_ios<::std::os::raw::c_char>>(
            ),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_ios<::std::os::raw::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_streambuf_open0_char_char_traits_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::std::basic_streambuf<::std::os::raw::c_char>,
            >(),
            64usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_streambuf<::std::os::raw::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::std::basic_streambuf<::std::os::raw::c_char>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_streambuf<::std::os::raw::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_2() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_istream_open0_char_char_traits_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::std::basic_istream<::std::os::raw::c_char>,
            >(),
            280usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_istream<::std::os::raw::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::std::basic_istream<::std::os::raw::c_char>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_istream<::std::os::raw::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_3() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_ostream_open0_char_char_traits_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::std::basic_ostream<::std::os::raw::c_char>,
            >(),
            272usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_ostream<::std::os::raw::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::std::basic_ostream<::std::os::raw::c_char>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_ostream<::std::os::raw::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_4() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_iostream_open0_char_char_traits_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::std::basic_iostream<::std::os::raw::c_char>,
            >(),
            288usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_iostream<::std::os::raw::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::std::basic_iostream<::std::os::raw::c_char>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_iostream<::std::os::raw::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_5() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_stringbuf_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::std::basic_stringbuf<::std::os::raw::c_char>,
            >(),
            104usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_stringbuf<::std::os::raw::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::std::basic_stringbuf<::std::os::raw::c_char>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_stringbuf<::std::os::raw::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_6() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_istringstream_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::std::basic_istringstream<::std::os::raw::c_char>,
            >(),
            384usize,
            concat!(
                "Size of template specialization: ",
                stringify!(
                    root::std::basic_istringstream<::std::os::raw::c_char>
                )
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::std::basic_istringstream<::std::os::raw::c_char>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(
                    root::std::basic_istringstream<::std::os::raw::c_char>
                )
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_7() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_2() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_ostringstream_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::std::basic_ostringstream<::std::os::raw::c_char>,
            >(),
            376usize,
            concat!(
                "Size of template specialization: ",
                stringify!(
                    root::std::basic_ostringstream<::std::os::raw::c_char>
                )
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::std::basic_ostringstream<::std::os::raw::c_char>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(
                    root::std::basic_ostringstream<::std::os::raw::c_char>
                )
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_8() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_3() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_stringstream_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::std::basic_stringstream<::std::os::raw::c_char>,
            >(),
            392usize,
            concat!(
                "Size of template specialization: ",
                stringify!(
                    root::std::basic_stringstream<::std::os::raw::c_char>
                )
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::std::basic_stringstream<::std::os::raw::c_char>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(
                    root::std::basic_stringstream<::std::os::raw::c_char>
                )
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_9() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_4() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_filebuf_open0_char_char_traits_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::std::basic_filebuf<::std::os::raw::c_char>,
            >(),
            240usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_filebuf<::std::os::raw::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::std::basic_filebuf<::std::os::raw::c_char>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_filebuf<::std::os::raw::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_10() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_ifstream_open0_char_char_traits_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::std::basic_ifstream<::std::os::raw::c_char>,
            >(),
            520usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_ifstream<::std::os::raw::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::std::basic_ifstream<::std::os::raw::c_char>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_ifstream<::std::os::raw::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_11() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_ofstream_open0_char_char_traits_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::std::basic_ofstream<::std::os::raw::c_char>,
            >(),
            512usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_ofstream<::std::os::raw::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::std::basic_ofstream<::std::os::raw::c_char>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_ofstream<::std::os::raw::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_12() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_fstream_open0_char_char_traits_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::std::basic_fstream<::std::os::raw::c_char>,
            >(),
            528usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_fstream<::std::os::raw::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::std::basic_fstream<::std::os::raw::c_char>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_fstream<::std::os::raw::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_13() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_ios_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_ios<u32>>(),
            264usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_ios<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_ios<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_ios<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_1()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_streambuf_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_streambuf<u32>>(),
            64usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_streambuf<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_streambuf<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_streambuf<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_2()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_istream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_istream<u32>>(),
            280usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_istream<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_istream<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_istream<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_3()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_ostream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_ostream<u32>>(),
            272usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_ostream<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_ostream<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_ostream<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_4()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_iostream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_iostream<u32>>(),
            288usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_iostream<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_iostream<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_iostream<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_5()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_stringbuf_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_stringbuf<u32>>(),
            104usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_stringbuf<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_stringbuf<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_stringbuf<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_6()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_istringstream_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_istringstream<u32>>(),
            384usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_istringstream<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_istringstream<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_istringstream<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_7()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_2() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_ostringstream_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_ostringstream<u32>>(),
            376usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_ostringstream<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_ostringstream<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_ostringstream<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_8()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_3() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_stringstream_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_stringstream<u32>>(),
            392usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_stringstream<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_stringstream<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_stringstream<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_9()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_4() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_filebuf_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_filebuf<u32>>(),
            240usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_filebuf<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_filebuf<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_filebuf<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_10()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_ifstream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_ifstream<u32>>(),
            520usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_ifstream<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_ifstream<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_ifstream<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_11()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_ofstream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_ofstream<u32>>(),
            512usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_ofstream<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_ofstream<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_ofstream<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_12()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_fstream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_fstream<u32>>(),
            528usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_fstream<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_fstream<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_fstream<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_13()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_istream_open0_char_char_traits_open1_char_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::std::basic_istream<::std::os::raw::c_char>,
            >(),
            280usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_istream<::std::os::raw::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::std::basic_istream<::std::os::raw::c_char>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_istream<::std::os::raw::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_14() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::std::basic_string<::std::os::raw::c_char>,
            >(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<::std::os::raw::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::std::basic_string<::std::os::raw::c_char>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<::std::os::raw::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_15() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_5() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_istream_open0_char_char_traits_open1_char_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::std::basic_istream<::std::os::raw::c_char>,
            >(),
            280usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_istream<::std::os::raw::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::std::basic_istream<::std::os::raw::c_char>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_istream<::std::os::raw::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_16() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_istream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_istream<u32>>(),
            280usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_istream<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_istream<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_istream<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_14()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_string<u32>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_string<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_15()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_5() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_istream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_istream<u32>>(),
            280usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_istream<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_istream<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_istream<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_16()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_hash_open0_long_double_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::hash>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::hash)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::hash>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::hash)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::std::basic_string<::std::os::raw::c_char>,
            >(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<::std::os::raw::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::std::basic_string<::std::os::raw::c_char>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<::std::os::raw::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_17() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_6() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_hash_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::hash>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::hash)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::hash>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::hash)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_3(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::std::basic_string<::std::os::raw::c_char>,
            >(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<::std::os::raw::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::std::basic_string<::std::os::raw::c_char>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<::std::os::raw::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_18() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_7() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_string<u32>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_string<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_17()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_6() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_hash_open0_basic_string_open1_wchar_t_char_traits_open2_wchar_t_close2_allocator_open2_wchar_t_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::hash>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::hash)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::hash>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::hash)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation_3(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_string<u32>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_string<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_18()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_7() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char16_t_char_traits_open1_char16_t_close1_allocator_open1_char16_t_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_string<u16>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<u16>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_string<u16>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<u16>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char16_t_close0_instantiation_1()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char16_t_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_hash_open0_basic_string_open1_char16_t_char_traits_open2_char16_t_close2_allocator_open2_char16_t_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::hash>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::hash)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::hash>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::hash)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char16_t_char_traits_open1_char16_t_close1_allocator_open1_char16_t_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_string<u16>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<u16>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_string<u16>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<u16>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char16_t_close0_instantiation_2()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char16_t_close0_instantiation_2() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char32_t_char_traits_open1_char32_t_close1_allocator_open1_char32_t_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_string<u32>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_string<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char32_t_close0_instantiation_1()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char32_t_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_hash_open0_basic_string_open1_char32_t_char_traits_open2_char32_t_close2_allocator_open2_char32_t_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::hash>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::hash)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::hash>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::hash)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char32_t_char_traits_open1_char32_t_close1_allocator_open1_char32_t_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_string<u32>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_string<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char32_t_close0_instantiation_2()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char32_t_close0_instantiation_2() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_19() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_8() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_19()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_8() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_4(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::std::basic_string<::std::os::raw::c_char>,
            >(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<::std::os::raw::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::std::basic_string<::std::os::raw::c_char>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<::std::os::raw::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_20() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_9() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_43 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_44 {
        pub _address: u8,
    }
    #[test]
    fn __bindgen_test_layout_iterator_open0_output_iterator_tag_void_void_void_void_close0_instantiation_3(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_45 {
        pub _address: u8,
    }
    #[test]
    fn __bindgen_test_layout_shared_ptr_open0_IOperand_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::shared_ptr>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::shared_ptr)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::shared_ptr>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::shared_ptr)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_shared_ptr_open0_IInstruction_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::shared_ptr>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::shared_ptr)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::shared_ptr>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::shared_ptr)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_uint32_t_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_unsigned_int_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_5(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::std::basic_string<::std::os::raw::c_char>,
            >(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<::std::os::raw::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::std::basic_string<::std::os::raw::c_char>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<::std::os::raw::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_21() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_10() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_unsigned_int_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_pair_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_unsigned_int_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::std::pair<
                    root::std::basic_string<::std::os::raw::c_char>,
                    ::std::os::raw::c_uint,
                >,
            >(),
            40usize,
            concat!(
                "Size of template specialization: ",
                stringify!(
                    root::std::pair<
                        root::std::basic_string<::std::os::raw::c_char>,
                        ::std::os::raw::c_uint,
                    >
                )
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::std::pair<
                    root::std::basic_string<::std::os::raw::c_char>,
                    ::std::os::raw::c_uint,
                >,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(
                    root::std::pair<
                        root::std::basic_string<::std::os::raw::c_char>,
                        ::std::os::raw::c_uint,
                    >
                )
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_6(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::std::basic_string<::std::os::raw::c_char>,
            >(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<::std::os::raw::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::std::basic_string<::std::os::raw::c_char>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<::std::os::raw::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_22() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_11() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_iterator_open0_random_access_iterator_tag_bool__long_ptr_bool_ref_bool_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
    }
    pub type iterator = root::std::_Bit_iterator;
    #[test]
    fn __bindgen_test_layout_basic_streambuf_open0_char_char_traits_open1_char_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::std::basic_streambuf<::std::os::raw::c_char>,
            >(),
            64usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_streambuf<::std::os::raw::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::std::basic_streambuf<::std::os::raw::c_char>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_streambuf<::std::os::raw::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_23() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_streambuf_open0_char_char_traits_open1_char_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::std::basic_streambuf<::std::os::raw::c_char>,
            >(),
            64usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_streambuf<::std::os::raw::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::std::basic_streambuf<::std::os::raw::c_char>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_streambuf<::std::os::raw::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_24() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_streambuf_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_streambuf<u32>>(),
            64usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_streambuf<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_streambuf<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_streambuf<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_20()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_streambuf_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_streambuf<u32>>(),
            64usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_streambuf<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_streambuf<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_streambuf<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_21()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_25() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_22()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_iterator_open0_output_iterator_tag_void_void_void_void_close0_instantiation_4(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_26() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_27() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_23()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_24()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_28() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_25()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_29() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_26()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_30() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_31() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_27()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_28()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_optional_open0_StatementPiece_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::lc3::optional<root::lc3::core::asmbl::StatementPiece>,
            >(),
            64usize,
            concat!(
                "Size of template specialization: ",
                stringify!(
                    root::lc3::optional<root::lc3::core::asmbl::StatementPiece>
                )
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::lc3::optional<root::lc3::core::asmbl::StatementPiece>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(
                    root::lc3::optional<root::lc3::core::asmbl::StatementPiece>
                )
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_optional_open0_StatementPiece_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::lc3::optional<root::lc3::core::asmbl::StatementPiece>,
            >(),
            64usize,
            concat!(
                "Size of template specialization: ",
                stringify!(
                    root::lc3::optional<root::lc3::core::asmbl::StatementPiece>
                )
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::lc3::optional<root::lc3::core::asmbl::StatementPiece>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(
                    root::lc3::optional<root::lc3::core::asmbl::StatementPiece>
                )
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_StatementPiece_allocator_open1_StatementPiece_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_StatementPiece_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_32() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_12() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_33() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_13() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_34() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_14() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_35() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_15() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_29()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_9() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_30()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_10() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_31()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_11() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_32()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_12() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_47 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _bindgen_ty_48 {
        pub _address: u8,
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_MemEntry_allocator_open1_MemEntry_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_MemEntry_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_stack_open0_MachineState_SysCallType_deque_open1_MachineState_SysCallType_allocator_open2_MachineState_SysCallType_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::stack<root::std::deque>>(),
            80usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::stack<root::std::deque>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::stack<root::std::deque>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::stack<root::std::deque>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_deque_open0_MachineState_SysCallType_allocator_open1_MachineState_SysCallType_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::deque>(),
            80usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::deque)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::deque>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::deque)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_MachineState_SysCallType_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_PIOperand_allocator_open1_shared_ptr_open2_IOperand_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_shared_ptr_open1_IOperand_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_shared_ptr_open0_IOperand_close0_instantiation_1()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::shared_ptr>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::shared_ptr)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::shared_ptr>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::shared_ptr)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_PIOperand_allocator_open1_shared_ptr_open2_IOperand_close2_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_shared_ptr_open1_IOperand_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_shared_ptr_open0_IOperand_close0_instantiation_2()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::shared_ptr>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::shared_ptr)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::shared_ptr>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::shared_ptr)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_PIInstruction_allocator_open1_shared_ptr_open2_IInstruction_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_shared_ptr_open1_IInstruction_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_shared_ptr_open0_IInstruction_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::shared_ptr>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::shared_ptr)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::shared_ptr>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::shared_ptr)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_vector_open1_PIInstruction_allocator_open2_shared_ptr_open3_IInstruction_close3_close2_close1_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_vector_open3_shared_ptr_open4_IInstruction_close4_allocator_open4_shared_ptr_open5_IInstruction_close5_close4_close3_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_PIInstruction_allocator_open1_shared_ptr_open2_IInstruction_close2_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_shared_ptr_open1_IInstruction_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_shared_ptr_open0_IInstruction_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::shared_ptr>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::shared_ptr)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::shared_ptr>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::shared_ptr)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_7(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::std::basic_string<::std::os::raw::c_char>,
            >(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<::std::os::raw::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::std::basic_string<::std::os::raw::c_char>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<::std::os::raw::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_36() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_16() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_vector_open2_shared_ptr_open3_IInstruction_close3_allocator_open3_shared_ptr_open4_IInstruction_close4_close3_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_pair_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_vector_open1_shared_ptr_open2_IInstruction_close2_allocator_open2_shared_ptr_open3_IInstruction_close3_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::std::pair<
                    root::std::basic_string<::std::os::raw::c_char>,
                    root::std::vector,
                >,
            >(),
            56usize,
            concat!(
                "Size of template specialization: ",
                stringify!(
                    root::std::pair<
                        root::std::basic_string<::std::os::raw::c_char>,
                        root::std::vector,
                    >
                )
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::std::pair<
                    root::std::basic_string<::std::os::raw::c_char>,
                    root::std::vector,
                >,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(
                    root::std::pair<
                        root::std::basic_string<::std::os::raw::c_char>,
                        root::std::vector,
                    >
                )
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_8(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::std::basic_string<::std::os::raw::c_char>,
            >(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<::std::os::raw::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::std::basic_string<::std::os::raw::c_char>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<::std::os::raw::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_37() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_17() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_shared_ptr_open1_IInstruction_close1_allocator_open1_shared_ptr_open2_IInstruction_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_shared_ptr_open0_IInstruction_close0_instantiation_3(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::shared_ptr>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::shared_ptr)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::shared_ptr>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::shared_ptr)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_shared_ptr_open1_IInstruction_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_shared_ptr_open0_IInstruction_close0_instantiation_4(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::shared_ptr>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::shared_ptr)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::shared_ptr>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::shared_ptr)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout___basic_file_open0_char_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::__basic_file>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__basic_file)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__basic_file>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__basic_file)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_38() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_39() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_40() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_41() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_33()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_34()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_35()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_36()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_9(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::std::basic_string<::std::os::raw::c_char>,
            >(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<::std::os::raw::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::std::basic_string<::std::os::raw::c_char>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<::std::os::raw::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_42() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_18() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_MemEntry_allocator_open1_MemEntry_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_MemEntry_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_uint32_t_vector_open1_PIInstruction_allocator_open2_shared_ptr_open3_IInstruction_close3_close2_close1_less_open1_unsigned_int_close1_allocator_open1_pair_open2_const_unsigned_int_vector_open3_shared_ptr_open4_IInstruction_close4_allocator_open4_shared_ptr_open5_IInstruction_close5_close4_close3_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_PIInstruction_allocator_open1_shared_ptr_open2_IInstruction_close2_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_shared_ptr_open1_IInstruction_close1_close0_instantiation_3(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_shared_ptr_open0_IInstruction_close0_instantiation_5(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::shared_ptr>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::shared_ptr)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::shared_ptr>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::shared_ptr)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_unsigned_int_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_const_unsigned_int_vector_open2_shared_ptr_open3_IInstruction_close3_allocator_open3_shared_ptr_open4_IInstruction_close4_close3_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_shared_ptr_open1_IInstruction_close1_allocator_open1_shared_ptr_open2_IInstruction_close2_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_shared_ptr_open0_IInstruction_close0_instantiation_6(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::shared_ptr>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::shared_ptr)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::shared_ptr>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::shared_ptr)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_shared_ptr_open1_IInstruction_close1_close0_instantiation_4(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_shared_ptr_open0_IInstruction_close0_instantiation_7(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::shared_ptr>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::shared_ptr)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::shared_ptr>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::shared_ptr)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_bool__close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<bool>>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<bool>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<bool>>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<bool>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_char_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<::std::os::raw::c_char>>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<::std::os::raw::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<::std::os::raw::c_char>>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<::std::os::raw::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_signed_char_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<::std::os::raw::c_schar>>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<::std::os::raw::c_schar>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<::std::os::raw::c_schar>>(
            ),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<::std::os::raw::c_schar>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_unsigned_char_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<::std::os::raw::c_uchar>>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<::std::os::raw::c_uchar>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<::std::os::raw::c_uchar>>(
            ),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<::std::os::raw::c_uchar>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_short_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<::std::os::raw::c_short>>(),
            2usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<::std::os::raw::c_short>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<::std::os::raw::c_short>>(
            ),
            2usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<::std::os::raw::c_short>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_unsigned_short_close0_instantiation()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<::std::os::raw::c_ushort>>(
            ),
            2usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<::std::os::raw::c_ushort>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<::std::os::raw::c_ushort>>(
            ),
            2usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<::std::os::raw::c_ushort>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_int_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<::std::os::raw::c_int>>(),
            4usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<::std::os::raw::c_int>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<::std::os::raw::c_int>>(),
            4usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<::std::os::raw::c_int>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_unsigned_int_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<::std::os::raw::c_uint>>(),
            4usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<::std::os::raw::c_uint>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<::std::os::raw::c_uint>>(),
            4usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<::std::os::raw::c_uint>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_long_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<::std::os::raw::c_long>>(),
            8usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<::std::os::raw::c_long>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<::std::os::raw::c_long>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<::std::os::raw::c_long>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_unsigned_long_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<::std::os::raw::c_ulong>>(),
            8usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<::std::os::raw::c_ulong>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<::std::os::raw::c_ulong>>(
            ),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<::std::os::raw::c_ulong>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_long_long_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<::std::os::raw::c_longlong>>(
            ),
            8usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<::std::os::raw::c_longlong>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<::std::os::raw::c_longlong>>(
            ),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<::std::os::raw::c_longlong>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_unsigned_long_long_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<::std::os::raw::c_ulonglong>>(
            ),
            8usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<::std::os::raw::c_ulonglong>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::std::atomic<::std::os::raw::c_ulonglong>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<::std::os::raw::c_ulonglong>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_wchar_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<u32>>(),
            4usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<u32>>(),
            4usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_char16_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<u16>>(),
            2usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<u16>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<u16>>(),
            2usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<u16>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_char32_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<u32>>(),
            4usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<u32>>(),
            4usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_int8_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<i8>>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<i8>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<i8>>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<i8>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_uint8_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<u8>>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<u8>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<u8>>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<u8>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_int16_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<i16>>(),
            2usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<i16>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<i16>>(),
            2usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<i16>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_uint16_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<u16>>(),
            2usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<u16>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<u16>>(),
            2usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<u16>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_int32_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<i32>>(),
            4usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<i32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<i32>>(),
            4usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<i32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_uint32_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<u32>>(),
            4usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<u32>>(),
            4usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_int64_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<i64>>(),
            8usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<i64>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<i64>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<i64>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_uint64_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<u64>>(),
            8usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<u64>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<u64>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<u64>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_int_least8_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<root::int_least8_t>>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<root::int_least8_t>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<root::int_least8_t>>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<root::int_least8_t>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_uint_least8_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<root::uint_least8_t>>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<root::uint_least8_t>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<root::uint_least8_t>>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<root::uint_least8_t>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_int_least16_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<root::int_least16_t>>(),
            2usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<root::int_least16_t>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<root::int_least16_t>>(),
            2usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<root::int_least16_t>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_uint_least16_t_close0_instantiation()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<root::uint_least16_t>>(),
            2usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<root::uint_least16_t>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<root::uint_least16_t>>(),
            2usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<root::uint_least16_t>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_int_least32_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<root::int_least32_t>>(),
            4usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<root::int_least32_t>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<root::int_least32_t>>(),
            4usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<root::int_least32_t>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_uint_least32_t_close0_instantiation()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<root::uint_least32_t>>(),
            4usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<root::uint_least32_t>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<root::uint_least32_t>>(),
            4usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<root::uint_least32_t>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_int_least64_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<root::int_least64_t>>(),
            8usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<root::int_least64_t>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<root::int_least64_t>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<root::int_least64_t>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_uint_least64_t_close0_instantiation()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<root::uint_least64_t>>(),
            8usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<root::uint_least64_t>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<root::uint_least64_t>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<root::uint_least64_t>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_int_fast8_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<root::int_fast8_t>>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<root::int_fast8_t>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<root::int_fast8_t>>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<root::int_fast8_t>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_uint_fast8_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<root::uint_fast8_t>>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<root::uint_fast8_t>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<root::uint_fast8_t>>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<root::uint_fast8_t>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_int_fast16_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<root::int_fast16_t>>(),
            8usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<root::int_fast16_t>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<root::int_fast16_t>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<root::int_fast16_t>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_uint_fast16_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<root::uint_fast16_t>>(),
            8usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<root::uint_fast16_t>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<root::uint_fast16_t>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<root::uint_fast16_t>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_int_fast32_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<root::int_fast32_t>>(),
            8usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<root::int_fast32_t>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<root::int_fast32_t>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<root::int_fast32_t>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_uint_fast32_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<root::uint_fast32_t>>(),
            8usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<root::uint_fast32_t>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<root::uint_fast32_t>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<root::uint_fast32_t>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_int_fast64_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<root::int_fast64_t>>(),
            8usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<root::int_fast64_t>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<root::int_fast64_t>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<root::int_fast64_t>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_uint_fast64_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<root::uint_fast64_t>>(),
            8usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<root::uint_fast64_t>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<root::uint_fast64_t>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<root::uint_fast64_t>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_intptr_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<isize>>(),
            8usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<isize>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<isize>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<isize>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_uintptr_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<usize>>(),
            8usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<usize>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<usize>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<usize>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_size_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<root::std::size_t>>(),
            8usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<root::std::size_t>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<root::std::size_t>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<root::std::size_t>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_ptrdiff_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<isize>>(),
            8usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<isize>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<isize>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<isize>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_intmax_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<root::intmax_t>>(),
            8usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<root::intmax_t>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<root::intmax_t>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<root::intmax_t>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_uintmax_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<root::uintmax_t>>(),
            8usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<root::uintmax_t>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<root::uintmax_t>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<root::uintmax_t>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_atomic_open0_bool__close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::atomic<bool>>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::atomic<bool>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::atomic<bool>>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::atomic<bool>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_Breakpoint_allocator_open1_Breakpoint_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_Breakpoint_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_Breakpoint_allocator_open1_Breakpoint_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_Breakpoint_close0_instantiation_1()
    {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    #[cfg(feature = "frontend")]
    #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "frontend")))]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_10(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::std::basic_string<::std::os::raw::c_char>,
            >(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<::std::os::raw::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::std::basic_string<::std::os::raw::c_char>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<::std::os::raw::c_char>)
            )
        );
    }
    #[test]
    #[cfg(feature = "frontend")]
    #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "frontend")))]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_43() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    #[cfg(feature = "frontend")]
    #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "frontend")))]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_19() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    #[cfg(feature = "frontend")]
    #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "frontend")))]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_11(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::std::basic_string<::std::os::raw::c_char>,
            >(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string<::std::os::raw::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::std::basic_string<::std::os::raw::c_char>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string<::std::os::raw::c_char>)
            )
        );
    }
    #[test]
    #[cfg(feature = "frontend")]
    #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "frontend")))]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_44() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    #[cfg(feature = "frontend")]
    #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "frontend")))]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_20() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    #[cfg(feature = "grader")]
    #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "grader")))]
    fn __bindgen_test_layout_vector_open0_char_allocator_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    #[cfg(feature = "grader")]
    #[cfg_attr(all(docs, not(doctest)), doc(cfg(feature = "grader")))]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_21() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
}
